timeout 900 ./AProVE.sh -m wst --bit-width 64 Adding_Subtracting_Zero_2_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Adding_Subtracting_Zero_2_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Adding_Subtracting_Zero_2_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 78 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1948 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 592 ms]
(8) IntTRS
(9) IRS2T2 [EQUIVALENT, 0 ms]
(10) T2IntSys
(11) T2 [EQUIVALENT, 681 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Adding_Subtracting_Zero_2_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Adding_Subtracting_Zero_2_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Name: flag initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "ff_subtitles_next_line" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 14
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 (...)* @__VERIFIER_nondet_int()
		store %3, %2
		%4 = load %2
		%5 = srem i32 %4, 1000
		store %5, %2
		%6 = load @flag
		%7 = icmp eq %6 1
		br %7, %8, %9
	8:
		store 0, %1
		br %21
	9:
		%10 = load %2
		%11 = icmp eq %10 0
		br %11, %12, %13
	12:
		store 1, @flag
		store 0, %1
		br %21
	13:
		%14 = load %2
		%15 = icmp slt %14 0
		br %15, %16, %19
	16:
		%17 = load %2
		%18 = sub i32 0, %17
		store %18, %1
		br %21
	19:
		%20 = load %2
		store %20, %1
		br %21
	21:
		%22 = load %1
		ret %22

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 45
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 (...)* @__VERIFIER_nondet_int()
		store %6, %3
		%7 = load %2
		%8 = icmp slt %7 0
		br %8, %12, %9
	9:
		%10 = load %3
		%11 = icmp slt %10 0
		br %11, %12, %13
	12:
		store 0, %1
		br %34
	13:
		br %14
	14:
		%15 = load %2
		%16 = load %3
		%17 = icmp slt %15 %16
		br %17, %18, %33
	18:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%19 = call i32 @ff_subtitles_next_line()
		store %19, %4
		%20 = load %4
		%21 = icmp ne %20 0
		br %21, %23, %22
	22:
		br %33
	23:
		%24 = load %4
		%25 = load %2
		%26 = add i32 %25, %24
		store %26, %2
		%27 = load %2
		%28 = load %3
		%29 = sub i32 %28, 4
		%30 = icmp sge %27 %29
		br %30, %31, %32
	31:
		store 0, %1
		br %34
	32:
		br %14
	33:
		store 0, %1
		br %34
	34:
		%35 = load %1
		ret %35


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 62 rulesP rules:
f_509(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_511(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: 0 = 0
f_511(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_513(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: TRUE
f_513(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_515(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: 0 = 0
f_515(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_517(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: v614 < 0
f_515(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_518(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: 0 <= v614
f_517(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_520(v394, v608, v610, v612, v614, v399, 0, 1, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) :|: 0 = 0
f_520(v394, v608, v610, v612, v614, v399, 0, 1, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_522(v394, v608, v610, v612, v614, v399, 0, 1, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) :|: TRUE
f_522(v394, v608, v610, v612, v614, v399, 0, 1, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_524(v394, v608, v610, v612, v614, v399, 0, 1, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) :|: 0 = 0
f_524(v394, v608, v610, v612, v614, v399, 0, 1, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_526(v394, v608, v610, v612, v614, v399, 0, 1, v648, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) :|: v648 + v614 = 0 && 1 <= v648 && v648 <= 999
f_526(v394, v608, v610, v612, v614, v399, 0, 1, v648, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_528(v394, v608, v610, v612, v614, v399, 0, 1, v648, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) :|: TRUE
f_528(v394, v608, v610, v612, v614, v399, 0, 1, v648, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_530(v394, v608, v610, v612, v614, v399, 0, 1, v648, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) :|: TRUE
f_530(v394, v608, v610, v612, v614, v399, 0, 1, v648, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_447(v394, v608, v610, v612, v614, v399, 0, 1, v648, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v522, v408, v407, 3, 1000, 999, 4) :|: TRUE
f_447(v394, v395, v396, v397, v398, v399, 0, 1, v402, v410, v403, v411, v404, v412, v405, v413, v406, v414, v415, v416, v409, v408, v407, 3, 1000, 999, 4) -> f_450(v394, v395, v396, v397, v398, v399, 0, 1, v402, v410, v403, v411, v404, v412, v405, v413, v406, v414, v415, v416, v409, v408, v407, 3, 1000, 999, 4) :|: 0 = 0
f_450(v394, v395, v396, v397, v398, v399, 0, 1, v402, v410, v403, v411, v404, v412, v405, v413, v406, v414, v415, v416, v409, v408, v407, 3, 1000, 999, 4) -> f_453(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) :|: 0 = 0
f_453(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) -> f_456(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) :|: TRUE
f_456(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) -> f_459(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) :|: 0 = 0
f_459(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) -> f_463(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) :|: 0 = 0
f_463(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) -> f_466(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) :|: TRUE
f_466(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) -> f_469(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) :|: 0 = 0
f_469(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) -> f_471(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) :|: 0 = 0
f_471(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v410, v411, v412, v413, v414, v399, 3, 999, 4) -> f_473(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v410, v411, v412, v413, v414, v399, 3, 999, 4) :|: v522 = v409 + v402 && 1 <= v522
f_473(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v410, v411, v412, v413, v414, v399, 3, 999, 4) -> f_475(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v410, v411, v412, v413, v414, v399, 3, 999, 4) :|: TRUE
f_475(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v410, v411, v412, v413, v414, v399, 3, 999, 4) -> f_477(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v410, v411, v412, v413, v414, v399, 3, 999, 4) :|: 0 = 0
f_477(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v410, v411, v412, v413, v414, v399, 3, 999, 4) -> f_478(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v410, v411, v412, v413, v414, v399, 3, 999, 4) :|: 0 = 0
f_478(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v410, v411, v412, v413, v414, v399, 3, 999, 4) -> f_479(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999) :|: 4 + v563 = v408 && 0 <= 3 + v563
f_479(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999) -> f_481(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) :|: v522 < v563 && 2 <= v563 && 6 <= v408
f_481(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) -> f_483(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) :|: 0 = 0
f_483(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) -> f_485(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) :|: TRUE
f_485(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) -> f_487(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) :|: TRUE
f_487(v394, v403, v404, v405, v406, v407, v408, 0, v409, 1, v402, v522, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) -> f_489(v394, v403, v404, v405, v406, v407, v408, 0, v522, 1, v402, v409, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) :|: 0 = 0
f_489(v394, v403, v404, v405, v406, v407, v408, 0, v522, 1, v402, v409, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) -> f_491(v394, v403, v404, v405, v406, v407, v408, 0, v522, 1, v402, v409, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) :|: 0 = 0
f_491(v394, v403, v404, v405, v406, v407, v408, 0, v522, 1, v402, v409, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) -> f_492(v394, v403, v404, v405, v406, v407, v408, 0, v522, 1, v402, v409, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) :|: 0 = 0
f_492(v394, v403, v404, v405, v406, v407, v408, 0, v522, 1, v402, v409, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) -> f_493(v394, v403, v404, v405, v406, v407, v408, 0, v522, 1, v402, v409, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) :|: TRUE
f_493(v394, v403, v404, v405, v406, v407, v408, 0, v522, 1, v402, v409, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) -> f_494(v394, v403, v404, v405, v406, v407, v408, 0, v522, 1, v402, v409, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) :|: TRUE
f_494(v394, v403, v404, v405, v406, v407, v408, 0, v522, 1, v402, v409, v563, v410, v411, v412, v413, v414, v399, 3, 4, 999, 6, 2) -> f_495(v394, v410, v403, v411, v404, v412, v405, v413, v406, v414, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) :|: TRUE
f_495(v394, v410, v403, v411, v404, v412, v405, v413, v406, v414, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) -> f_496(v394, v608, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) :|: 1 <= v608 && v609 = 3 + v608 && 4 <= v609
f_496(v394, v608, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) -> f_497(v394, v608, v610, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) :|: 1 <= v610 && v611 = 3 + v610 && 4 <= v611
f_497(v394, v608, v610, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) -> f_498(v394, v608, v610, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) :|: TRUE
f_498(v394, v608, v610, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) -> f_499(v394, v608, v610, v612, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) :|: TRUE
f_499(v394, v608, v610, v612, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) -> f_500(v394, v608, v610, v612, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) :|: TRUE
f_500(v394, v608, v610, v612, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) -> f_501(v394, v608, v610, v612, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) :|: 0 = 0
f_501(v394, v608, v610, v612, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 999, 6, 2) -> f_502(v394, v608, v610, v612, v614, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: v614 = v612 - v612 / 1000 * 1000 && v614 < 1000 && 0 <= 999 + v614
f_502(v394, v608, v610, v612, v614, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_503(v394, v608, v610, v612, v614, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: TRUE
f_503(v394, v608, v610, v612, v614, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v399, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_504(v394, v608, v610, v612, v614, v399, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: 0 = 0
f_504(v394, v608, v610, v612, v614, v399, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, 0, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_505(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: 0 = 0
f_505(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_506(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: TRUE
f_506(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_507(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: 0 = 0
f_507(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_509(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: v614 != 0
f_518(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_521(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: 0 = 0
f_521(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_523(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: TRUE
f_523(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_525(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: 0 = 0
f_525(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_527(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: TRUE
f_527(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_529(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) :|: TRUE
f_529(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v408, v402, v522, v407, 1, v409, v563, 3, 4, 1000, 999, 6, 2) -> f_444(v394, v608, v610, v612, v614, v399, 0, v410, v403, v411, v404, v412, v405, v413, v406, v414, v609, v611, v522, v408, v369, 1, 3, 1000, 999, 4) :|: TRUE
f_444(v358, v359, v360, v361, v362, v363, 0, v373, v365, v374, v366, v375, v367, v376, v368, v377, v378, v379, v371, v370, v369, 1, 3, 1000, 999, 4) -> f_448(v358, v359, v360, v361, v362, v363, 0, v373, v365, v374, v366, v375, v367, v376, v368, v377, v378, v379, v371, v370, v369, 1, 3, 1000, 999, 4) :|: 0 = 0
f_448(v358, v359, v360, v361, v362, v363, 0, v373, v365, v374, v366, v375, v367, v376, v368, v377, v378, v379, v371, v370, v369, 1, 3, 1000, 999, 4) -> f_451(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) :|: 0 = 0
f_451(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) -> f_454(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) :|: TRUE
f_454(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) -> f_457(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) :|: 0 = 0
f_457(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) -> f_460(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) :|: 0 < v362
f_460(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) -> f_464(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) :|: 0 = 0
f_464(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) -> f_467(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) :|: TRUE
f_467(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) -> f_466(v358, v365, v366, v367, v368, v369, v370, 0, v371, 1, v362, v373, v374, v375, v376, v377, v363, 3, 999, 4) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_509(v394:0, v608:0, v610:0, v612:0, v614:0, v399:0, 0, v410:0, v403:0, v411:0, v404:0, v412:0, v405:0, v413:0, v406:0, v414:0, v609:0, v611:0, 4 + v563:1, v402:0, v522:0, v407:0, 1, v409:0, v563:0, 3, 4, 1000, 999, 6, 2) -> f_509(v394:0, v608:1, v610:1, v612:1, v612:1 - v612:1 / 1000 * 1000, v399:0, 0, v410:0, v403:0, v411:0, v404:0, v412:0, v405:0, v413:0, v406:0, v414:0, 3 + v608:1, 3 + v610:1, 4 + v563:1, v614:0, v522:0 + v614:0, v369:0, 1, v522:0, v563:1, 3, 4, 1000, 999, 6, 2) :|: v563:1 > 1 && v614:0 > 0 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v608:1 > 0 && v610:1 > 0 && v612:1 - v612:1 / 1000 * 1000 < 1000 && v612:1 - v612:1 / 1000 * 1000 < 0 && v612:1 - v612:1 / 1000 * 1000 > -1000
f_509(v394:0, v608:0, v610:0, v612:0, v614:0, v399:0, 0, v410:0, v403:0, v411:0, v404:0, v412:0, v405:0, v413:0, v406:0, v414:0, v609:0, v611:0, 4 + v563:1, v402:0, v522:0, v407:0, 1, v409:0, v563:0, 3, 4, 1000, 999, 6, 2) -> f_509(v394:0, v608:1, v610:1, v612:1, v612:1 - v612:1 / 1000 * 1000, v399:0, 0, v410:0, v403:0, v411:0, v404:0, v412:0, v405:0, v413:0, v406:0, v414:0, 3 + v608:1, 3 + v610:1, 4 + v563:1, v614:0, v522:0 + v614:0, v369:0, 1, v522:0, v563:1, 3, 4, 1000, 999, 6, 2) :|: v563:1 > 1 && v614:0 > 0 && v612:1 - v612:1 / 1000 * 1000 > 0 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v608:1 > 0 && v610:1 > 0 && v612:1 - v612:1 / 1000 * 1000 < 1000
f_509(v394:0, v608:0, v610:0, v612:0, v614:0, v399:0, 0, v410:0, v403:0, v411:0, v404:0, v412:0, v405:0, v413:0, v406:0, v414:0, v609:0, v611:0, 4 + v563:1, v402:0, v522:0, v407:0, 1, v409:0, v563:0, 3, 4, 1000, 999, 6, 2) -> f_509(v394:0, v608:1, v610:1, v612:1, v612:1 - v612:1 / 1000 * 1000, v399:0, 0, v410:0, v403:0, v411:0, v404:0, v412:0, v405:0, v413:0, v406:0, v414:0, 3 + v608:1, 3 + v610:1, 4 + v563:1, v648:0, v522:0 + v648:0, v407:0, 1, v522:0, v563:1, 3, 4, 1000, 999, 6, 2) :|: v563:1 > 1 && v614:0 < 0 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v608:1 > 0 && v610:1 > 0 && v612:1 - v612:1 / 1000 * 1000 < 1000 && v612:1 - v612:1 / 1000 * 1000 < 0 && v612:1 - v612:1 / 1000 * 1000 > -1000
f_509(v394:0, v608:0, v610:0, v612:0, v614:0, v399:0, 0, v410:0, v403:0, v411:0, v404:0, v412:0, v405:0, v413:0, v406:0, v414:0, v609:0, v611:0, 4 + v563:1, v402:0, v522:0, v407:0, 1, v409:0, v563:0, 3, 4, 1000, 999, 6, 2) -> f_509(v394:0, v608:1, v610:1, v612:1, v612:1 - v612:1 / 1000 * 1000, v399:0, 0, v410:0, v403:0, v411:0, v404:0, v412:0, v405:0, v413:0, v406:0, v414:0, 3 + v608:1, 3 + v610:1, 4 + v563:1, v648:0, v522:0 + v648:0, v407:0, 1, v522:0, v563:1, 3, 4, 1000, 999, 6, 2) :|: v563:1 > 1 && v612:1 - v612:1 / 1000 * 1000 > 0 && v614:0 < 0 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v608:1 > 0 && v610:1 > 0 && v612:1 - v612:1 / 1000 * 1000 < 1000
Filtered unneeded arguments:
   f_509(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_509(x5, x19, x21)
Removed division, modulo operations, cleaned up constraints. Obtained 28 rules.P rules:
f_509(v614:0, sum~cons_4~v563:1, v522:0) -> f_509'(v614:0, 4 + v563:1, v522:0) :|: v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div2 > -1000 && v612:1 - 1000 * div1 < 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div1 < 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div2 > -1000 && v612:1 < 0 && v612:1 - 1000 * div > -1000 && v612:1 - 1000 * div <= 0 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div3 <= 0 && v612:1 - 1000 * div3 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div1 < 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div2 > -1000 && v612:1 < 0 && v612:1 - 1000 * div > -1000 && v612:1 - 1000 * div <= 0 && v612:1 - 1000 * div1 > -1000 && v612:1 > -1 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div3 < 1000 && v612:1 - 1000 * div3 >= 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div1 < 0 && v612:1 - 1000 * div2 >= 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div < 1000 && v612:1 < 0 && v612:1 - 1000 * div > -1000 && v612:1 - 1000 * div <= 0 && v612:1 - 1000 * div1 > -1000 && v612:1 > -1 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div3 <= 0 && v612:1 - 1000 * div3 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div1 < 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div2 > -1000 && v612:1 > -1 && v612:1 - 1000 * div >= 0 && v612:1 < 0 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div3 <= 0 && v612:1 - 1000 * div3 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div1 < 0 && v612:1 - 1000 * div2 >= 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div < 1000 && v612:1 < 0 && v612:1 - 1000 * div > -1000 && v612:1 - 1000 * div <= 0 && v612:1 - 1000 * div1 > -1000 && v612:1 > -1 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div3 < 1000 && v612:1 - 1000 * div3 >= 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div1 < 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div2 > -1000 && v612:1 > -1 && v612:1 - 1000 * div >= 0 && v612:1 < 0 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div3 < 1000 && v612:1 - 1000 * div3 >= 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div1 < 0 && v612:1 - 1000 * div2 >= 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div < 1000 && v612:1 > -1 && v612:1 - 1000 * div >= 0 && v612:1 < 0 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div3 <= 0 && v612:1 - 1000 * div3 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div1 < 0 && v612:1 - 1000 * div2 >= 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div < 1000 && v612:1 > -1 && v612:1 - 1000 * div >= 0 && v612:1 < 0 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div3 < 1000 && v612:1 - 1000 * div3 >= 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509(v614:0, sum~cons_4~v563:1, v522:0) -> f_509'(v614:0, 4 + v563:1, v522:0) :|: v614:0 > 0 && v563:1 > 1 && v612:1 - 1000 * div > 0 && v522:0 + v614:0 > 0 && v612:1 - 1000 * div1 < 1000 && v563:1 > v522:0 + v614:0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div2, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div > 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div1 < 1000 && v612:1 > -1 && v612:1 < 0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div1 <= 0 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div2 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div2, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div > 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div1 < 1000 && v612:1 > -1 && v612:1 < 0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div1 <= 0 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div2 >= 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div2, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div > 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div1 < 1000 && v612:1 > -1 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div1 >= 0 && v612:1 < 0 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div2 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div2, 4 + v563:1, v522:0 + v614:0) :|: v612:1 - 1000 * div > 0 && v614:0 > 0 && v563:1 > 1 && v522:0 + v614:0 > 0 && v563:1 > v522:0 + v614:0 && v612:1 - 1000 * div1 < 1000 && v612:1 > -1 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div1 >= 0 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div2 >= 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509(v614:0, sum~cons_4~v563:1, v522:0) -> f_509'(v614:0, 4 + v563:1, v522:0) :|: v614:0 < 0 && v563:1 > 1 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div2 > -1000 && v612:1 - 1000 * div1 < 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div1 < 0 && v614:0 < 0 && v563:1 > 1 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div2 > -1000 && v612:1 < 0 && v612:1 - 1000 * div > -1000 && v612:1 - 1000 * div <= 0 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div3 <= 0 && v612:1 - 1000 * div3 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div1 < 0 && v614:0 < 0 && v563:1 > 1 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div2 > -1000 && v612:1 < 0 && v612:1 - 1000 * div > -1000 && v612:1 - 1000 * div <= 0 && v612:1 - 1000 * div1 > -1000 && v612:1 > -1 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div3 < 1000 && v612:1 - 1000 * div3 >= 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div1 < 0 && v612:1 - 1000 * div2 >= 0 && v614:0 < 0 && v563:1 > 1 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div < 1000 && v612:1 < 0 && v612:1 - 1000 * div > -1000 && v612:1 - 1000 * div <= 0 && v612:1 - 1000 * div1 > -1000 && v612:1 > -1 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div3 <= 0 && v612:1 - 1000 * div3 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div1 < 0 && v614:0 < 0 && v563:1 > 1 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div2 > -1000 && v612:1 > -1 && v612:1 - 1000 * div >= 0 && v612:1 < 0 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div3 <= 0 && v612:1 - 1000 * div3 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div1 < 0 && v612:1 - 1000 * div2 >= 0 && v614:0 < 0 && v563:1 > 1 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div < 1000 && v612:1 < 0 && v612:1 - 1000 * div > -1000 && v612:1 - 1000 * div <= 0 && v612:1 - 1000 * div1 > -1000 && v612:1 > -1 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div3 < 1000 && v612:1 - 1000 * div3 >= 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div1 < 0 && v614:0 < 0 && v563:1 > 1 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div2 > -1000 && v612:1 > -1 && v612:1 - 1000 * div >= 0 && v612:1 < 0 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div3 < 1000 && v612:1 - 1000 * div3 >= 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div1 < 0 && v612:1 - 1000 * div2 >= 0 && v614:0 < 0 && v563:1 > 1 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div < 1000 && v612:1 > -1 && v612:1 - 1000 * div >= 0 && v612:1 < 0 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div3 <= 0 && v612:1 - 1000 * div3 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div3, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div1 < 0 && v612:1 - 1000 * div2 >= 0 && v614:0 < 0 && v563:1 > 1 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div < 1000 && v612:1 > -1 && v612:1 - 1000 * div >= 0 && v612:1 < 0 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div3 < 1000 && v612:1 - 1000 * div3 >= 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509(v614:0, sum~cons_4~v563:1, v522:0) -> f_509'(v614:0, 4 + v563:1, v522:0) :|: v612:1 - 1000 * div > 0 && v563:1 > 1 && v614:0 < 0 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v612:1 - 1000 * div1 < 1000 && v563:1 > v522:0 + v648:0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div2, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div > 0 && v563:1 > 1 && v614:0 < 0 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div1 < 1000 && v612:1 > -1 && v612:1 < 0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div1 <= 0 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div2 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div2, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div > 0 && v563:1 > 1 && v614:0 < 0 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div1 < 1000 && v612:1 > -1 && v612:1 < 0 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div1 > -1000 && v612:1 - 1000 * div1 <= 0 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div2 >= 0 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div2, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div > 0 && v563:1 > 1 && v614:0 < 0 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div1 < 1000 && v612:1 > -1 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div1 >= 0 && v612:1 < 0 && v612:1 - 1000 * div2 <= 0 && v612:1 - 1000 * div2 > -1000 && sum~cons_4~v563:1 = 4 + v563:1
f_509'(v614:0, sum~cons_4~v563:1, v522:0) -> f_509(v612:1 - 1000 * div2, 4 + v563:1, v522:0 + v648:0) :|: v612:1 - 1000 * div > 0 && v563:1 > 1 && v614:0 < 0 && v648:0 > 0 && v648:0 + v614:0 = 0 && v648:0 < 1000 && v522:0 + v648:0 > 0 && v563:1 > v522:0 + v648:0 && v612:1 - 1000 * div1 < 1000 && v612:1 > -1 && v612:1 - 1000 * div < 1000 && v612:1 - 1000 * div1 >= 0 && v612:1 - 1000 * div2 < 1000 && v612:1 - 1000 * div2 >= 0 && sum~cons_4~v563:1 = 4 + v563:1

----------------------------------------

(8)
Obligation:
Rules:
f_509(x, x1, x2) -> f_509'(x, 4 + x3, x2) :|: x > 0 && x3 > 1 && x2 + x > 0 && x3 > x2 + x && x4 - 1000 * x5 < 1000 && x4 - 1000 * x6 > -1000 && x4 - 1000 * x7 < 0 && x1 = 4 + x3
f_509'(x8, x9, x10) -> f_509(x11 - 1000 * x12, 4 + x13, x10 + x8) :|: x11 - 1000 * x14 < 0 && x8 > 0 && x13 > 1 && x10 + x8 > 0 && x13 > x10 + x8 && x11 - 1000 * x15 < 1000 && x11 - 1000 * x16 > -1000 && x11 < 0 && x11 - 1000 * x15 > -1000 && x11 - 1000 * x15 <= 0 && x11 - 1000 * x14 > -1000 && x11 - 1000 * x16 <= 0 && x11 - 1000 * x12 <= 0 && x11 - 1000 * x12 > -1000 && x9 = 4 + x13
f_509'(x17, x18, x19) -> f_509(x20 - 1000 * x21, 4 + x22, x19 + x17) :|: x20 - 1000 * x23 < 0 && x17 > 0 && x22 > 1 && x19 + x17 > 0 && x22 > x19 + x17 && x20 - 1000 * x24 < 1000 && x20 - 1000 * x25 > -1000 && x20 < 0 && x20 - 1000 * x24 > -1000 && x20 - 1000 * x24 <= 0 && x20 - 1000 * x23 > -1000 && x20 > -1 && x20 - 1000 * x25 <= 0 && x20 - 1000 * x21 < 1000 && x20 - 1000 * x21 >= 0 && x18 = 4 + x22
f_509'(x26, x27, x28) -> f_509(x29 - 1000 * x30, 4 + x31, x28 + x26) :|: x29 - 1000 * x32 < 0 && x29 - 1000 * x33 >= 0 && x26 > 0 && x31 > 1 && x28 + x26 > 0 && x31 > x28 + x26 && x29 - 1000 * x34 < 1000 && x29 < 0 && x29 - 1000 * x34 > -1000 && x29 - 1000 * x34 <= 0 && x29 - 1000 * x32 > -1000 && x29 > -1 && x29 - 1000 * x33 < 1000 && x29 - 1000 * x30 <= 0 && x29 - 1000 * x30 > -1000 && x27 = 4 + x31
f_509'(x35, x36, x37) -> f_509(x38 - 1000 * x39, 4 + x40, x37 + x35) :|: x38 - 1000 * x41 < 0 && x35 > 0 && x40 > 1 && x37 + x35 > 0 && x40 > x37 + x35 && x38 - 1000 * x42 < 1000 && x38 - 1000 * x43 > -1000 && x38 > -1 && x38 - 1000 * x42 >= 0 && x38 < 0 && x38 - 1000 * x41 > -1000 && x38 - 1000 * x43 <= 0 && x38 - 1000 * x39 <= 0 && x38 - 1000 * x39 > -1000 && x36 = 4 + x40
f_509'(x44, x45, x46) -> f_509(x47 - 1000 * x48, 4 + x49, x46 + x44) :|: x47 - 1000 * x50 < 0 && x47 - 1000 * x51 >= 0 && x44 > 0 && x49 > 1 && x46 + x44 > 0 && x49 > x46 + x44 && x47 - 1000 * x52 < 1000 && x47 < 0 && x47 - 1000 * x52 > -1000 && x47 - 1000 * x52 <= 0 && x47 - 1000 * x50 > -1000 && x47 > -1 && x47 - 1000 * x51 < 1000 && x47 - 1000 * x48 < 1000 && x47 - 1000 * x48 >= 0 && x45 = 4 + x49
f_509'(x53, x54, x55) -> f_509(x56 - 1000 * x57, 4 + x58, x55 + x53) :|: x56 - 1000 * x59 < 0 && x53 > 0 && x58 > 1 && x55 + x53 > 0 && x58 > x55 + x53 && x56 - 1000 * x60 < 1000 && x56 - 1000 * x61 > -1000 && x56 > -1 && x56 - 1000 * x60 >= 0 && x56 < 0 && x56 - 1000 * x59 > -1000 && x56 - 1000 * x61 <= 0 && x56 - 1000 * x57 < 1000 && x56 - 1000 * x57 >= 0 && x54 = 4 + x58
f_509'(x62, x63, x64) -> f_509(x65 - 1000 * x66, 4 + x67, x64 + x62) :|: x65 - 1000 * x68 < 0 && x65 - 1000 * x69 >= 0 && x62 > 0 && x67 > 1 && x64 + x62 > 0 && x67 > x64 + x62 && x65 - 1000 * x70 < 1000 && x65 > -1 && x65 - 1000 * x70 >= 0 && x65 < 0 && x65 - 1000 * x68 > -1000 && x65 - 1000 * x69 < 1000 && x65 - 1000 * x66 <= 0 && x65 - 1000 * x66 > -1000 && x63 = 4 + x67
f_509'(x71, x72, x73) -> f_509(x74 - 1000 * x75, 4 + x76, x73 + x71) :|: x74 - 1000 * x77 < 0 && x74 - 1000 * x78 >= 0 && x71 > 0 && x76 > 1 && x73 + x71 > 0 && x76 > x73 + x71 && x74 - 1000 * x79 < 1000 && x74 > -1 && x74 - 1000 * x79 >= 0 && x74 < 0 && x74 - 1000 * x77 > -1000 && x74 - 1000 * x78 < 1000 && x74 - 1000 * x75 < 1000 && x74 - 1000 * x75 >= 0 && x72 = 4 + x76
f_509(x80, x81, x82) -> f_509'(x80, 4 + x83, x82) :|: x80 > 0 && x83 > 1 && x84 - 1000 * x85 > 0 && x82 + x80 > 0 && x84 - 1000 * x86 < 1000 && x83 > x82 + x80 && x81 = 4 + x83
f_509'(x87, x88, x89) -> f_509(x90 - 1000 * x91, 4 + x92, x89 + x87) :|: x90 - 1000 * x93 > 0 && x87 > 0 && x92 > 1 && x89 + x87 > 0 && x92 > x89 + x87 && x90 - 1000 * x94 < 1000 && x90 > -1 && x90 < 0 && x90 - 1000 * x93 < 1000 && x90 - 1000 * x94 > -1000 && x90 - 1000 * x94 <= 0 && x90 - 1000 * x91 <= 0 && x90 - 1000 * x91 > -1000 && x88 = 4 + x92
f_509'(x95, x96, x97) -> f_509(x98 - 1000 * x99, 4 + x100, x97 + x95) :|: x98 - 1000 * x101 > 0 && x95 > 0 && x100 > 1 && x97 + x95 > 0 && x100 > x97 + x95 && x98 - 1000 * x102 < 1000 && x98 > -1 && x98 < 0 && x98 - 1000 * x101 < 1000 && x98 - 1000 * x102 > -1000 && x98 - 1000 * x102 <= 0 && x98 - 1000 * x99 < 1000 && x98 - 1000 * x99 >= 0 && x96 = 4 + x100
f_509'(x103, x104, x105) -> f_509(x106 - 1000 * x107, 4 + x108, x105 + x103) :|: x106 - 1000 * x109 > 0 && x103 > 0 && x108 > 1 && x105 + x103 > 0 && x108 > x105 + x103 && x106 - 1000 * x110 < 1000 && x106 > -1 && x106 - 1000 * x109 < 1000 && x106 - 1000 * x110 >= 0 && x106 < 0 && x106 - 1000 * x107 <= 0 && x106 - 1000 * x107 > -1000 && x104 = 4 + x108
f_509'(x111, x112, x113) -> f_509(x114 - 1000 * x115, 4 + x116, x113 + x111) :|: x114 - 1000 * x117 > 0 && x111 > 0 && x116 > 1 && x113 + x111 > 0 && x116 > x113 + x111 && x114 - 1000 * x118 < 1000 && x114 > -1 && x114 - 1000 * x117 < 1000 && x114 - 1000 * x118 >= 0 && x114 - 1000 * x115 < 1000 && x114 - 1000 * x115 >= 0 && x112 = 4 + x116
f_509(x119, x120, x121) -> f_509'(x119, 4 + x122, x121) :|: x119 < 0 && x122 > 1 && x123 > 0 && x123 + x119 = 0 && x123 < 1000 && x121 + x123 > 0 && x122 > x121 + x123 && x124 - 1000 * x125 < 1000 && x124 - 1000 * x126 > -1000 && x124 - 1000 * x127 < 0 && x120 = 4 + x122
f_509'(x128, x129, x130) -> f_509(x131 - 1000 * x132, 4 + x133, x130 + x134) :|: x131 - 1000 * x135 < 0 && x128 < 0 && x133 > 1 && x134 > 0 && x134 + x128 = 0 && x134 < 1000 && x130 + x134 > 0 && x133 > x130 + x134 && x131 - 1000 * x136 < 1000 && x131 - 1000 * x137 > -1000 && x131 < 0 && x131 - 1000 * x136 > -1000 && x131 - 1000 * x136 <= 0 && x131 - 1000 * x135 > -1000 && x131 - 1000 * x137 <= 0 && x131 - 1000 * x132 <= 0 && x131 - 1000 * x132 > -1000 && x129 = 4 + x133
f_509'(x138, x139, x140) -> f_509(x141 - 1000 * x142, 4 + x143, x140 + x144) :|: x141 - 1000 * x145 < 0 && x138 < 0 && x143 > 1 && x144 > 0 && x144 + x138 = 0 && x144 < 1000 && x140 + x144 > 0 && x143 > x140 + x144 && x141 - 1000 * x146 < 1000 && x141 - 1000 * x147 > -1000 && x141 < 0 && x141 - 1000 * x146 > -1000 && x141 - 1000 * x146 <= 0 && x141 - 1000 * x145 > -1000 && x141 > -1 && x141 - 1000 * x147 <= 0 && x141 - 1000 * x142 < 1000 && x141 - 1000 * x142 >= 0 && x139 = 4 + x143
f_509'(x148, x149, x150) -> f_509(x151 - 1000 * x152, 4 + x153, x150 + x154) :|: x151 - 1000 * x155 < 0 && x151 - 1000 * x156 >= 0 && x148 < 0 && x153 > 1 && x154 > 0 && x154 + x148 = 0 && x154 < 1000 && x150 + x154 > 0 && x153 > x150 + x154 && x151 - 1000 * x157 < 1000 && x151 < 0 && x151 - 1000 * x157 > -1000 && x151 - 1000 * x157 <= 0 && x151 - 1000 * x155 > -1000 && x151 > -1 && x151 - 1000 * x156 < 1000 && x151 - 1000 * x152 <= 0 && x151 - 1000 * x152 > -1000 && x149 = 4 + x153
f_509'(x158, x159, x160) -> f_509(x161 - 1000 * x162, 4 + x163, x160 + x164) :|: x161 - 1000 * x165 < 0 && x158 < 0 && x163 > 1 && x164 > 0 && x164 + x158 = 0 && x164 < 1000 && x160 + x164 > 0 && x163 > x160 + x164 && x161 - 1000 * x166 < 1000 && x161 - 1000 * x167 > -1000 && x161 > -1 && x161 - 1000 * x166 >= 0 && x161 < 0 && x161 - 1000 * x165 > -1000 && x161 - 1000 * x167 <= 0 && x161 - 1000 * x162 <= 0 && x161 - 1000 * x162 > -1000 && x159 = 4 + x163
f_509'(x168, x169, x170) -> f_509(x171 - 1000 * x172, 4 + x173, x170 + x174) :|: x171 - 1000 * x175 < 0 && x171 - 1000 * x176 >= 0 && x168 < 0 && x173 > 1 && x174 > 0 && x174 + x168 = 0 && x174 < 1000 && x170 + x174 > 0 && x173 > x170 + x174 && x171 - 1000 * x177 < 1000 && x171 < 0 && x171 - 1000 * x177 > -1000 && x171 - 1000 * x177 <= 0 && x171 - 1000 * x175 > -1000 && x171 > -1 && x171 - 1000 * x176 < 1000 && x171 - 1000 * x172 < 1000 && x171 - 1000 * x172 >= 0 && x169 = 4 + x173
f_509'(x178, x179, x180) -> f_509(x181 - 1000 * x182, 4 + x183, x180 + x184) :|: x181 - 1000 * x185 < 0 && x178 < 0 && x183 > 1 && x184 > 0 && x184 + x178 = 0 && x184 < 1000 && x180 + x184 > 0 && x183 > x180 + x184 && x181 - 1000 * x186 < 1000 && x181 - 1000 * x187 > -1000 && x181 > -1 && x181 - 1000 * x186 >= 0 && x181 < 0 && x181 - 1000 * x185 > -1000 && x181 - 1000 * x187 <= 0 && x181 - 1000 * x182 < 1000 && x181 - 1000 * x182 >= 0 && x179 = 4 + x183
f_509'(x188, x189, x190) -> f_509(x191 - 1000 * x192, 4 + x193, x190 + x194) :|: x191 - 1000 * x195 < 0 && x191 - 1000 * x196 >= 0 && x188 < 0 && x193 > 1 && x194 > 0 && x194 + x188 = 0 && x194 < 1000 && x190 + x194 > 0 && x193 > x190 + x194 && x191 - 1000 * x197 < 1000 && x191 > -1 && x191 - 1000 * x197 >= 0 && x191 < 0 && x191 - 1000 * x195 > -1000 && x191 - 1000 * x196 < 1000 && x191 - 1000 * x192 <= 0 && x191 - 1000 * x192 > -1000 && x189 = 4 + x193
f_509'(x198, x199, x200) -> f_509(x201 - 1000 * x202, 4 + x203, x200 + x204) :|: x201 - 1000 * x205 < 0 && x201 - 1000 * x206 >= 0 && x198 < 0 && x203 > 1 && x204 > 0 && x204 + x198 = 0 && x204 < 1000 && x200 + x204 > 0 && x203 > x200 + x204 && x201 - 1000 * x207 < 1000 && x201 > -1 && x201 - 1000 * x207 >= 0 && x201 < 0 && x201 - 1000 * x205 > -1000 && x201 - 1000 * x206 < 1000 && x201 - 1000 * x202 < 1000 && x201 - 1000 * x202 >= 0 && x199 = 4 + x203
f_509(x208, x209, x210) -> f_509'(x208, 4 + x211, x210) :|: x212 - 1000 * x213 > 0 && x211 > 1 && x208 < 0 && x214 > 0 && x214 + x208 = 0 && x214 < 1000 && x210 + x214 > 0 && x212 - 1000 * x215 < 1000 && x211 > x210 + x214 && x209 = 4 + x211
f_509'(x216, x217, x218) -> f_509(x219 - 1000 * x220, 4 + x221, x218 + x222) :|: x219 - 1000 * x223 > 0 && x221 > 1 && x216 < 0 && x222 > 0 && x222 + x216 = 0 && x222 < 1000 && x218 + x222 > 0 && x221 > x218 + x222 && x219 - 1000 * x224 < 1000 && x219 > -1 && x219 < 0 && x219 - 1000 * x223 < 1000 && x219 - 1000 * x224 > -1000 && x219 - 1000 * x224 <= 0 && x219 - 1000 * x220 <= 0 && x219 - 1000 * x220 > -1000 && x217 = 4 + x221
f_509'(x225, x226, x227) -> f_509(x228 - 1000 * x229, 4 + x230, x227 + x231) :|: x228 - 1000 * x232 > 0 && x230 > 1 && x225 < 0 && x231 > 0 && x231 + x225 = 0 && x231 < 1000 && x227 + x231 > 0 && x230 > x227 + x231 && x228 - 1000 * x233 < 1000 && x228 > -1 && x228 < 0 && x228 - 1000 * x232 < 1000 && x228 - 1000 * x233 > -1000 && x228 - 1000 * x233 <= 0 && x228 - 1000 * x229 < 1000 && x228 - 1000 * x229 >= 0 && x226 = 4 + x230
f_509'(x234, x235, x236) -> f_509(x237 - 1000 * x238, 4 + x239, x236 + x240) :|: x237 - 1000 * x241 > 0 && x239 > 1 && x234 < 0 && x240 > 0 && x240 + x234 = 0 && x240 < 1000 && x236 + x240 > 0 && x239 > x236 + x240 && x237 - 1000 * x242 < 1000 && x237 > -1 && x237 - 1000 * x241 < 1000 && x237 - 1000 * x242 >= 0 && x237 < 0 && x237 - 1000 * x238 <= 0 && x237 - 1000 * x238 > -1000 && x235 = 4 + x239
f_509'(x243, x244, x245) -> f_509(x246 - 1000 * x247, 4 + x248, x245 + x249) :|: x246 - 1000 * x250 > 0 && x248 > 1 && x243 < 0 && x249 > 0 && x249 + x243 = 0 && x249 < 1000 && x245 + x249 > 0 && x248 > x245 + x249 && x246 - 1000 * x251 < 1000 && x246 > -1 && x246 - 1000 * x250 < 1000 && x246 - 1000 * x251 >= 0 && x246 - 1000 * x247 < 1000 && x246 - 1000 * x247 >= 0 && x244 = 4 + x248

----------------------------------------

(9) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_509_3,1)
   (f_509'_3,2)

----------------------------------------

(10)
Obligation:
START: 0;

FROM: 0;
TO: 1;

FROM: 0;
TO: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := oldX1 - 4;
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
assume(oldX0 > 0 && oldX3 > 1 && oldX2 + oldX0 > 0 && oldX3 > oldX2 + oldX0 && oldX4 - 1000 * oldX5 < 1000 && oldX4 - 1000 * oldX6 > -1000 && oldX4 - 1000 * oldX7 < 0 && oldX1 = 4 + oldX3);
x0 := oldX0;
x1 := 4 + oldX3;
x2 := oldX2;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX6 < 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX8 > -1000 && oldX3 < 0 && oldX3 - 1000 * oldX7 > -1000 && oldX3 - 1000 * oldX7 <= 0 && oldX3 - 1000 * oldX6 > -1000 && oldX3 - 1000 * oldX8 <= 0 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX6 < 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX8 > -1000 && oldX3 < 0 && oldX3 - 1000 * oldX7 > -1000 && oldX3 - 1000 * oldX7 <= 0 && oldX3 - 1000 * oldX6 > -1000 && oldX3 > -1 && oldX3 - 1000 * oldX8 <= 0 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX6 < 0 && oldX3 - 1000 * oldX7 >= 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX8 < 1000 && oldX3 < 0 && oldX3 - 1000 * oldX8 > -1000 && oldX3 - 1000 * oldX8 <= 0 && oldX3 - 1000 * oldX6 > -1000 && oldX3 > -1 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX6 < 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX8 > -1000 && oldX3 > -1 && oldX3 - 1000 * oldX7 >= 0 && oldX3 < 0 && oldX3 - 1000 * oldX6 > -1000 && oldX3 - 1000 * oldX8 <= 0 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX6 < 0 && oldX3 - 1000 * oldX7 >= 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX8 < 1000 && oldX3 < 0 && oldX3 - 1000 * oldX8 > -1000 && oldX3 - 1000 * oldX8 <= 0 && oldX3 - 1000 * oldX6 > -1000 && oldX3 > -1 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX6 < 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX8 > -1000 && oldX3 > -1 && oldX3 - 1000 * oldX7 >= 0 && oldX3 < 0 && oldX3 - 1000 * oldX6 > -1000 && oldX3 - 1000 * oldX8 <= 0 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX6 < 0 && oldX3 - 1000 * oldX7 >= 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX8 < 1000 && oldX3 > -1 && oldX3 - 1000 * oldX8 >= 0 && oldX3 < 0 && oldX3 - 1000 * oldX6 > -1000 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX6 < 0 && oldX3 - 1000 * oldX7 >= 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX8 < 1000 && oldX3 > -1 && oldX3 - 1000 * oldX8 >= 0 && oldX3 < 0 && oldX3 - 1000 * oldX6 > -1000 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := oldX1 - 4;
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
assume(oldX0 > 0 && oldX3 > 1 && oldX4 - 1000 * oldX5 > 0 && oldX2 + oldX0 > 0 && oldX4 - 1000 * oldX6 < 1000 && oldX3 > oldX2 + oldX0 && oldX1 = 4 + oldX3);
x0 := oldX0;
x1 := 4 + oldX3;
x2 := oldX2;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
assume(oldX3 - 1000 * oldX6 > 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX7 < 1000 && oldX3 > -1 && oldX3 < 0 && oldX3 - 1000 * oldX6 < 1000 && oldX3 - 1000 * oldX7 > -1000 && oldX3 - 1000 * oldX7 <= 0 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
assume(oldX3 - 1000 * oldX6 > 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX7 < 1000 && oldX3 > -1 && oldX3 < 0 && oldX3 - 1000 * oldX6 < 1000 && oldX3 - 1000 * oldX7 > -1000 && oldX3 - 1000 * oldX7 <= 0 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
assume(oldX3 - 1000 * oldX6 > 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX7 < 1000 && oldX3 > -1 && oldX3 - 1000 * oldX6 < 1000 && oldX3 - 1000 * oldX7 >= 0 && oldX3 < 0 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX3 := nondet();
oldX4 := nondet();
oldX6 := nondet();
oldX7 := nondet();
assume(oldX3 - 1000 * oldX6 > 0 && oldX0 > 0 && oldX5 > 1 && oldX2 + oldX0 > 0 && oldX5 > oldX2 + oldX0 && oldX3 - 1000 * oldX7 < 1000 && oldX3 > -1 && oldX3 - 1000 * oldX6 < 1000 && oldX3 - 1000 * oldX7 >= 0 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := oldX1 - 4;
oldX4 := -(oldX0 - 0);
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX0 < 0 && oldX3 > 1 && oldX4 > 0 && oldX4 + oldX0 = 0 && oldX4 < 1000 && oldX2 + oldX4 > 0 && oldX3 > oldX2 + oldX4 && oldX5 - 1000 * oldX6 < 1000 && oldX5 - 1000 * oldX7 > -1000 && oldX5 - 1000 * oldX8 < 0 && oldX1 = 4 + oldX3);
x0 := oldX0;
x1 := 4 + oldX3;
x2 := oldX2;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
oldX9 := nondet();
assume(oldX3 - 1000 * oldX7 < 0 && oldX0 < 0 && oldX5 > 1 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX8 < 1000 && oldX3 - 1000 * oldX9 > -1000 && oldX3 < 0 && oldX3 - 1000 * oldX8 > -1000 && oldX3 - 1000 * oldX8 <= 0 && oldX3 - 1000 * oldX7 > -1000 && oldX3 - 1000 * oldX9 <= 0 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
oldX9 := nondet();
assume(oldX3 - 1000 * oldX7 < 0 && oldX0 < 0 && oldX5 > 1 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX8 < 1000 && oldX3 - 1000 * oldX9 > -1000 && oldX3 < 0 && oldX3 - 1000 * oldX8 > -1000 && oldX3 - 1000 * oldX8 <= 0 && oldX3 - 1000 * oldX7 > -1000 && oldX3 > -1 && oldX3 - 1000 * oldX9 <= 0 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
oldX9 := nondet();
assume(oldX3 - 1000 * oldX7 < 0 && oldX3 - 1000 * oldX8 >= 0 && oldX0 < 0 && oldX5 > 1 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX9 < 1000 && oldX3 < 0 && oldX3 - 1000 * oldX9 > -1000 && oldX3 - 1000 * oldX9 <= 0 && oldX3 - 1000 * oldX7 > -1000 && oldX3 > -1 && oldX3 - 1000 * oldX8 < 1000 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
oldX9 := nondet();
assume(oldX3 - 1000 * oldX7 < 0 && oldX0 < 0 && oldX5 > 1 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX8 < 1000 && oldX3 - 1000 * oldX9 > -1000 && oldX3 > -1 && oldX3 - 1000 * oldX8 >= 0 && oldX3 < 0 && oldX3 - 1000 * oldX7 > -1000 && oldX3 - 1000 * oldX9 <= 0 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
oldX9 := nondet();
assume(oldX3 - 1000 * oldX7 < 0 && oldX3 - 1000 * oldX8 >= 0 && oldX0 < 0 && oldX5 > 1 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX9 < 1000 && oldX3 < 0 && oldX3 - 1000 * oldX9 > -1000 && oldX3 - 1000 * oldX9 <= 0 && oldX3 - 1000 * oldX7 > -1000 && oldX3 > -1 && oldX3 - 1000 * oldX8 < 1000 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
oldX9 := nondet();
assume(oldX3 - 1000 * oldX7 < 0 && oldX0 < 0 && oldX5 > 1 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX8 < 1000 && oldX3 - 1000 * oldX9 > -1000 && oldX3 > -1 && oldX3 - 1000 * oldX8 >= 0 && oldX3 < 0 && oldX3 - 1000 * oldX7 > -1000 && oldX3 - 1000 * oldX9 <= 0 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
oldX9 := nondet();
assume(oldX3 - 1000 * oldX7 < 0 && oldX3 - 1000 * oldX8 >= 0 && oldX0 < 0 && oldX5 > 1 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX9 < 1000 && oldX3 > -1 && oldX3 - 1000 * oldX9 >= 0 && oldX3 < 0 && oldX3 - 1000 * oldX7 > -1000 && oldX3 - 1000 * oldX8 < 1000 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
oldX9 := nondet();
assume(oldX3 - 1000 * oldX7 < 0 && oldX3 - 1000 * oldX8 >= 0 && oldX0 < 0 && oldX5 > 1 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX9 < 1000 && oldX3 > -1 && oldX3 - 1000 * oldX9 >= 0 && oldX3 < 0 && oldX3 - 1000 * oldX7 > -1000 && oldX3 - 1000 * oldX8 < 1000 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX4 := nondet();
oldX5 := nondet();
oldX7 := nondet();
assume(oldX4 - 1000 * oldX5 > 0 && oldX3 > 1 && oldX0 < 0 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX4 - 1000 * oldX7 < 1000 && oldX3 > oldX2 + oldX6 && oldX1 = 4 + oldX3);
x0 := oldX0;
x1 := 4 + oldX3;
x2 := oldX2;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX7 > 0 && oldX5 > 1 && oldX0 < 0 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX8 < 1000 && oldX3 > -1 && oldX3 < 0 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX8 > -1000 && oldX3 - 1000 * oldX8 <= 0 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX7 > 0 && oldX5 > 1 && oldX0 < 0 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX8 < 1000 && oldX3 > -1 && oldX3 < 0 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX8 > -1000 && oldX3 - 1000 * oldX8 <= 0 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX7 > 0 && oldX5 > 1 && oldX0 < 0 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX8 < 1000 && oldX3 > -1 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX8 >= 0 && oldX3 < 0 && oldX3 - 1000 * oldX4 <= 0 && oldX3 - 1000 * oldX4 > -1000 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX5 := oldX1 - 4;
oldX6 := -(oldX0 - 0);
oldX3 := nondet();
oldX4 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 - 1000 * oldX7 > 0 && oldX5 > 1 && oldX0 < 0 && oldX6 > 0 && oldX6 + oldX0 = 0 && oldX6 < 1000 && oldX2 + oldX6 > 0 && oldX5 > oldX2 + oldX6 && oldX3 - 1000 * oldX8 < 1000 && oldX3 > -1 && oldX3 - 1000 * oldX7 < 1000 && oldX3 - 1000 * oldX8 >= 0 && oldX3 - 1000 * oldX4 < 1000 && oldX3 - 1000 * oldX4 >= 0 && oldX1 = 4 + oldX5);
x0 := oldX3 - 1000 * oldX4;
x1 := 4 + oldX5;
x2 := oldX2 + oldX6;
TO: 1;


----------------------------------------

(11) T2 (EQUIVALENT)
Termination proof succeeded
Initially, performed program simplifications using lexicographic rank functions:
 * Removed transitions 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 using the following rank functions:
    - Rank function 1:
      RF for loc. 6: 3*x1-3*x2
      RF for loc. 7: -1+3*x1-3*x2
      RF for loc. 8: -2+3*x1-3*x2
      Bound for (chained) transitions 6: 18
      Bound for (chained) transitions 7: 18
      Bound for (chained) transitions 8: 18
      Bound for (chained) transitions 9: 18
      Bound for (chained) transitions 13: 16
      Bound for (chained) transitions 14: 16
      Bound for (chained) transitions 15: 16
      Bound for (chained) transitions 16: 16
      Bound for (chained) transitions 17: 16
      Bound for (chained) transitions 18: 16
      Bound for (chained) transitions 19: 16
      Bound for (chained) transitions 20: 16
      Bound for (chained) transitions 21: 16
      Bound for (chained) transitions 22: 16
      Bound for (chained) transitions 23: 16
      Bound for (chained) transitions 24: 16
      Bound for (chained) transitions 25: 16
      Bound for (chained) transitions 26: 16
      Bound for (chained) transitions 27: 16
      Bound for (chained) transitions 28: 16
      Bound for (chained) transitions 29: 16
      Bound for (chained) transitions 30: 16
      Bound for (chained) transitions 31: 16
      Bound for (chained) transitions 32: 16
      Bound for (chained) transitions 33: 16
      Bound for (chained) transitions 34: 16
      Bound for (chained) transitions 35: 16
      Bound for (chained) transitions 36: 16
    - Rank function 2:
      RF for loc. 7: 0
      RF for loc. 8: -1
      Bound for (chained) transitions 10: 0

----------------------------------------

(12)
YES
/home/ubuntu/tool/FSE_benchmark/loop/Adding_Subtracting_Zero_2_T.c:13:13: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int i = __VERIFIER_nondet_int();
            ^
/home/ubuntu/tool/FSE_benchmark/loop/Adding_Subtracting_Zero_2_T.c:30:13: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int b = __VERIFIER_nondet_int();
            ^
2 warnings generated.

line 136:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
 
