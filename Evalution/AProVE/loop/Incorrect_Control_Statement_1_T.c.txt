timeout 900 ./AProVE.sh -m wst --bit-width 64 Incorrect_Control_Statement_1_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Incorrect_Control_Statement_1_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Control_Statement_1_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 79 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1969 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 100 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 5 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Control_Statement_1_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Control_Statement_1_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_char" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca [101 x i8], align 16
		%4 = alloca i32, align 4
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		store 0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[101 x i8] %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store 0, %4
		br %6
	6:
		%7 = load %4
		%8 = icmp slt %7 100
		br %8, %9, %18
	9:
		%10 = call i32 (...)* @__VERIFIER_nondet_char()
		%11 = trunc i32 %10 to i8
		%12 = load %4
		%13 = sext i32 %12 to i64
		%14 = getelementptr %3, 0, %13
		store %11, %14
		br %15
	15:
		%16 = load %4
		%17 = add i32 %16, 1
		store %17, %4
		br %6
	18:
		%19 = getelementptr %3, 0, 100
		store 0, %19
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%20 = getelementptr %3, 0, 0
		store %20, %5
		br %21
	21:
		%22 = load %5
		%23 = load %22
		%24 = sext i8 %23 to i32
		%25 = icmp ne %24 0
		br %25, %26, %30
	26:
		%27 = load %2
		%28 = icmp ne %27 0
		%29 = xor i1 %28, 1
		br %30
	30:
		%31 = phi [0, %21], [%29, %26]
		br %31, %32, %57
	32:
		%33 = load %5
		%34 = load %33
		%35 = sext i8 %34 to i32
		switch %35, %53 [125, %36 58, %37]
	36:
		store 1, %2
		br %56
	37:
		%38 = load %5
		%39 = getelementptr %38, 1
		%40 = load %39
		%41 = sext i8 %40 to i32
		%42 = icmp ne %41 0
		br %42, %43, %52
	43:
		%44 = load %5
		%45 = getelementptr %44, 1
		%46 = load %45
		%47 = sext i8 %46 to i32
		%48 = icmp eq %47 45
		br %48, %49, %52
	49:
		%50 = load %5
		%51 = getelementptr %50, 2
		store %51, %5
		store 1, %2
		br %56
	52:
		br %53
	53:
		%54 = load %5
		%55 = getelementptr %54, 1
		store %55, %5
		br %56
	56:
		br %21
	57:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_385(v141, v142, v143, v144, v145, v151, 1, v148, v149, v146, v150, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8) -> f_386(v141, v142, v143, v144, v145, v151, 1, v148, v149, v146, v150, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8) :|: v151 < 100 && v146 <= 98
f_386(v141, v142, v143, v144, v145, v151, 1, v148, v149, v146, v150, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8) -> f_388(v141, v142, v143, v144, v145, v151, 1, v148, v149, v146, v150, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8) :|: 0 = 0
f_388(v141, v142, v143, v144, v145, v151, 1, v148, v149, v146, v150, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8) -> f_390(v141, v142, v143, v144, v145, v151, 1, v148, v149, v146, v150, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8) :|: TRUE
f_390(v141, v142, v143, v144, v145, v151, 1, v148, v149, v146, v150, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8) -> f_392(v141, v142, v143, v144, v145, v151, 1, v159, v149, v146, v150, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8) :|: TRUE
f_392(v141, v142, v143, v144, v145, v151, 1, v159, v149, v146, v150, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8) -> f_394(v141, v142, v143, v144, v145, v151, 1, v159, v160, v146, v150, v152, v153, v154, v155, v156, 0, v158, v149, 3, 100, 7, 98, 99, 4, 101, 8) :|: TRUE
f_394(v141, v142, v143, v144, v145, v151, 1, v159, v160, v146, v150, v152, v153, v154, v155, v156, 0, v158, v149, 3, 100, 7, 98, 99, 4, 101, 8) -> f_396(v141, v142, v143, v144, v145, v151, 1, v159, v160, v146, v150, v152, v153, v154, v155, v156, 0, v158, v149, 3, 100, 7, 98, 99, 4, 101, 8) :|: 0 = 0
f_396(v141, v142, v143, v144, v145, v151, 1, v159, v160, v146, v150, v152, v153, v154, v155, v156, 0, v158, v149, 3, 100, 7, 98, 99, 4, 101, 8) -> f_398(v141, v142, v143, v144, v145, v151, 1, v159, v160, v150, v146, v152, v153, v154, v155, v156, 0, v158, v149, 3, 100, 7, 98, 99, 4, 101, 8) :|: 0 = 0 && 0 <= 2147483648 + v151 && v151 <= 2147483647
f_398(v141, v142, v143, v144, v145, v151, 1, v159, v160, v150, v146, v152, v153, v154, v155, v156, 0, v158, v149, 3, 100, 7, 98, 99, 4, 101, 8) -> f_400(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v146, v152, v153, v154, v155, v156, 0, v158, v150, v149, 3, 100, 7, 98, 99, 4, 101, 8, 2) :|: v161 = v143 + v151 && 2 <= v161
f_400(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v146, v152, v153, v154, v155, v156, 0, v158, v150, v149, 3, 100, 7, 98, 99, 4, 101, 8, 2) -> f_402(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v146, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8, 2) :|: TRUE
f_402(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v146, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8, 2) -> f_404(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v146, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8, 2) :|: TRUE
f_404(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v146, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 98, 99, 4, 101, 8, 2) -> f_406(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8, 2) :|: 0 = 0
f_406(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8, 2) -> f_408(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v164, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8, 2) :|: v164 = 1 + v151 && 2 <= v164 && v164 <= 100
f_408(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v164, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8, 2) -> f_410(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v164, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8, 2) :|: TRUE
f_410(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v164, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8, 2) -> f_413(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v164, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8, 2) :|: TRUE
f_413(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v164, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8, 2) -> f_384(v141, v142, v143, v144, v145, v151, 1, v159, v160, v161, v164, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8) :|: TRUE
f_384(v141, v142, v143, v144, v145, v146, 1, v148, v149, v150, v151, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8) -> f_385(v141, v142, v143, v144, v145, v151, 1, v148, v149, v146, v150, v152, v153, v154, v155, v156, 0, v158, 3, 100, 7, 99, 4, 101, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_385(v141:0, v142:0, v143:0, v144:0, v145:0, v151:0, 1, v148:0, v149:0, v146:0, v150:0, v152:0, v153:0, v154:0, v155:0, v156:0, 0, v158:0, 3, 100, 7, 99, 4, 101, 8) -> f_385(v141:0, v142:0, v143:0, v144:0, v145:0, 1 + v151:0, 1, v159:0, v160:0, v151:0, v143:0 + v151:0, v152:0, v153:0, v154:0, v155:0, v156:0, 0, v158:0, 3, 100, 7, 99, 4, 101, 8) :|: v151:0 > 0 && v146:0 < 99 && v151:0 < 100 && v151:0 < 2147483648 && v143:0 + v151:0 > 1
Filtered unneeded arguments:
   f_385(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25) -> f_385(x3, x6, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_385(v143:0, v151:0, v146:0) -> f_385(v143:0, 1 + v151:0, v151:0) :|: v146:0 < 99 && v151:0 > 0 && v151:0 < 100 && v143:0 + v151:0 > 1 && v151:0 < 2147483648

----------------------------------------

(8)
Obligation:
Rules:
f_385(v143:0, v151:0, v146:0) -> f_385(v143:0, 1 + v151:0, v151:0) :|: v146:0 < 99 && v151:0 > 0 && v151:0 < 100 && v143:0 + v151:0 > 1 && v151:0 < 2147483648

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_385(v143:0:0, v151:0:0, v146:0:0) -> f_385(v143:0:0, 1 + v151:0:0, v151:0:0) :|: v143:0:0 + v151:0:0 > 1 && v151:0:0 < 2147483648 && v151:0:0 < 100 && v151:0:0 > 0 && v146:0:0 < 99

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_385 ] = -1*f_385_2

The following rules are decreasing:
f_385(v143:0:0, v151:0:0, v146:0:0) -> f_385(v143:0:0, 1 + v151:0:0, v151:0:0) :|: v143:0:0 + v151:0:0 > 1 && v151:0:0 < 2147483648 && v151:0:0 < 100 && v151:0:0 > 0 && v146:0:0 < 99

The following rules are bounded:
f_385(v143:0:0, v151:0:0, v146:0:0) -> f_385(v143:0:0, 1 + v151:0:0, v151:0:0) :|: v143:0:0 + v151:0:0 > 1 && v151:0:0 < 2147483648 && v151:0:0 < 100 && v151:0:0 > 0 && v146:0:0 < 99


----------------------------------------

(12)
YES
/home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Control_Statement_1_T.c:13:21: warning: implicit declaration of function '__VERIFIER_nondet_char' is invalid in C99 [-Wimplicit-function-declaration]
        array[i] =  __VERIFIER_nondet_char();
                    ^
1 warning generated.

line 124:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
 
