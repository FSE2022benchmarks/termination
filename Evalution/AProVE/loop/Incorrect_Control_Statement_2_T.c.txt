timeout 900 ./AProVE.sh -m wst --bit-width 64 Incorrect_Control_Statement_2_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Incorrect_Control_Statement_2_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Control_Statement_2_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 81 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 9284 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 163 ms]
        (9) IntTRS
        (10) IRS2T2 [EQUIVALENT, 0 ms]
        (11) T2IntSys
        (12) T2 [EQUIVALENT, 523 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 122 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 99 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) RankingReductionPairProof [EQUIVALENT, 22 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Control_Statement_2_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Control_Statement_2_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca [10 x i32], align 16
		%4 = alloca [10 x i32], align 16
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		store 10, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[10 x i32] %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[10 x i32] %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		store 0, %6
		br %8
	8:
		%9 = load %6
		%10 = icmp slt %9 10
		br %10, %11, %23
	11:
		%12 = call i32 (...)* @__VERIFIER_nondet_int()
		%13 = load %6
		%14 = sext i32 %13 to i64
		%15 = getelementptr %3, 0, %14
		store %12, %15
		%16 = call i32 (...)* @__VERIFIER_nondet_int()
		%17 = load %6
		%18 = sext i32 %17 to i64
		%19 = getelementptr %4, 0, %18
		store %16, %19
		br %20
	20:
		%21 = load %6
		%22 = add i32 %21, 1
		store %22, %6
		br %8
	23:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %7)
		store 0, %7
		br %24
	24:
		%25 = load %7
		%26 = load %2
		%27 = icmp slt %25 %26
		br %27, %28, %59
	28:
		%29 = load %7
		%30 = sext i32 %29 to i64
		%31 = getelementptr %3, 0, %30
		%32 = load %31
		switch %32, %47 [2, %33 0, %34]
	33:
		br %52
	34:
		%35 = load %7
		%36 = sext i32 %35 to i64
		%37 = getelementptr %4, 0, %36
		%38 = load %37
		%39 = icmp ne %38 0
		br %39, %41, %40
	40:
		store 0, %1
		br %60
	41:
		%42 = load %7
		%43 = sext i32 %42 to i64
		%44 = getelementptr %4, 0, %43
		%45 = load %44
		store %45, %5
		br %46
	46:
		br %52
	47:
		%48 = load %7
		%49 = sext i32 %48 to i64
		%50 = getelementptr %4, 0, %49
		%51 = load %50
		store %51, %5
		br %52
	52:
		%53 = load %5
		%54 = icmp ne %53 0
		br %54, %55, %56
	55:
		br %59
	56:
		%57 = load %7
		%58 = add i32 %57, 1
		store %58, %7
		br %24
	59:
		store 0, %1
		br %60
	60:
		%61 = load %1
		ret %61


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_1059(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 4, 40) -> f_1061(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 4, 40) :|: 0 = 0
f_1061(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 4, 40) -> f_1063(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 8, 4, 40) :|: v4946 < 10 && v4940 <= 8 && v4944 <= 8
f_1063(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 8, 4, 40) -> f_1066(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 8, 4, 40) :|: 0 = 0
f_1066(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 8, 4, 40) -> f_1069(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 8, 4, 40) :|: TRUE
f_1069(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 8, 4, 40) -> f_1072(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 8, 4, 40) :|: 0 = 0
f_1072(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 8, 4, 40) -> f_1075(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4942, v4943, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 8, 4, 40) :|: 0 = 0 && 0 <= 2147483648 + v4946 && v4946 <= 2147483647
f_1075(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4942, v4943, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 8, 4, 40) -> f_1077(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v4943, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, 3, 39, 4, 8, 40, 5) :|: v5359 = v4928 + 4 * v4946 && 5 <= v5359
f_1077(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v4943, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, 3, 39, 4, 8, 40, 5) -> f_1079(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 8, 40, 5) :|: TRUE
f_1079(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 8, 40, 5) -> f_1080(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, 2, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 8, 40, 5) :|: v5360 = 2
f_1079(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 8, 40, 5) -> f_1081(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 2, 8, 40, 5) :|: v5360 != 2
f_1080(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, 2, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 8, 40, 5) -> f_1082(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, 2, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 8, 40, 5) :|: TRUE
f_1082(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, 2, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 8, 40, 5) -> f_1085(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, 2, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 8, 40, 5) :|: TRUE
f_1085(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, 2, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 8, 40, 5) -> f_1086(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, 2, v4940, v4944, v4945, 0, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 4, 5, 8, 40) :|: TRUE
f_1086(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5493, v5494, v5495, v5496, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 8, 40) -> f_1089(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5496, v5493, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 8, 40) :|: 0 = 0
f_1089(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5496, v5493, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 8, 40) -> f_1093(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5493, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 8, 40) :|: v5496 = 0
f_1093(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5493, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 8, 40) -> f_1097(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5493, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 8, 40) :|: 0 = 0
f_1097(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5493, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 8, 40) -> f_1101(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5493, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 8, 40) :|: TRUE
f_1101(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5493, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 8, 40) -> f_1105(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 40) :|: 0 = 0
f_1105(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 40) -> f_1110(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5746, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 40, 2) :|: v5746 = 1 + v5489 && 2 <= v5746 && v5746 <= 10
f_1110(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5746, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 40, 2) -> f_1115(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5746, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 40, 2) :|: TRUE
f_1115(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5746, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 40, 2) -> f_1119(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5746, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 40, 2) :|: TRUE
f_1119(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5746, v5494, v5495, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 5, 40, 2) -> f_1057(v5475, v5476, v5477, v5478, v5479, v5480, v5481, 10, 0, v5484, 9, v5486, v5487, v5488, v5489, 1, v5491, v5492, v5494, v5495, v5746, v5497, v5498, v5499, v5500, v5501, v5502, v5503, v5504, v5505, 3, 39, 4, 40) :|: TRUE
f_1057(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4940, 1, v4942, v4943, v4944, v4945, v4946, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 4, 40) -> f_1059(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v4940, v4942, v4943, v4944, v4945, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 4, 40) :|: 0 = 0
f_1081(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 2, 8, 40, 5) -> f_1084(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 2, 8, 40, 5) :|: v5360 != 0
f_1084(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 2, 8, 40, 5) -> f_1088(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 2, 8, 40, 5) :|: TRUE
f_1088(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 2, 8, 40, 5) -> f_1091(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 2, 8, 40, 5) :|: 0 = 0
f_1091(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4944, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 2, 8, 40, 5) -> f_1095(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 2, 8, 40, 5) :|: 0 = 0 && 0 <= 2147483648 + v4946 && v4946 <= 2147483647
f_1095(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4945, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, 3, 39, 4, 2, 8, 40, 5) -> f_1099(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v5591, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, v4945, 3, 39, 4, 2, 8, 40, 5) :|: v5591 = v4929 + 4 * v4946 && 5 <= v5591
f_1099(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v5591, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, v4945, 3, 39, 4, 2, 8, 40, 5) -> f_1103(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v5591, v5670, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, v4945, 3, 39, 4, 2, 8, 40, 5) :|: TRUE
f_1103(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v5591, v5670, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, v4945, 3, 39, 4, 2, 8, 40, 5) -> f_1108(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v5591, v5670, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, v4945, 3, 39, 4, 2, 8, 40, 5) :|: TRUE
f_1108(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v5591, v5670, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, v4945, 3, 39, 4, 2, 8, 40, 5) -> f_1113(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v5591, v5670, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, v4945, 3, 39, 4, 2, 8, 40, 5) :|: TRUE
f_1113(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v5591, v5670, v4940, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, v4942, v4943, v4945, 3, 39, 4, 2, 8, 40, 5) -> f_1086(v4926, v4927, v4928, v4929, v4930, v4931, v4932, 10, 0, v4935, 9, v4937, v4938, v4939, v4946, 1, v5359, v5360, v4940, v4946, v5591, v5670, v4947, v4948, v4949, v4950, v4951, v4952, v4953, v4954, v4955, 3, 39, 4, 5, 8, 40) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_1059(v4926:0, v4927:0, v4928:0, v4929:0, v4930:0, v4931:0, v4932:0, 10, 0, v4935:0, 9, v4937:0, v4938:0, v4939:0, v4946:0, 1, v4940:0, v4942:0, v4943:0, v4944:0, v4945:0, v4947:0, v4948:0, v4949:0, v4950:0, v4951:0, v4952:0, v4953:0, v4954:0, v4955:0, 3, 39, 4, 40) -> f_1059(v4926:0, v4927:0, v4928:0, v4929:0, v4930:0, v4931:0, v4932:0, 10, 0, v4935:0, 9, v4937:0, v4938:0, v4939:0, 1 + v4946:0, 1, v4946:0, v4928:0 + 4 * v4946:0, v5360:0, v4946:0, v4929:0 + 4 * v4946:0, v4947:0, v4948:0, v4949:0, v4950:0, v4951:0, v4952:0, v4953:0, v4954:0, v4955:0, 3, 39, 4, 40) :|: v4946:0 > 0 && v4940:0 < 9 && v4946:0 < 10 && v4944:0 < 9 && v4946:0 < 2147483648 && v4928:0 + 4 * v4946:0 > 4 && v5360:0 < 2 && v5360:0 < 0 && v4929:0 + 4 * v4946:0 > 4
f_1059(v4926:0, v4927:0, v4928:0, v4929:0, v4930:0, v4931:0, v4932:0, 10, 0, v4935:0, 9, v4937:0, v4938:0, v4939:0, v4946:0, 1, v4940:0, v4942:0, v4943:0, v4944:0, v4945:0, v4947:0, v4948:0, v4949:0, v4950:0, v4951:0, v4952:0, v4953:0, v4954:0, v4955:0, 3, 39, 4, 40) -> f_1059(v4926:0, v4927:0, v4928:0, v4929:0, v4930:0, v4931:0, v4932:0, 10, 0, v4935:0, 9, v4937:0, v4938:0, v4939:0, 1 + v4946:0, 1, v4946:0, v4928:0 + 4 * v4946:0, v5360:0, v4946:0, v4929:0 + 4 * v4946:0, v4947:0, v4948:0, v4949:0, v4950:0, v4951:0, v4952:0, v4953:0, v4954:0, v4955:0, 3, 39, 4, 40) :|: v4946:0 > 0 && v4940:0 < 9 && v4946:0 < 10 && v4944:0 < 9 && v4946:0 < 2147483648 && v4928:0 + 4 * v4946:0 > 4 && v5360:0 < 2 && v5360:0 > 0 && v4929:0 + 4 * v4946:0 > 4
f_1059(v4926:0, v4927:0, v4928:0, v4929:0, v4930:0, v4931:0, v4932:0, 10, 0, v4935:0, 9, v4937:0, v4938:0, v4939:0, v4946:0, 1, v4940:0, v4942:0, v4943:0, v4944:0, v4945:0, v4947:0, v4948:0, v4949:0, v4950:0, v4951:0, v4952:0, v4953:0, v4954:0, v4955:0, 3, 39, 4, 40) -> f_1059(v4926:0, v4927:0, v4928:0, v4929:0, v4930:0, v4931:0, v4932:0, 10, 0, v4935:0, 9, v4937:0, v4938:0, v4939:0, 1 + v4946:0, 1, v4946:0, v4928:0 + 4 * v4946:0, v5360:0, v4946:0, v4929:0 + 4 * v4946:0, v4947:0, v4948:0, v4949:0, v4950:0, v4951:0, v4952:0, v4953:0, v4954:0, v4955:0, 3, 39, 4, 40) :|: v4946:0 > 0 && v4940:0 < 9 && v4946:0 < 10 && v4944:0 < 9 && v4946:0 < 2147483648 && v4928:0 + 4 * v4946:0 > 4 && v5360:0 > 2 && v5360:0 < 0 && v4929:0 + 4 * v4946:0 > 4
f_1059(v4926:0, v4927:0, v4928:0, v4929:0, v4930:0, v4931:0, v4932:0, 10, 0, v4935:0, 9, v4937:0, v4938:0, v4939:0, v4946:0, 1, v4940:0, v4942:0, v4943:0, v4944:0, v4945:0, v4947:0, v4948:0, v4949:0, v4950:0, v4951:0, v4952:0, v4953:0, v4954:0, v4955:0, 3, 39, 4, 40) -> f_1059(v4926:0, v4927:0, v4928:0, v4929:0, v4930:0, v4931:0, v4932:0, 10, 0, v4935:0, 9, v4937:0, v4938:0, v4939:0, 1 + v4946:0, 1, v4946:0, v4928:0 + 4 * v4946:0, v5360:0, v4946:0, v4929:0 + 4 * v4946:0, v4947:0, v4948:0, v4949:0, v4950:0, v4951:0, v4952:0, v4953:0, v4954:0, v4955:0, 3, 39, 4, 40) :|: v4946:0 > 0 && v5360:0 > 2 && v4940:0 < 9 && v4946:0 < 10 && v4944:0 < 9 && v4946:0 < 2147483648 && v4928:0 + 4 * v4946:0 > 4 && v4929:0 + 4 * v4946:0 > 4
f_1059(v4926:0, v4927:0, v4928:0, v4929:0, v4930:0, v4931:0, v4932:0, 10, 0, v4935:0, 9, v4937:0, v4938:0, v4939:0, v4946:0, 1, v4940:0, v4942:0, v4943:0, v4944:0, v4945:0, v4947:0, v4948:0, v4949:0, v4950:0, v4951:0, v4952:0, v4953:0, v4954:0, v4955:0, 3, 39, 4, 40) -> f_1059(v4926:0, v4927:0, v4928:0, v4929:0, v4930:0, v4931:0, v4932:0, 10, 0, v4935:0, 9, v4937:0, v4938:0, v4939:0, 1 + v4946:0, 1, v4946:0, v4928:0 + 4 * v4946:0, 2, v4944:0, v4945:0, v4947:0, v4948:0, v4949:0, v4950:0, v4951:0, v4952:0, v4953:0, v4954:0, v4955:0, 3, 39, 4, 40) :|: v4946:0 > 0 && v4940:0 < 9 && v4946:0 < 10 && v4944:0 < 9 && v4946:0 < 2147483648 && v4928:0 + 4 * v4946:0 > 4
Filtered unneeded arguments:
   f_1059(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_1059(x3, x4, x15, x17, x20)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_1059(v4928:0, v4929:0, v4946:0, v4940:0, v4944:0) -> f_1059(v4928:0, v4929:0, 1 + v4946:0, v4946:0, v4946:0) :|: v4940:0 < 9 && v4946:0 > 0 && v4946:0 < 10 && v4944:0 < 9 && v4946:0 < 2147483648 && v4929:0 + 4 * v4946:0 > 4 && v4928:0 + 4 * v4946:0 > 4
f_1059(v4928:0, v4929:0, v4946:0, v4940:0, v4944:0) -> f_1059(v4928:0, v4929:0, 1 + v4946:0, v4946:0, v4944:0) :|: v4940:0 < 9 && v4946:0 > 0 && v4946:0 < 10 && v4944:0 < 9 && v4928:0 + 4 * v4946:0 > 4 && v4946:0 < 2147483648

----------------------------------------

(9)
Obligation:
Rules:
f_1059(v4928:0, v4929:0, v4946:0, v4940:0, v4944:0) -> f_1059(v4928:0, v4929:0, 1 + v4946:0, v4946:0, v4946:0) :|: v4940:0 < 9 && v4946:0 > 0 && v4946:0 < 10 && v4944:0 < 9 && v4946:0 < 2147483648 && v4929:0 + 4 * v4946:0 > 4 && v4928:0 + 4 * v4946:0 > 4
f_1059(x, x1, x2, x3, x4) -> f_1059(x, x1, 1 + x2, x2, x4) :|: x3 < 9 && x2 > 0 && x2 < 10 && x4 < 9 && x + 4 * x2 > 4 && x2 < 2147483648

----------------------------------------

(10) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_1059_5,1)

----------------------------------------

(11)
Obligation:
START: 0;

FROM: 0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
assume(oldX3 < 9 && oldX2 > 0 && oldX2 < 10 && oldX4 < 9 && oldX2 < 2147483648 && oldX1 + 4 * oldX2 > 4 && oldX0 + 4 * oldX2 > 4);
x0 := oldX0;
x1 := oldX1;
x2 := 1 + oldX2;
x3 := oldX2;
x4 := oldX2;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
assume(oldX3 < 9 && oldX2 > 0 && oldX2 < 10 && oldX4 < 9 && oldX0 + 4 * oldX2 > 4 && oldX2 < 2147483648);
x0 := oldX0;
x1 := oldX1;
x2 := 1 + oldX2;
x3 := oldX2;
x4 := oldX4;
TO: 1;


----------------------------------------

(12) T2 (EQUIVALENT)
Termination proof succeeded
Initially, performed program simplifications using lexicographic rank functions:
 * Removed transitions 1, 4, 5 using the following rank functions:
    - Rank function 1:
      RF for loc. 5: 1-2*x2
      RF for loc. 6: -2*x2
      Bound for (chained) transitions 4: -4294967294
    - Rank function 2:
      RF for loc. 5: -2*x2
      RF for loc. 6: -1-2*x2
      Bound for (chained) transitions 5: -19
    - Rank function 3:
      RF for loc. 5: 1
      RF for loc. 6: 0
      Bound for (chained) transitions 1: 1

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_921(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 4, 40) -> f_925(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 4, 40) :|: 0 = 0
f_925(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 4, 40) -> f_929(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 8, 4, 40) :|: v3427 < 10 && v3423 <= 8
f_929(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 8, 4, 40) -> f_934(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 8, 4, 40) :|: 0 = 0
f_934(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 8, 4, 40) -> f_939(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 8, 4, 40) :|: TRUE
f_939(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 8, 4, 40) -> f_945(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 8, 4, 40) :|: 0 = 0
f_945(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 8, 4, 40) -> f_951(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3425, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 8, 4, 40) :|: 0 = 0 && 0 <= 2147483648 + v3427 && v3427 <= 2147483647
f_951(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3425, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 8, 4, 40) -> f_955(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) :|: v3772 = v3411 + 4 * v3427 && 5 <= v3772
f_955(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) -> f_958(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, v3773, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, 2, v3435, v3425, 3, 39, 4, 8, 40, 5) :|: TRUE
f_958(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, v3773, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, 2, v3435, v3425, 3, 39, 4, 8, 40, 5) -> f_960(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) :|: v3773 = 2
f_960(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) -> f_964(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) :|: TRUE
f_964(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) -> f_969(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) :|: TRUE
f_969(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) -> f_974(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) :|: 0 = 0
f_974(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) -> f_979(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) :|: 0 = 0
f_979(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) -> f_984(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) :|: TRUE
f_984(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3423, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 8, 40, 5) -> f_989(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 40, 5) :|: 0 = 0
f_989(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 40, 5) -> f_993(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v4018, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 40, 5) :|: v4018 = 1 + v3427 && 2 <= v4018 && v4018 <= 10
f_993(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v4018, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 40, 5) -> f_999(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v4018, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 40, 5) :|: TRUE
f_999(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v4018, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 40, 5) -> f_1006(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v4018, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 40, 5) :|: TRUE
f_1006(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v4018, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, v3425, 3, 39, 4, 40, 5) -> f_917(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3772, 2, v4018, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 4, 40) :|: TRUE
f_917(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3423, 1, v3425, 2, v3427, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 4, 40) -> f_921(v3409, v3410, v3411, v3412, v3413, v3414, v3415, 10, 0, v3418, 9, v3420, v3421, v3422, v3427, 1, v3423, v3425, 2, v3428, v3429, v3430, v3431, v3432, v3433, v3434, v3435, 3, 39, 4, 40) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_921(v3409:0, v3410:0, v3411:0, v3412:0, v3413:0, v3414:0, v3415:0, 10, 0, v3418:0, 9, v3420:0, v3421:0, v3422:0, v3427:0, 1, v3423:0, v3425:0, 2, v3428:0, v3429:0, v3430:0, v3431:0, v3432:0, v3433:0, v3434:0, v3435:0, 3, 39, 4, 40) -> f_921(v3409:0, v3410:0, v3411:0, v3412:0, v3413:0, v3414:0, v3415:0, 10, 0, v3418:0, 9, v3420:0, v3421:0, v3422:0, 1 + v3427:0, 1, v3427:0, v3411:0 + 4 * v3427:0, 2, v3428:0, v3429:0, v3430:0, v3431:0, v3432:0, v3433:0, v3434:0, v3435:0, 3, 39, 4, 40) :|: v3427:0 > 0 && v3423:0 < 9 && v3427:0 < 10 && v3427:0 < 2147483648 && v3411:0 + 4 * v3427:0 > 4
Filtered unneeded arguments:
   f_921(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_921(x3, x15, x17)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_921(v3411:0, v3427:0, v3423:0) -> f_921(v3411:0, 1 + v3427:0, v3427:0) :|: v3423:0 < 9 && v3427:0 > 0 && v3427:0 < 10 && v3411:0 + 4 * v3427:0 > 4 && v3427:0 < 2147483648

----------------------------------------

(16)
Obligation:
Rules:
f_921(v3411:0, v3427:0, v3423:0) -> f_921(v3411:0, 1 + v3427:0, v3427:0) :|: v3423:0 < 9 && v3427:0 > 0 && v3427:0 < 10 && v3411:0 + 4 * v3427:0 > 4 && v3427:0 < 2147483648

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_921(v3411:0:0, v3427:0:0, v3423:0:0) -> f_921(v3411:0:0, 1 + v3427:0:0, v3427:0:0) :|: v3411:0:0 + 4 * v3427:0:0 > 4 && v3427:0:0 < 2147483648 && v3427:0:0 < 10 && v3427:0:0 > 0 && v3423:0:0 < 9

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_921 ] = -1*f_921_2

The following rules are decreasing:
f_921(v3411:0:0, v3427:0:0, v3423:0:0) -> f_921(v3411:0:0, 1 + v3427:0:0, v3427:0:0) :|: v3411:0:0 + 4 * v3427:0:0 > 4 && v3427:0:0 < 2147483648 && v3427:0:0 < 10 && v3427:0:0 > 0 && v3423:0:0 < 9

The following rules are bounded:
f_921(v3411:0:0, v3427:0:0, v3423:0:0) -> f_921(v3411:0:0, 1 + v3427:0:0, v3427:0:0) :|: v3411:0:0 + 4 * v3427:0:0 > 4 && v3427:0:0 < 2147483648 && v3427:0:0 < 10 && v3427:0:0 > 0 && v3423:0:0 < 9


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_420(v157, v158, v159, v160, v161, v162, v163, v170, 1, v166, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 9, 4, 40) -> f_421(v157, v158, v159, v160, v161, v162, v163, v170, 1, v166, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 8, 9, 4, 40) :|: v170 < 10 && v164 <= 8
f_421(v157, v158, v159, v160, v161, v162, v163, v170, 1, v166, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 8, 9, 4, 40) -> f_423(v157, v158, v159, v160, v161, v162, v163, v170, 1, v166, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 8, 9, 4, 40) :|: 0 = 0
f_423(v157, v158, v159, v160, v161, v162, v163, v170, 1, v166, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 8, 9, 4, 40) -> f_425(v157, v158, v159, v160, v161, v162, v163, v170, 1, v166, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 8, 9, 4, 40) :|: TRUE
f_425(v157, v158, v159, v160, v161, v162, v163, v170, 1, v166, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 8, 9, 4, 40) -> f_427(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v166, 3, 39, 8, 9, 4, 40) :|: TRUE
f_427(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v166, 3, 39, 8, 9, 4, 40) -> f_429(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v166, 3, 39, 8, 9, 4, 40) :|: 0 = 0
f_429(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v166, 3, 39, 8, 9, 4, 40) -> f_431(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v167, v168, v164, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v166, 3, 39, 8, 9, 4, 40) :|: 0 = 0 && 0 <= 2147483648 + v170 && v170 <= 2147483647
f_431(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v167, v168, v164, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v166, 3, 39, 8, 9, 4, 40) -> f_433(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v168, v164, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v167, v166, 3, 39, 4, 8, 9, 40, 5) :|: v183 = v159 + 4 * v170 && 5 <= v183
f_433(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v168, v164, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v167, v166, 3, 39, 4, 8, 9, 40, 5) -> f_435(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v168, v164, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 8, 9, 40, 5) :|: TRUE
f_435(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v168, v164, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 8, 9, 40, 5) -> f_437(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v164, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v168, 3, 39, 4, 8, 9, 40, 5) :|: TRUE
f_437(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v164, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v168, 3, 39, 4, 8, 9, 40, 5) -> f_439(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v164, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v168, 3, 39, 4, 8, 9, 40, 5) :|: 0 = 0
f_439(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v164, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v168, 3, 39, 4, 8, 9, 40, 5) -> f_441(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v169, v164, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v168, 3, 39, 4, 8, 9, 40, 5) :|: 0 = 0 && 0 <= 2147483648 + v170 && v170 <= 2147483647
f_441(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v169, v164, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v168, 3, 39, 4, 8, 9, 40, 5) -> f_443(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v164, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v169, v168, 3, 39, 4, 8, 9, 40, 5) :|: v186 = v160 + 4 * v170 && 5 <= v186
f_443(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v164, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, v169, v168, 3, 39, 4, 8, 9, 40, 5) -> f_445(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v164, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 8, 9, 40, 5) :|: TRUE
f_445(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v164, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 8, 9, 40, 5) -> f_447(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v164, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 8, 9, 40, 5) :|: TRUE
f_447(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v164, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 8, 9, 40, 5) -> f_449(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 9, 40, 5) :|: 0 = 0
f_449(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 9, 40, 5) -> f_452(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v188, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 9, 40, 5, 2) :|: v188 = 1 + v170 && 2 <= v188 && v188 <= 10
f_452(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v188, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 9, 40, 5, 2) -> f_456(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v188, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 9, 40, 5, 2) :|: TRUE
f_456(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v188, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 9, 40, 5, 2) -> f_460(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v188, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 9, 40, 5, 2) :|: TRUE
f_460(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v188, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 4, 9, 40, 5, 2) -> f_419(v157, v158, v159, v160, v161, v162, v163, v170, 1, v182, v183, v185, v186, v188, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 9, 4, 40) :|: TRUE
f_419(v157, v158, v159, v160, v161, v162, v163, v164, 1, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 9, 4, 40) -> f_420(v157, v158, v159, v160, v161, v162, v163, v170, 1, v166, v164, v167, v168, v169, v171, v172, v173, v174, v175, v176, v177, 0, 10, v180, v181, 3, 39, 9, 4, 40) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_420(v157:0, v158:0, v159:0, v160:0, v161:0, v162:0, v163:0, v170:0, 1, v166:0, v164:0, v167:0, v168:0, v169:0, v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, 0, 10, v180:0, v181:0, 3, 39, 9, 4, 40) -> f_420(v157:0, v158:0, v159:0, v160:0, v161:0, v162:0, v163:0, 1 + v170:0, 1, v182:0, v170:0, v159:0 + 4 * v170:0, v185:0, v160:0 + 4 * v170:0, v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, 0, 10, v180:0, v181:0, 3, 39, 9, 4, 40) :|: v170:0 > 0 && v164:0 < 9 && v170:0 < 10 && v170:0 < 2147483648 && v159:0 + 4 * v170:0 > 4 && v160:0 + 4 * v170:0 > 4
Filtered unneeded arguments:
   f_420(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30) -> f_420(x3, x4, x8, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_420(v159:0, v160:0, v170:0, v164:0) -> f_420(v159:0, v160:0, 1 + v170:0, v170:0) :|: v164:0 < 9 && v170:0 > 0 && v170:0 < 10 && v170:0 < 2147483648 && v160:0 + 4 * v170:0 > 4 && v159:0 + 4 * v170:0 > 4

----------------------------------------

(23)
Obligation:
Rules:
f_420(v159:0, v160:0, v170:0, v164:0) -> f_420(v159:0, v160:0, 1 + v170:0, v170:0) :|: v164:0 < 9 && v170:0 > 0 && v170:0 < 10 && v170:0 < 2147483648 && v160:0 + 4 * v170:0 > 4 && v159:0 + 4 * v170:0 > 4

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_420(v159:0:0, v160:0:0, v170:0:0, v164:0:0) -> f_420(v159:0:0, v160:0:0, 1 + v170:0:0, v170:0:0) :|: v160:0:0 + 4 * v170:0:0 > 4 && v159:0:0 + 4 * v170:0:0 > 4 && v170:0:0 < 2147483648 && v170:0:0 < 10 && v170:0:0 > 0 && v164:0:0 < 9

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_420 ] = -1*f_420_3

The following rules are decreasing:
f_420(v159:0:0, v160:0:0, v170:0:0, v164:0:0) -> f_420(v159:0:0, v160:0:0, 1 + v170:0:0, v170:0:0) :|: v160:0:0 + 4 * v170:0:0 > 4 && v159:0:0 + 4 * v170:0:0 > 4 && v170:0:0 < 2147483648 && v170:0:0 < 10 && v170:0:0 > 0 && v164:0:0 < 9

The following rules are bounded:
f_420(v159:0:0, v160:0:0, v170:0:0, v164:0:0) -> f_420(v159:0:0, v160:0:0, 1 + v170:0:0, v170:0:0) :|: v160:0:0 + 4 * v170:0:0 > 4 && v159:0:0 + 4 * v170:0:0 > 4 && v170:0:0 < 2147483648 && v170:0:0 < 10 && v170:0:0 > 0 && v164:0:0 < 9


----------------------------------------

(27)
YES
/home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Control_Statement_2_T.c:15:25: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
        slots_used[i] = __VERIFIER_nondet_int();
                        ^
1 warning generated.

line 133:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
 
