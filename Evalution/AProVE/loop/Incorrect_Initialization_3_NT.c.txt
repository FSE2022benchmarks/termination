timeout 900 ./AProVE.sh -m wst --bit-width 64 Incorrect_Initialization_3_NT.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Incorrect_Initialization_3_NT.c
MAYBE
proof of /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Initialization_3_NT.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 86 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2530 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 157 ms]
        (9) IntTRS
            (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (11) IntTRS
            (12) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
            (13) IntTRS
            (14) IntTRSPeriodicNontermProof [COMPLETE, 0 ms]
            (15) NO
        (16) SCC2IRS [SOUND, 0 ms]
        (17) IntTRS
            (18) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (19) IntTRS
            (20) IntTRSNonPeriodicNontermProof [COMPLETE, 2 ms]
            (21) NO
    (22) LLVM Symbolic Execution SCC
        (23) SCC2IRS [SOUND, 66 ms]
        (24) IntTRS
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IntTRS
        (27) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (28) YES
(29) SymbolicExecutionGraphToLassoProof [COMPLETE, 0 ms]
(30) AND
    (31) LLVM Symbolic Execution Lasso
        (32) Lasso2IRS [SOUND, 217 ms]
        (33) IntTRS
        (34) IRS2T2 [EQUIVALENT, 0 ms]
        (35) T2IntSys
        (36) T2 [EQUIVALENT, 462 ms]
        (37) YES
    (38) LLVM Symbolic Execution Lasso
        (39) Lasso2IRS [EQUIVALENT, 144 ms]
        (40) IntTRS
        (41) IRS2T2 [EQUIVALENT, 0 ms]
        (42) T2IntSys
        (43) T2 [EQUIVALENT, 446 ms]
        (44) YES
(45) SEGraph to IRS [SOUND, 243 ms]
(46) IntTRS
    (47) IRSNoOverapproximation [EQUIVALENT, 0 ms]
    (48) MAYBE
    (49) IRS2T2 [EQUIVALENT, 0 ms]
    (50) T2IntSys


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Initialization_3_NT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Initialization_3_NT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "strchr" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		br %6
	6:
		%7 = load %4
		%8 = load %7
		%9 = sext i8 %8 to i32
		%10 = icmp ne %9 0
		br %10, %11, %23
	11:
		%12 = load %4
		%13 = load %12
		%14 = sext i8 %13 to i32
		%15 = load %5
		%16 = icmp eq %14 %15
		br %16, %17, %19
	17:
		%18 = load %4
		store %18, %3
		br %24
	19:
		br %20
	20:
		%21 = load %4
		%22 = getelementptr %21, 1
		store %22, %4
		br %6
	23:
		store null, %3
		br %24
	24:
		%25 = load %3
		ret %25

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 45
	0:
		%1 = alloca i32, align 4
		%2 = alloca [100 x i8], align 16
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*[100 x i8] %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		br %6
	6:
		%7 = load %3
		%8 = icmp slt %7 99
		br %8, %9, %16
	9:
		%10 = load %3
		%11 = sext i32 %10 to i64
		%12 = getelementptr %2, 0, %11
		store 10, %12
		br %13
	13:
		%14 = load %3
		%15 = add i32 %14, 1
		store %15, %3
		br %6
	16:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%17 = getelementptr %2, 0, 0
		store %17, %4
		%18 = getelementptr %2, 0, 99
		store 0, %18
		br %19
	19:
		%20 = load %4
		%21 = load %20
		%22 = icmp ne %21 0
		br %22, %23, %33
	23:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%24 = load %4
		%25 = call *i8 @strchr(*i8 %24, i32 10)
		store %25, %5
		%26 = load %5
		%27 = icmp eq %26 null
		br %27, %28, %31
	28:
		%29 = load %4
		%30 = getelementptr %29, 99
		store %30, %5
		br %31
	31:
		%32 = load %5
		store %32, %4
		br %19
	33:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 39 rulesP rules:
f_435(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_436(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_436(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_437(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_437(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_438(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_438(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_439(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_439(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_440(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_440(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_441(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_441(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_442(v111, 10, v166, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v166 && v167 = 7 + v166 && 8 <= v167
f_442(v111, 10, v166, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_443(v111, 10, v166, v168, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v168 && v169 = 7 + v168 && 8 <= v169
f_443(v111, 10, v166, v168, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_444(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v170 && v171 = 3 + v170 && 4 <= v171
f_444(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_445(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_445(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_446(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_446(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_447(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_447(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_448(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_448(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_449(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_449(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_450(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_450(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_451(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_451(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_452(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_452(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_453(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_453(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_454(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_454(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_455(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_455(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_456(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_456(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_457(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_457(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_458(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_458(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_459(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_459(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_460(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_460(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_461(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_461(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_462(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_462(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_463(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_463(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_464(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_464(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_465(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_465(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_466(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_466(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_467(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_467(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_468(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_468(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_469(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_469(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_470(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_470(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_471(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_471(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_472(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_472(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_434(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_434(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_435(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_435(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) -> f_435(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: TRUE
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_435(v110:0, v111:0, v112:0, v113:0, v114:0, cons_99, cons_0, cons_98, v117:0, v120:0, cons_10, cons_1, v119:0, v121:0, v122:0, v123:0, cons_3, cons_7, cons_4, cons_100, cons_8) -> f_435(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: TRUE && cons_99 = 99 && cons_0 = 0 && cons_98 = 98 && cons_10 = 10 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_4 = 4 && cons_100 = 100 && cons_8 = 8

----------------------------------------

(9)
Obligation:
Rules:
f_435(v110:0, v111:0, v112:0, v113:0, v114:0, cons_99, cons_0, cons_98, v117:0, v120:0, cons_10, cons_1, v119:0, v121:0, v122:0, v123:0, cons_3, cons_7, cons_4, cons_100, cons_8) -> f_435(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: TRUE && cons_99 = 99 && cons_0 = 0 && cons_98 = 98 && cons_10 = 10 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_4 = 4 && cons_100 = 100 && cons_8 = 8

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_435(v110:0:0, v111:0:0, v112:0:0, v113:0:0, v114:0:0, cons_99, cons_0, cons_98, v117:0:0, v120:0:0, cons_10, cons_1, v119:0:0, v121:0:0, v122:0:0, v123:0:0, cons_3, cons_7, cons_4, cons_100, cons_8) -> f_435(v110:0:0, v111:0:0, v112:0:0, v113:0:0, v114:0:0, 99, 0, 98, v117:0:0, v120:0:0, 10, 1, v119:0:0, v121:0:0, v122:0:0, v123:0:0, 3, 7, 4, 100, 8) :|: TRUE && cons_99 = 99 && cons_0 = 0 && cons_98 = 98 && cons_10 = 10 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_4 = 4 && cons_100 = 100 && cons_8 = 8

----------------------------------------

(12) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_435(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_435(x6, x7, x8, x11, x12, x17, x18, x19, x20, x21)

----------------------------------------

(13)
Obligation:
Rules:
f_435(cons_99, cons_0, cons_98, cons_10, cons_1, cons_3, cons_7, cons_4, cons_100, cons_8) -> f_435(99, 0, 98, 10, 1, 3, 7, 4, 100, 8) :|: TRUE && cons_99 = 99 && cons_0 = 0 && cons_98 = 98 && cons_10 = 10 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_4 = 4 && cons_100 = 100 && cons_8 = 8

----------------------------------------

(14) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, cons_99, cons_0, cons_98, cons_10, cons_1, cons_3, cons_7, cons_4, cons_100, cons_8) -> f(1, 99, 0, 98, 10, 1, 3, 7, 4, 100, 8) :|: pc = 1 && (TRUE && cons_99 = 99 && cons_0 = 0 && cons_98 = 98 && cons_10 = 10 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_4 = 4 && cons_100 = 100 && cons_8 = 8)
Witness term starting non-terminating reduction: f(1, 99, 0, 98, 10, 1, 3, 7, 4, 100, 8)
----------------------------------------

(15)
NO

----------------------------------------

(16) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 39 rulesP rules:
f_435(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_436(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_436(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_437(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_437(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_438(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_438(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_439(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_439(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_440(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_440(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_441(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_441(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_442(v111, 10, v166, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v166 && v167 = 7 + v166 && 8 <= v167
f_442(v111, 10, v166, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_443(v111, 10, v166, v168, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v168 && v169 = 7 + v168 && 8 <= v169
f_443(v111, 10, v166, v168, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_444(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v170 && v171 = 3 + v170 && 4 <= v171
f_444(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_445(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_445(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_446(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_446(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_447(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_447(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_448(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_448(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_449(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_449(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_450(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_450(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_451(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_451(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_452(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_452(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_453(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_453(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_454(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_454(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_455(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_455(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_456(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_456(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_457(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_457(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_458(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_458(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_459(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_459(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_460(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_460(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_461(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_461(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_462(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_462(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_463(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_463(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_464(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_464(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_465(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_465(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_466(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_466(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_467(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_467(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_468(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_468(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_469(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_469(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_470(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_470(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_471(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_471(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_472(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_472(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_434(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 1 <= v110 && 1 <= v111 && 1 <= v112 && 1 <= v113 && 1 <= v114 && 99 <= v117 && 4 <= v119 && 100 <= v120 && 4 <= v121 && 8 <= v122 && 8 <= v123 && v110 <= v119 && v111 <= v120 && v112 <= v121 && v113 <= v122 && v114 <= v123
f_434(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_435(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_435(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) -> f_435(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: v166:0 > 0 && v168:0 > 0 && v170:0 > 0 && v111:0 > 0 && v110:0 > 0 && v112:0 > 0 && v113:0 > 0 && v114:0 > 0 && v117:0 > 98 && v119:0 > 3 && v120:0 > 99 && v121:0 > 3 && v122:0 > 7 && v123:0 > 7 && v119:0 >= v110:0 && v120:0 >= v111:0 && v121:0 >= v112:0 && v123:0 >= v114:0 && v122:0 >= v113:0
Filtered unneeded arguments:
   f_435(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_435(x1, x2, x3, x4, x5, x9, x10, x13, x14, x15, x16)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_435(v110:0, v111:0, v112:0, v113:0, v114:0, v117:0, v120:0, v119:0, v121:0, v122:0, v123:0) -> f_435(v110:0, v111:0, v112:0, v113:0, v114:0, v117:0, v120:0, v119:0, v121:0, v122:0, v123:0) :|: v110:0 > 0 && v111:0 > 0 && v112:0 > 0 && v113:0 > 0 && v114:0 > 0 && v117:0 > 98 && v119:0 > 3 && v120:0 > 99 && v121:0 > 3 && v122:0 > 7 && v123:0 > 7 && v119:0 >= v110:0 && v120:0 >= v111:0 && v121:0 >= v112:0 && v122:0 >= v113:0 && v123:0 >= v114:0

----------------------------------------

(17)
Obligation:
Rules:
f_435(v110:0, v111:0, v112:0, v113:0, v114:0, v117:0, v120:0, v119:0, v121:0, v122:0, v123:0) -> f_435(v110:0, v111:0, v112:0, v113:0, v114:0, v117:0, v120:0, v119:0, v121:0, v122:0, v123:0) :|: v110:0 > 0 && v111:0 > 0 && v112:0 > 0 && v113:0 > 0 && v114:0 > 0 && v117:0 > 98 && v119:0 > 3 && v120:0 > 99 && v121:0 > 3 && v122:0 > 7 && v123:0 > 7 && v119:0 >= v110:0 && v120:0 >= v111:0 && v121:0 >= v112:0 && v122:0 >= v113:0 && v123:0 >= v114:0

----------------------------------------

(18) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(19)
Obligation:
Rules:
f_435(v110:0:0, v111:0:0, v112:0:0, v113:0:0, v114:0:0, v117:0:0, v120:0:0, v119:0:0, v121:0:0, v122:0:0, v123:0:0) -> f_435(v110:0:0, v111:0:0, v112:0:0, v113:0:0, v114:0:0, v117:0:0, v120:0:0, v119:0:0, v121:0:0, v122:0:0, v123:0:0) :|: v122:0:0 >= v113:0:0 && v123:0:0 >= v114:0:0 && v121:0:0 >= v112:0:0 && v120:0:0 >= v111:0:0 && v119:0:0 >= v110:0:0 && v123:0:0 > 7 && v122:0:0 > 7 && v121:0:0 > 3 && v120:0:0 > 99 && v119:0:0 > 3 && v117:0:0 > 98 && v114:0:0 > 0 && v113:0:0 > 0 && v112:0:0 > 0 && v111:0:0 > 0 && v110:0:0 > 0

----------------------------------------

(20) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v110:0:0, v111:0:0, v112:0:0, v113:0:0, v114:0:0, v117:0:0, v120:0:0, v119:0:0, v121:0:0, v122:0:0, v123:0:0) -> f(1, v110:0:0, v111:0:0, v112:0:0, v113:0:0, v114:0:0, v117:0:0, v120:0:0, v119:0:0, v121:0:0, v122:0:0, v123:0:0) :|: pc = 1 && (v122:0:0 >= v113:0:0 && v123:0:0 >= v114:0:0 && v121:0:0 >= v112:0:0 && v120:0:0 >= v111:0:0 && v119:0:0 >= v110:0:0 && v123:0:0 > 7 && v122:0:0 > 7 && v121:0:0 > 3 && v120:0:0 > 99 && v119:0:0 > 3 && v117:0:0 > 98 && v114:0:0 > 0 && v113:0:0 > 0 && v112:0:0 > 0 && v111:0:0 > 0 && v110:0:0 > 0)
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((run1_6 * 1)) and run2_7 = ((run1_7 * 1)) and run2_8 = ((run1_8 * 1)) and run2_9 = ((run1_9 * 1)) and run2_10 = ((run1_10 * 1)) and run2_11 = ((run1_11 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((((((((((((((((run1_10 * 1)) >= ((run1_4 * 1)) and ((run1_11 * 1)) >= ((run1_5 * 1))) and ((run1_9 * 1)) >= ((run1_3 * 1))) and ((run1_7 * 1)) >= ((run1_2 * 1))) and ((run1_8 * 1)) >= ((run1_1 * 1))) and ((run1_11 * 1)) > ((1 * 7))) and ((run1_10 * 1)) > ((1 * 7))) and ((run1_9 * 1)) > ((1 * 3))) and ((run1_7 * 1)) > ((1 * 99))) and ((run1_8 * 1)) > ((1 * 3))) and ((run1_6 * 1)) > ((1 * 98))) and ((run1_5 * 1)) > 0) and ((run1_4 * 1)) > 0) and ((run1_3 * 1)) > 0) and ((run1_2 * 1)) > 0) and ((run1_1 * 1)) > 0))) and !(((run2_0 * 1)) = ((1 * 1)) and (((((((((((((((((run2_10 * 1)) >= ((run2_4 * 1)) and ((run2_11 * 1)) >= ((run2_5 * 1))) and ((run2_9 * 1)) >= ((run2_3 * 1))) and ((run2_7 * 1)) >= ((run2_2 * 1))) and ((run2_8 * 1)) >= ((run2_1 * 1))) and ((run2_11 * 1)) > ((1 * 7))) and ((run2_10 * 1)) > ((1 * 7))) and ((run2_9 * 1)) > ((1 * 3))) and ((run2_7 * 1)) > ((1 * 99))) and ((run2_8 * 1)) > ((1 * 3))) and ((run2_6 * 1)) > ((1 * 98))) and ((run2_5 * 1)) > 0) and ((run2_4 * 1)) > 0) and ((run2_3 * 1)) > 0) and ((run2_2 * 1)) > 0) and ((run2_1 * 1)) > 0)))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((run1_6 * 1)) and run2_7 = ((run1_7 * 1)) and run2_8 = ((run1_8 * 1)) and run2_9 = ((run1_9 * 1)) and run2_10 = ((run1_10 * 1)) and run2_11 = ((run1_11 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((((((((((((((((run1_10 * 1)) >= ((run1_4 * 1)) and ((run1_11 * 1)) >= ((run1_5 * 1))) and ((run1_9 * 1)) >= ((run1_3 * 1))) and ((run1_7 * 1)) >= ((run1_2 * 1))) and ((run1_8 * 1)) >= ((run1_1 * 1))) and ((run1_11 * 1)) > ((1 * 7))) and ((run1_10 * 1)) > ((1 * 7))) and ((run1_9 * 1)) > ((1 * 3))) and ((run1_7 * 1)) > ((1 * 99))) and ((run1_8 * 1)) > ((1 * 3))) and ((run1_6 * 1)) > ((1 * 98))) and ((run1_5 * 1)) > 0) and ((run1_4 * 1)) > 0) and ((run1_3 * 1)) > 0) and ((run1_2 * 1)) > 0) and ((run1_1 * 1)) > 0)))

----------------------------------------

(21)
NO

----------------------------------------

(22)
Obligation:
SCC
----------------------------------------

(23) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_375(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_376(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: v118 < 99 && v115 <= 97
f_376(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_378(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: 0 = 0
f_378(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_380(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: TRUE
f_380(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_382(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: 0 = 0
f_382(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_384(v110, v111, v112, v113, v114, v118, 1, v117, v115, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: 0 = 0 && 0 <= 2147483648 + v118 && v118 <= 2147483647
f_384(v110, v111, v112, v113, v114, v118, 1, v117, v115, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_386(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) :|: v126 = v111 + v118 && 2 <= v126
f_386(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) -> f_388(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) :|: TRUE
f_388(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) -> f_390(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) :|: TRUE
f_390(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) -> f_392(v110, v111, v112, v113, v114, v118, 1, v126, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: 0 = 0
f_392(v110, v111, v112, v113, v114, v118, 1, v126, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_394(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: v128 = 1 + v118 && 2 <= v128 && v128 <= 99
f_394(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_396(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: TRUE
f_396(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_398(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: TRUE
f_398(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_374(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_374(v110, v111, v112, v113, v114, v115, 1, v117, v118, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_375(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_375(v110:0, v111:0, v112:0, v113:0, v114:0, v118:0, 1, v115:0, v117:0, v119:0, v120:0, v121:0, v122:0, v123:0, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_375(v110:0, v111:0, v112:0, v113:0, v114:0, 1 + v118:0, 1, v118:0, v111:0 + v118:0, v119:0, v120:0, v121:0, v122:0, v123:0, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: v118:0 > 0 && v115:0 < 98 && v118:0 < 99 && v118:0 < 2147483648 && v111:0 + v118:0 > 1
Filtered unneeded arguments:
   f_375(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_375(x2, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_375(v111:0, v118:0, v115:0) -> f_375(v111:0, 1 + v118:0, v118:0) :|: v115:0 < 98 && v118:0 > 0 && v118:0 < 99 && v111:0 + v118:0 > 1 && v118:0 < 2147483648

----------------------------------------

(24)
Obligation:
Rules:
f_375(v111:0, v118:0, v115:0) -> f_375(v111:0, 1 + v118:0, v118:0) :|: v115:0 < 98 && v118:0 > 0 && v118:0 < 99 && v111:0 + v118:0 > 1 && v118:0 < 2147483648

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f_375(v111:0:0, v118:0:0, v115:0:0) -> f_375(v111:0:0, 1 + v118:0:0, v118:0:0) :|: v111:0:0 + v118:0:0 > 1 && v118:0:0 < 2147483648 && v118:0:0 < 99 && v118:0:0 > 0 && v115:0:0 < 98

----------------------------------------

(27) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_375 ] = -1*f_375_2

The following rules are decreasing:
f_375(v111:0:0, v118:0:0, v115:0:0) -> f_375(v111:0:0, 1 + v118:0:0, v118:0:0) :|: v111:0:0 + v118:0:0 > 1 && v118:0:0 < 2147483648 && v118:0:0 < 99 && v118:0:0 > 0 && v115:0:0 < 98

The following rules are bounded:
f_375(v111:0:0, v118:0:0, v115:0:0) -> f_375(v111:0:0, 1 + v118:0:0, v118:0:0) :|: v111:0:0 + v118:0:0 > 1 && v118:0:0 < 2147483648 && v118:0:0 < 99 && v118:0:0 > 0 && v115:0:0 < 98


----------------------------------------

(28)
YES

----------------------------------------

(29) SymbolicExecutionGraphToLassoProof (COMPLETE)
Converted SEGraph to 2 dependent lassos.
----------------------------------------

(30)
Complex Obligation (AND)

----------------------------------------

(31)
Obligation:
Lasso
----------------------------------------

(32) Lasso2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 115 rulesP rules:
f_435(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_436(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_436(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_437(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_437(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_438(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_438(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_439(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_439(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_440(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_440(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_441(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_441(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_442(v111, 10, v166, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v166 && v167 = 7 + v166 && 8 <= v167
f_442(v111, 10, v166, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_443(v111, 10, v166, v168, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v168 && v169 = 7 + v168 && 8 <= v169
f_443(v111, 10, v166, v168, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_444(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v170 && v171 = 3 + v170 && 4 <= v171
f_444(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_445(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_445(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_446(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_446(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_447(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_447(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_448(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_448(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_449(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_449(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_450(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_450(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_451(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_451(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_452(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_452(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_453(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_453(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_454(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_454(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_455(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_455(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_456(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_456(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_457(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_457(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_458(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_458(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_459(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_459(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_460(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_460(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_461(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_461(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_462(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_462(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_463(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_463(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_464(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_464(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_465(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_465(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_466(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_466(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_467(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_467(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_468(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_468(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_469(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_469(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_470(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_470(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_471(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_471(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_472(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_472(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_434(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_434(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_435(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_238 -> f_239(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_239(v1, v2, 3, 1, 4) -> f_240(v1, v3, v2, v4, 3, 99, 1, 4, 100) :|: 1 <= v3 && v4 = 99 + v3 && 100 <= v4
f_240(v1, v3, v2, v4, 3, 99, 1, 4, 100) -> f_241(v1, v3, v5, v2, v4, v6, 3, 99, 1, 4, 100) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_241(v1, v3, v5, v2, v4, v6, 3, 99, 1, 4, 100) -> f_242(v1, v3, v5, v7, v2, v4, v6, v8, 3, 99, 7, 1, 4, 100, 8) :|: 1 <= v7 && v8 = 7 + v7 && 8 <= v8
f_242(v1, v3, v5, v7, v2, v4, v6, v8, 3, 99, 7, 1, 4, 100, 8) -> f_243(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) :|: 1 <= v9 && v10 = 7 + v9 && 8 <= v10
f_243(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) -> f_244(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_244(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_245(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_245(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_246(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_246(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_247(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_247(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_248(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_248(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_249(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) :|: 0 = 0
f_249(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) -> f_250(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_250(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_251(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_251(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_252(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_252(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_253(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 2147483648 && 0 <= 2147483647
f_253(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_254(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_254(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_255(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_255(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_256(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_256(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_257(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_257(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_258(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_258(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_259(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_259(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_260(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_260(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_273(v1, v3, v5, v7, v9, 0, 1, v3, 1, v2, v4, v6, v8, v10, 0, 10, 3, 99, 7, 2, 4, 100, 8) :|: TRUE
f_273(v12, v13, v14, v15, v16, v17, 1, v19, v20, v21, v22, v23, v24, v25, 0, 10, 3, 99, 7, 2, 4, 100, 8) -> f_286(v12, v13, v14, v15, v16, v17, 1, v19, v20, v21, v22, v23, v24, v25, 0, 10, 3, 99, 7, 2, 4, 100, 8) :|: TRUE
f_286(v31, v32, v33, v34, v35, v36, 1, v38, v39, v40, v41, v42, v43, v44, 0, 10, 3, 99, 7, 2, 4, 100, 8) -> f_299(v31, v32, v33, v34, v35, v36, 1, v38, v39, v40, v41, v42, v43, v44, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_299(v50, v51, v52, v53, v54, v55, 1, v57, v58, v59, v60, v61, v62, v63, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_324(v50, v51, v52, v53, v54, v55, 1, v57, v58, v59, v60, v61, v62, v63, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_324(v70, v71, v72, v73, v74, v75, 1, v77, v78, v79, v80, v81, v82, v83, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_349(v70, v71, v72, v73, v74, v75, 1, v77, v78, v79, v80, v81, v82, v83, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_349(v90, v91, v92, v93, v94, v95, 1, v97, v98, v99, v100, v101, v102, v103, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_374(v90, v91, v92, v93, v94, v95, 1, v97, v98, v99, v100, v101, v102, v103, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_374(v110, v111, v112, v113, v114, v115, 1, v117, v118, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_375(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: 0 = 0
f_375(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_377(v110, v111, v112, v113, v114, 99, 1, 98, v117, v119, v120, v121, v122, v123, 0, 10, 3, 7, 4, 100, 8) :|: 99 <= v118 && 99 <= v117 && v115 = 98 && v118 = 99 && 0 = 0
f_377(v110, v111, v112, v113, v114, 99, 1, 98, v117, v119, v120, v121, v122, v123, 0, 10, 3, 7, 4, 100, 8) -> f_379(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: 0 = 0
f_379(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_381(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: TRUE
f_381(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_383(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: TRUE
f_383(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_385(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: 0 = 0
f_385(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_387(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: TRUE
f_387(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_389(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: v120 = 99 + v111
f_389(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_391(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: TRUE
f_391(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_393(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: TRUE
f_393(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_395(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: 0 = 0
f_395(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_397(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, v119, v121, v122, v123, 3, 7, 1, 4, 100, 8) :|: 0 = 0
f_397(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, v119, v121, v122, v123, 3, 7, 1, 4, 100, 8) -> f_399(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_399(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_400(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_400(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_401(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_401(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_402(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_402(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_403(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_403(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_404(v111, 10, v146, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v146 && v147 = 7 + v146 && 8 <= v147
f_404(v111, 10, v146, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_405(v111, 10, v146, v148, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v148 && v149 = 7 + v148 && 8 <= v149
f_405(v111, 10, v146, v148, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_406(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v150 && v151 = 3 + v150 && 4 <= v151
f_406(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_407(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_407(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_408(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_408(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_409(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_409(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_410(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_410(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_411(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_411(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_412(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_412(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_413(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_413(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_414(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_414(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_415(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_415(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_416(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_416(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_417(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_417(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_418(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_418(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_419(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_419(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_420(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_420(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_421(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_421(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_422(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_422(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_423(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_423(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_424(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_424(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_425(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_425(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_426(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_426(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_427(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_427(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_428(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_428(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_429(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_429(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_430(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_430(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_431(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_431(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_432(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_432(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_433(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_433(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_434(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_238 -> f_435(v1:0, v3:0, v5:0, v7:0, v9:0, 99, 0, 98, v3:0, v4:0, 10, 1, v2:0, v6:0, v8:0, v10:0, 3, 7, 4, 100, 8) :|: FALSE
f_435(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) -> f_435(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: TRUE
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_238 -> f_435(v1:0, v3:0, v5:0, v7:0, v9:0, 99, 0, 98, v3:0, v4:0, 10, 1, v2:0, v6:0, v8:0, v10:0, 3, 7, 4, 100, 8) :|: FALSE
f_435(v110:0, v111:0, v112:0, v113:0, v114:0, cons_99, cons_0, cons_98, v117:0, v120:0, cons_10, cons_1, v119:0, v121:0, v122:0, v123:0, cons_3, cons_7, cons_4, cons_100, cons_8) -> f_435(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: TRUE && cons_99 = 99 && cons_0 = 0 && cons_98 = 98 && cons_10 = 10 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_4 = 4 && cons_100 = 100 && cons_8 = 8

----------------------------------------

(33)
Obligation:
Rules:
f_238 -> f_435(v1:0, v3:0, v5:0, v7:0, v9:0, 99, 0, 98, v3:0, v4:0, 10, 1, v2:0, v6:0, v8:0, v10:0, 3, 7, 4, 100, 8) :|: FALSE
f_435(v110:0, v111:0, v112:0, v113:0, v114:0, cons_99, cons_0, cons_98, v117:0, v120:0, cons_10, cons_1, v119:0, v121:0, v122:0, v123:0, cons_3, cons_7, cons_4, cons_100, cons_8) -> f_435(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: TRUE && cons_99 = 99 && cons_0 = 0 && cons_98 = 98 && cons_10 = 10 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_4 = 4 && cons_100 = 100 && cons_8 = 8
Start term: f_238

----------------------------------------

(34) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_238_21,1)
   (f_435_21,2)

----------------------------------------

(35)
Obligation:
START: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := x14;
oldX15 := x15;
oldX16 := x16;
oldX17 := x17;
oldX18 := x18;
oldX19 := x19;
oldX20 := x20;
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
oldX26 := nondet();
oldX27 := nondet();
oldX28 := nondet();
oldX29 := nondet();
oldX30 := nondet();
assume(0 = 1);
x0 := oldX21;
x1 := oldX22;
x2 := oldX23;
x3 := oldX24;
x4 := oldX25;
x5 := 99;
x6 := 0;
x7 := 98;
x8 := oldX22;
x9 := oldX26;
x10 := 10;
x11 := 1;
x12 := oldX27;
x13 := oldX28;
x14 := oldX29;
x15 := oldX30;
x16 := 3;
x17 := 7;
x18 := 4;
x19 := 100;
x20 := 8;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := x14;
oldX15 := x15;
oldX16 := x16;
oldX17 := x17;
oldX18 := x18;
oldX19 := x19;
oldX20 := x20;
assume(0 = 0 && oldX5 = 99 && oldX6 = 0 && oldX7 = 98 && oldX10 = 10 && oldX11 = 1 && oldX16 = 3 && oldX17 = 7 && oldX18 = 4 && oldX19 = 100 && oldX20 = 8);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX3;
x4 := oldX4;
x5 := 99;
x6 := 0;
x7 := 98;
x8 := oldX8;
x9 := oldX9;
x10 := 10;
x11 := 1;
x12 := oldX12;
x13 := oldX13;
x14 := oldX14;
x15 := oldX15;
x16 := 3;
x17 := 7;
x18 := 4;
x19 := 100;
x20 := 8;
TO: 2;


----------------------------------------

(36) T2 (EQUIVALENT)
Termination proof succeeded

----------------------------------------

(37)
YES

----------------------------------------

(38)
Obligation:
Lasso
----------------------------------------

(39) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 42 rulesP rules:
f_375(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_376(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: v118 < 99 && v115 <= 97
f_376(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_378(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: 0 = 0
f_378(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_380(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: TRUE
f_380(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_382(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: 0 = 0
f_382(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_384(v110, v111, v112, v113, v114, v118, 1, v117, v115, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: 0 = 0 && 0 <= 2147483648 + v118 && v118 <= 2147483647
f_384(v110, v111, v112, v113, v114, v118, 1, v117, v115, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_386(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) :|: v126 = v111 + v118 && 2 <= v126
f_386(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) -> f_388(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) :|: TRUE
f_388(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) -> f_390(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) :|: TRUE
f_390(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) -> f_392(v110, v111, v112, v113, v114, v118, 1, v126, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: 0 = 0
f_392(v110, v111, v112, v113, v114, v118, 1, v126, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_394(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: v128 = 1 + v118 && 2 <= v128 && v128 <= 99
f_394(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_396(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: TRUE
f_396(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_398(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: TRUE
f_398(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_374(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_374(v110, v111, v112, v113, v114, v115, 1, v117, v118, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_375(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: 0 = 0
f_238 -> f_239(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_239(v1, v2, 3, 1, 4) -> f_240(v1, v3, v2, v4, 3, 99, 1, 4, 100) :|: 1 <= v3 && v4 = 99 + v3 && 100 <= v4
f_240(v1, v3, v2, v4, 3, 99, 1, 4, 100) -> f_241(v1, v3, v5, v2, v4, v6, 3, 99, 1, 4, 100) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_241(v1, v3, v5, v2, v4, v6, 3, 99, 1, 4, 100) -> f_242(v1, v3, v5, v7, v2, v4, v6, v8, 3, 99, 7, 1, 4, 100, 8) :|: 1 <= v7 && v8 = 7 + v7 && 8 <= v8
f_242(v1, v3, v5, v7, v2, v4, v6, v8, 3, 99, 7, 1, 4, 100, 8) -> f_243(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) :|: 1 <= v9 && v10 = 7 + v9 && 8 <= v10
f_243(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) -> f_244(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_244(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_245(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_245(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_246(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_246(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_247(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_247(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_248(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_248(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_249(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) :|: 0 = 0
f_249(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) -> f_250(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_250(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_251(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_251(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_252(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_252(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_253(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 2147483648 && 0 <= 2147483647
f_253(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_254(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_254(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_255(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_255(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_256(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_256(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_257(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_257(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_258(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_258(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_259(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_259(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_260(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_260(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_273(v1, v3, v5, v7, v9, 0, 1, v3, 1, v2, v4, v6, v8, v10, 0, 10, 3, 99, 7, 2, 4, 100, 8) :|: TRUE
f_273(v12, v13, v14, v15, v16, v17, 1, v19, v20, v21, v22, v23, v24, v25, 0, 10, 3, 99, 7, 2, 4, 100, 8) -> f_286(v12, v13, v14, v15, v16, v17, 1, v19, v20, v21, v22, v23, v24, v25, 0, 10, 3, 99, 7, 2, 4, 100, 8) :|: TRUE
f_286(v31, v32, v33, v34, v35, v36, 1, v38, v39, v40, v41, v42, v43, v44, 0, 10, 3, 99, 7, 2, 4, 100, 8) -> f_299(v31, v32, v33, v34, v35, v36, 1, v38, v39, v40, v41, v42, v43, v44, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_299(v50, v51, v52, v53, v54, v55, 1, v57, v58, v59, v60, v61, v62, v63, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_324(v50, v51, v52, v53, v54, v55, 1, v57, v58, v59, v60, v61, v62, v63, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_324(v70, v71, v72, v73, v74, v75, 1, v77, v78, v79, v80, v81, v82, v83, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_349(v70, v71, v72, v73, v74, v75, 1, v77, v78, v79, v80, v81, v82, v83, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_349(v90, v91, v92, v93, v94, v95, 1, v97, v98, v99, v100, v101, v102, v103, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_374(v90, v91, v92, v93, v94, v95, 1, v97, v98, v99, v100, v101, v102, v103, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_238 -> f_375(v1:0, v3:0, v5:0, v7:0, v9:0, 1, 1, 0, v3:0, 3 + v1:0, 99 + v3:0, 3 + v5:0, 7 + v7:0, 7 + v9:0, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0
f_375(v110:0, v111:0, v112:0, v113:0, v114:0, v118:0, 1, v115:0, v117:0, v119:0, v120:0, v121:0, v122:0, v123:0, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_375(v110:0, v111:0, v112:0, v113:0, v114:0, 1 + v118:0, 1, v118:0, v111:0 + v118:0, v119:0, v120:0, v121:0, v122:0, v123:0, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: v118:0 > 0 && v115:0 < 98 && v118:0 < 99 && v118:0 < 2147483648 && v111:0 + v118:0 > 1
Filtered unneeded arguments:
   f_375(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_375(x2, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_238 -> f_375(v3:0, 1, 0) :|: v3:0 > 0
f_375(v111:0, v118:0, v115:0) -> f_375(v111:0, 1 + v118:0, v118:0) :|: v115:0 < 98 && v118:0 > 0 && v118:0 < 99 && v111:0 + v118:0 > 1 && v118:0 < 2147483648

----------------------------------------

(40)
Obligation:
Rules:
f_238 -> f_375(v3:0, 1, 0) :|: v3:0 > 0
f_375(v111:0, v118:0, v115:0) -> f_375(v111:0, 1 + v118:0, v118:0) :|: v115:0 < 98 && v118:0 > 0 && v118:0 < 99 && v111:0 + v118:0 > 1 && v118:0 < 2147483648
Start term: f_238

----------------------------------------

(41) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_238_3,1)
   (f_375_3,2)

----------------------------------------

(42)
Obligation:
START: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
assume(oldX3 > 0);
x0 := oldX3;
x1 := 1;
x2 := 0;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
assume(oldX2 < 98 && oldX1 > 0 && oldX1 < 99 && oldX0 + oldX1 > 1 && oldX1 < 2147483648);
x0 := oldX0;
x1 := 1 + oldX1;
x2 := oldX1;
TO: 2;


----------------------------------------

(43) T2 (EQUIVALENT)
Termination proof succeeded
Initially, performed program simplifications using lexicographic rank functions:
 * Removed transitions 1, 3, 4 using the following rank functions:
    - Rank function 1:
      RF for loc. 5: 1-2*x1
      RF for loc. 6: -2*x1
      Bound for (chained) transitions 3: -196
      Bound for (chained) transitions 4: -4294967294
    - Rank function 2:
      RF for loc. 5: 0
      RF for loc. 6: -1
      Bound for (chained) transitions 1: 0

----------------------------------------

(44)
YES

----------------------------------------

(45) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 128 rulesP rules:
f_238 -> f_239(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_239(v1, v2, 3, 1, 4) -> f_240(v1, v3, v2, v4, 3, 99, 1, 4, 100) :|: 1 <= v3 && v4 = 99 + v3 && 100 <= v4
f_240(v1, v3, v2, v4, 3, 99, 1, 4, 100) -> f_241(v1, v3, v5, v2, v4, v6, 3, 99, 1, 4, 100) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_241(v1, v3, v5, v2, v4, v6, 3, 99, 1, 4, 100) -> f_242(v1, v3, v5, v7, v2, v4, v6, v8, 3, 99, 7, 1, 4, 100, 8) :|: 1 <= v7 && v8 = 7 + v7 && 8 <= v8
f_242(v1, v3, v5, v7, v2, v4, v6, v8, 3, 99, 7, 1, 4, 100, 8) -> f_243(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) :|: 1 <= v9 && v10 = 7 + v9 && 8 <= v10
f_243(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) -> f_244(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_244(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_245(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_245(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_246(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_246(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_247(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_247(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_248(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) :|: TRUE
f_248(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 99, 7, 1, 4, 100, 8) -> f_249(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) :|: 0 = 0
f_249(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, v10, 3, 99, 7, 1, 4, 100, 8) -> f_250(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_250(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_251(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_251(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_252(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_252(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_253(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 2147483648 && 0 <= 2147483647
f_253(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_254(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_254(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 3, 99, 7, 4, 100, 8) -> f_255(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_255(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_256(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_256(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_257(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_257(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_258(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: 0 = 0
f_258(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_259(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_259(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_260(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) :|: TRUE
f_260(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, v10, 10, 3, 99, 7, 4, 100, 8) -> f_273(v1, v3, v5, v7, v9, 0, 1, v3, 1, v2, v4, v6, v8, v10, 0, 10, 3, 99, 7, 2, 4, 100, 8) :|: TRUE
f_273(v12, v13, v14, v15, v16, v17, 1, v19, v20, v21, v22, v23, v24, v25, 0, 10, 3, 99, 7, 2, 4, 100, 8) -> f_286(v12, v13, v14, v15, v16, v17, 1, v19, v20, v21, v22, v23, v24, v25, 0, 10, 3, 99, 7, 2, 4, 100, 8) :|: TRUE
f_286(v31, v32, v33, v34, v35, v36, 1, v38, v39, v40, v41, v42, v43, v44, 0, 10, 3, 99, 7, 2, 4, 100, 8) -> f_299(v31, v32, v33, v34, v35, v36, 1, v38, v39, v40, v41, v42, v43, v44, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_299(v50, v51, v52, v53, v54, v55, 1, v57, v58, v59, v60, v61, v62, v63, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_324(v50, v51, v52, v53, v54, v55, 1, v57, v58, v59, v60, v61, v62, v63, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_324(v70, v71, v72, v73, v74, v75, 1, v77, v78, v79, v80, v81, v82, v83, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_349(v70, v71, v72, v73, v74, v75, 1, v77, v78, v79, v80, v81, v82, v83, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_349(v90, v91, v92, v93, v94, v95, 1, v97, v98, v99, v100, v101, v102, v103, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_374(v90, v91, v92, v93, v94, v95, 1, v97, v98, v99, v100, v101, v102, v103, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_374(v110, v111, v112, v113, v114, v115, 1, v117, v118, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_375(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: 0 = 0
f_375(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_376(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: v118 < 99 && v115 <= 97
f_375(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_377(v110, v111, v112, v113, v114, 99, 1, 98, v117, v119, v120, v121, v122, v123, 0, 10, 3, 7, 4, 100, 8) :|: 99 <= v118 && 99 <= v117 && v115 = 98 && v118 = 99 && 0 = 0
f_376(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_378(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: 0 = 0
f_377(v110, v111, v112, v113, v114, 99, 1, 98, v117, v119, v120, v121, v122, v123, 0, 10, 3, 7, 4, 100, 8) -> f_379(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: 0 = 0
f_378(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_380(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: TRUE
f_379(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_381(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: TRUE
f_380(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_382(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: 0 = 0
f_381(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_383(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: TRUE
f_382(v110, v111, v112, v113, v114, v118, 1, v115, v117, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_384(v110, v111, v112, v113, v114, v118, 1, v117, v115, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) :|: 0 = 0 && 0 <= 2147483648 + v118 && v118 <= 2147483647
f_383(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_385(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: 0 = 0
f_384(v110, v111, v112, v113, v114, v118, 1, v117, v115, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 97, 98, 4, 100, 8) -> f_386(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) :|: v126 = v111 + v118 && 2 <= v126
f_385(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_387(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: TRUE
f_386(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) -> f_388(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) :|: TRUE
f_387(v110, v111, v112, v113, v114, 99, 0, 98, v117, v119, v120, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_389(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: v120 = 99 + v111
f_388(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) -> f_390(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) :|: TRUE
f_389(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_391(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: TRUE
f_390(v110, v111, v112, v113, v114, v118, 1, v126, v115, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 97, 98, 4, 100, 8, 2) -> f_392(v110, v111, v112, v113, v114, v118, 1, v126, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: 0 = 0
f_391(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_393(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: TRUE
f_392(v110, v111, v112, v113, v114, v118, 1, v126, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_394(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: v128 = 1 + v118 && 2 <= v128 && v128 <= 99
f_393(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_395(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) :|: 0 = 0
f_394(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_396(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: TRUE
f_395(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, v119, v121, v122, v123, 10, 3, 7, 1, 4, 100, 8) -> f_397(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, v119, v121, v122, v123, 3, 7, 1, 4, 100, 8) :|: 0 = 0
f_396(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_398(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) :|: TRUE
f_397(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, v119, v121, v122, v123, 3, 7, 1, 4, 100, 8) -> f_399(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_398(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, v117, 3, 99, 7, 98, 4, 100, 8, 2) -> f_374(v110, v111, v112, v113, v114, v118, 1, v126, v128, v119, v120, v121, v122, v123, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: TRUE
f_399(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_400(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_400(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_401(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_401(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_402(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_402(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_403(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_403(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_404(v111, 10, v146, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v146 && v147 = 7 + v146 && 8 <= v147
f_404(v111, 10, v146, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_405(v111, 10, v146, v148, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v148 && v149 = 7 + v148 && 8 <= v149
f_405(v111, 10, v146, v148, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_406(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v150 && v151 = 3 + v150 && 4 <= v151
f_406(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_407(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_407(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_408(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_408(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_409(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_409(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_410(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_410(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_411(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_411(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_412(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_412(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_413(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_413(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_414(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_414(v111, 10, v146, v148, v150, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_415(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_415(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_416(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_416(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_417(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_417(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_418(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_418(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_419(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_419(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_420(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_420(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_421(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_421(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_422(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_422(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_423(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_423(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_424(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_424(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_425(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_425(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_426(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_426(v111, 10, v146, v148, v150, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v147, v149, v151, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_427(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_427(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_428(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_428(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_429(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_429(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_430(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_430(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_431(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_431(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_432(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_432(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_433(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_433(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_434(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_434(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_435(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_435(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_436(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_436(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_437(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_437(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_438(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_438(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_439(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_439(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_440(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_440(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_441(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_441(v111, 10, v110, v119, v120, v112, v121, v113, v122, v114, v123, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_442(v111, 10, v166, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v166 && v167 = 7 + v166 && 8 <= v167
f_442(v111, 10, v166, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_443(v111, 10, v166, v168, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v168 && v169 = 7 + v168 && 8 <= v169
f_443(v111, 10, v166, v168, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_444(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 1 <= v170 && v171 = 3 + v170 && 4 <= v171
f_444(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_445(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_445(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_446(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_446(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_447(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_447(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_448(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_448(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_449(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: TRUE
f_449(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_450(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_450(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_451(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0
f_451(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_452(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_452(v111, 10, v166, v168, v170, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 1, 3, 7, 4, 100, 8) -> f_453(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_453(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_454(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_454(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_455(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_455(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_456(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_456(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_457(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0 && 0 <= 138 && 0 <= 117
f_457(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_458(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_458(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_459(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_459(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_460(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_460(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_461(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_461(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_462(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_462(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_463(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: TRUE
f_463(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_464(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) :|: 0 = 0
f_464(v111, 10, v166, v168, v170, 1, v110, v119, v120, v112, v121, v113, v122, v114, v123, v167, v169, v171, 0, 99, v117, 98, 3, 7, 4, 100, 8) -> f_465(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_465(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_466(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_466(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_467(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_467(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_468(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_468(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_469(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_469(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_470(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: 0 = 0
f_470(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_471(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_471(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_472(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
f_472(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) -> f_434(v110, v111, v112, v113, v114, 99, 0, 98, v117, v120, 10, 1, v119, v121, v122, v123, 3, 7, 4, 100, 8) :|: TRUE
Combined rules. Obtained 4 rulesP rules:
f_238 -> f_375(v1:0, v3:0, v5:0, v7:0, v9:0, 1, 1, 0, v3:0, 3 + v1:0, 99 + v3:0, 3 + v5:0, 7 + v7:0, 7 + v9:0, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0
f_472(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) -> f_472(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: TRUE
f_375(v110:0, v111:0, v112:0, v113:0, v114:0, v118:0, 1, v115:0, v117:0, v119:0, v120:0, v121:0, v122:0, v123:0, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_375(v110:0, v111:0, v112:0, v113:0, v114:0, 1 + v118:0, 1, v118:0, v111:0 + v118:0, v119:0, v120:0, v121:0, v122:0, v123:0, 0, 10, 3, 99, 7, 98, 4, 100, 8) :|: v118:0 > 0 && v115:0 < 98 && v118:0 < 99 && v118:0 < 2147483648 && v111:0 + v118:0 > 1
f_375(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 1, 98, v117:0, v119:0, 99 + v111:0, v121:0, v122:0, v123:0, 0, 10, 3, 99, 7, 98, 4, 100, 8) -> f_472(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, 99 + v111:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: v117:0 > 98 && v146:0 > 0 && v148:0 > 0 && v150:0 > 0 && v166:0 > 0 && v168:0 > 0 && v170:0 > 0
Filtered unneeded arguments:
   f_375(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_375(x2, x6, x8, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 4 rules.P rules:
f_238 -> f_375(v3:0, 1, 0, v3:0, 99 + v3:0) :|: v3:0 > 0
f_472(v110:0, v111:0, v112:0, v113:0, v114:0, cons_99, cons_0, cons_98, v117:0, v120:0, cons_10, cons_1, v119:0, v121:0, v122:0, v123:0, cons_3, cons_7, cons_4, cons_100, cons_8) -> f_472(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: TRUE && cons_99 = 99 && cons_0 = 0 && cons_98 = 98 && cons_10 = 10 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_4 = 4 && cons_100 = 100 && cons_8 = 8
f_375(v111:0, v118:0, v115:0, v117:0, v120:0) -> f_375(v111:0, 1 + v118:0, v118:0, v111:0 + v118:0, v120:0) :|: v115:0 < 98 && v118:0 > 0 && v118:0 < 99 && v111:0 + v118:0 > 1 && v118:0 < 2147483648
f_375(v111:0, cons_99, cons_98, v117:0, sum~cons_99~v111:0) -> f_472(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, 99 + v111:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: v117:0 > 98 && cons_99 = 99 && cons_98 = 98 && sum~cons_99~v111:0 = 99 + v111:0

----------------------------------------

(46)
Obligation:
Rules:
f_238 -> f_375(v3:0, 1, 0, v3:0, 99 + v3:0) :|: v3:0 > 0
f_472(v110:0, v111:0, v112:0, v113:0, v114:0, cons_99, cons_0, cons_98, v117:0, v120:0, cons_10, cons_1, v119:0, v121:0, v122:0, v123:0, cons_3, cons_7, cons_4, cons_100, cons_8) -> f_472(v110:0, v111:0, v112:0, v113:0, v114:0, 99, 0, 98, v117:0, v120:0, 10, 1, v119:0, v121:0, v122:0, v123:0, 3, 7, 4, 100, 8) :|: TRUE && cons_99 = 99 && cons_0 = 0 && cons_98 = 98 && cons_10 = 10 && cons_1 = 1 && cons_3 = 3 && cons_7 = 7 && cons_4 = 4 && cons_100 = 100 && cons_8 = 8
f_375(x, x1, x2, x3, x4) -> f_375(x, 1 + x1, x1, x + x1, x4) :|: x2 < 98 && x1 > 0 && x1 < 99 && x + x1 > 1 && x1 < 2147483648
f_375(x5, x6, x7, x8, x9) -> f_472(x10, x5, x11, x12, x13, 99, 0, 98, x8, 99 + x5, 10, 1, x14, x15, x16, x17, 3, 7, 4, 100, 8) :|: x8 > 98 && x6 = 99 && x7 = 98 && x9 = 99 + x5
Start term: f_238

----------------------------------------

(47) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination is aborted since the IRSProblem over-approximates
----------------------------------------

(48)
MAYBE

----------------------------------------

(49) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_238_21,1)
   (f_375_21,2)
   (f_472_21,3)

----------------------------------------

(50)
Obligation:
START: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := x14;
oldX15 := x15;
oldX16 := x16;
oldX17 := x17;
oldX18 := x18;
oldX19 := x19;
oldX20 := x20;
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
oldX26 := nondet();
oldX27 := nondet();
oldX28 := nondet();
oldX29 := nondet();
oldX30 := nondet();
oldX31 := nondet();
oldX32 := nondet();
oldX33 := nondet();
oldX34 := nondet();
oldX35 := nondet();
oldX36 := nondet();
oldX37 := nondet();
assume(oldX21 > 0);
x0 := oldX21;
x1 := 1;
x2 := 0;
x3 := oldX21;
x4 := 99 + oldX21;
x5 := oldX22;
x6 := oldX23;
x7 := oldX24;
x8 := oldX25;
x9 := oldX26;
x10 := oldX27;
x11 := oldX28;
x12 := oldX29;
x13 := oldX30;
x14 := oldX31;
x15 := oldX32;
x16 := oldX33;
x17 := oldX34;
x18 := oldX35;
x19 := oldX36;
x20 := oldX37;
TO: 2;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := x14;
oldX15 := x15;
oldX16 := x16;
oldX17 := x17;
oldX18 := x18;
oldX19 := x19;
oldX20 := x20;
assume(0 = 0 && oldX5 = 99 && oldX6 = 0 && oldX7 = 98 && oldX10 = 10 && oldX11 = 1 && oldX16 = 3 && oldX17 = 7 && oldX18 = 4 && oldX19 = 100 && oldX20 = 8);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX3;
x4 := oldX4;
x5 := 99;
x6 := 0;
x7 := 98;
x8 := oldX8;
x9 := oldX9;
x10 := 10;
x11 := 1;
x12 := oldX12;
x13 := oldX13;
x14 := oldX14;
x15 := oldX15;
x16 := 3;
x17 := 7;
x18 := 4;
x19 := 100;
x20 := 8;
TO: 3;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := x14;
oldX15 := x15;
oldX16 := x16;
oldX17 := x17;
oldX18 := x18;
oldX19 := x19;
oldX20 := x20;
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
oldX26 := nondet();
oldX27 := nondet();
oldX28 := nondet();
oldX29 := nondet();
oldX30 := nondet();
oldX31 := nondet();
oldX32 := nondet();
oldX33 := nondet();
oldX34 := nondet();
oldX35 := nondet();
oldX36 := nondet();
assume(oldX2 < 98 && oldX1 > 0 && oldX1 < 99 && oldX0 + oldX1 > 1 && oldX1 < 2147483648);
x0 := oldX0;
x1 := 1 + oldX1;
x2 := oldX1;
x3 := oldX0 + oldX1;
x4 := oldX4;
x5 := oldX21;
x6 := oldX22;
x7 := oldX23;
x8 := oldX24;
x9 := oldX25;
x10 := oldX26;
x11 := oldX27;
x12 := oldX28;
x13 := oldX29;
x14 := oldX30;
x15 := oldX31;
x16 := oldX32;
x17 := oldX33;
x18 := oldX34;
x19 := oldX35;
x20 := oldX36;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := x14;
oldX15 := x15;
oldX16 := x16;
oldX17 := x17;
oldX18 := x18;
oldX19 := x19;
oldX20 := x20;
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
oldX26 := nondet();
oldX27 := nondet();
oldX28 := nondet();
assume(oldX3 > 98 && oldX1 = 99 && oldX2 = 98 && oldX4 = 99 + oldX0);
x0 := oldX21;
x1 := oldX0;
x2 := oldX22;
x3 := oldX23;
x4 := oldX24;
x5 := 99;
x6 := 0;
x7 := 98;
x8 := oldX3;
x9 := 99 + oldX0;
x10 := 10;
x11 := 1;
x12 := oldX25;
x13 := oldX26;
x14 := oldX27;
x15 := oldX28;
x16 := 3;
x17 := 7;
x18 := 4;
x19 := 100;
x20 := 8;
TO: 3;

/home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Initialization_3_NT.c:7:7: warning: incompatible redeclaration of library function 'strchr' [-Wincompatible-library-redeclaration]
char* strchr(char* str, int c) {
      ^
/home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Initialization_3_NT.c:7:7: note: 'strchr' is a builtin with type 'char *(const char *, int)'
1 warning generated.

line 128:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
Running T2 finished with non-zero exit code 1 when running command: 
 
