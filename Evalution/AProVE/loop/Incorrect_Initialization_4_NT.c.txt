timeout 900 ./AProVE.sh -m wst --bit-width 64 Incorrect_Initialization_4_NT.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Incorrect_Initialization_4_NT.c
MAYBE
proof of /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Initialization_4_NT.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 86 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1683 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 16 ms]
        (9) IntTRS
            (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (11) IntTRS
            (12) IntTRSPeriodicNontermProof [COMPLETE, 8 ms]
            (13) NO
        (14) SCC2IRS [SOUND, 3 ms]
        (15) IntTRS
            (16) IRS2T2 [EQUIVALENT, 0 ms]
            (17) T2IntSys
            (18) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (19) IntTRS
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 79 ms]
        (22) IntTRS
            (23) IntTRSPeriodicNontermProof [COMPLETE, 0 ms]
            (24) NO
        (25) SCC2IRS [SOUND, 0 ms]
        (26) IntTRS
            (27) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (28) IntTRS
            (29) IntTRSPeriodicNontermProof [COMPLETE, 10 ms]
            (30) NO
    (31) LLVM Symbolic Execution SCC
        (32) SCC2IRS [SOUND, 55 ms]
        (33) IntTRS
            (34) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (35) IntTRS
            (36) IntTRSPeriodicNontermProof [COMPLETE, 9 ms]
            (37) NO
        (38) SCC2IRS [SOUND, 16 ms]
        (39) IntTRS
            (40) IRS2T2 [EQUIVALENT, 0 ms]
            (41) T2IntSys
(42) SymbolicExecutionGraphToLassoProof [COMPLETE, 0 ms]
(43) AND
    (44) LLVM Symbolic Execution Lasso
    (45) LLVM Symbolic Execution Lasso
        (46) Lasso2IRS [SOUND, 130 ms]
        (47) IntTRS
        (48) IRS2T2 [EQUIVALENT, 0 ms]
        (49) T2IntSys
        (50) T2 Underapproximation [COMPLETE, 464 ms]
        (51) T2IntSys
        (52) T2 Underapproximation [COMPLETE, 494 ms]
        (53) T2IntSys
    (54) LLVM Symbolic Execution Lasso


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Initialization_4_NT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Initialization_4_NT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%7 = call i32 (...)* @__VERIFIER_nondet_int()
		store %7, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%8 = call i32 (...)* @__VERIFIER_nondet_int()
		store %8, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%9 = call i32 (...)* @__VERIFIER_nondet_int()
		store %9, %4
		%10 = load %2
		%11 = icmp slt %10 0
		br %11, %22, %12
	12:
		%13 = load %3
		%14 = icmp sle %13 0
		br %14, %22, %15
	15:
		%16 = load %4
		%17 = icmp sle %16 0
		br %17, %22, %18
	18:
		%19 = load %4
		%20 = load %3
		%21 = icmp sgt %19 %20
		br %21, %22, %23
	22:
		store 0, %1
		br %43
	23:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%24 = load %2
		%25 = load %3
		%26 = srem i32 %24, %25
		store %26, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		br %27
	27:
		%28 = load %5
		%29 = load %3
		%30 = icmp slt %28 %29
		br %30, %31, %42
	31:
		%32 = load %6
		%33 = icmp ne %32 0
		br %33, %38, %34
	34:
		%35 = load %2
		%36 = load %4
		%37 = srem i32 %35, %36
		store %37, %6
		br %38
	38:
		%39 = load %6
		%40 = load %5
		%41 = add i32 %40, %39
		store %41, %5
		br %27
	42:
		store 0, %1
		br %43
	43:
		%44 = load %1
		ret %44


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_358(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v576, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_359(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_359(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_360(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: v612 = v573 + v575 && 2 <= v612
f_360(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_361(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: TRUE
f_361(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_362(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: TRUE
f_362(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_363(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_363(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_364(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_364(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_365(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: v612 < v569 && 3 <= v569
f_365(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_367(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_367(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_369(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: TRUE
f_369(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_371(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_371(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_373(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_373(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_375(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: TRUE
f_375(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_357(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: TRUE
f_357(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v576, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_358(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v576, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_358(v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, 0, v572:0, v573:0, 1, v575:0, v576:0, v577:0, v578:0, v579:0, v580:0, v581:0, v582:0, 3, 2, 4) -> f_358(v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, 0, v572:0, v573:0 + v575:0, 1, v575:0, v573:0, v577:0, v578:0, v579:0, v580:0, v581:0, v582:0, 3, 2, 4) :|: v573:0 + v575:0 > 1 && v573:0 + v575:0 < v569:0 && v569:0 > 2
Filtered unneeded arguments:
   f_358(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_358(x8, x12, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_358(v569:0, v573:0, v575:0) -> f_358(v569:0, v573:0 + v575:0, v575:0) :|: v573:0 + v575:0 < v569:0 && v569:0 > 2 && v573:0 + v575:0 > 1

----------------------------------------

(9)
Obligation:
Rules:
f_358(v569:0, v573:0, v575:0) -> f_358(v569:0, v573:0 + v575:0, v575:0) :|: v573:0 + v575:0 < v569:0 && v569:0 > 2 && v573:0 + v575:0 > 1

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_358(v569:0:0, v573:0:0, v575:0:0) -> f_358(v569:0:0, v573:0:0 + v575:0:0, v575:0:0) :|: v573:0:0 + v575:0:0 < v569:0:0 && v569:0:0 > 2 && v573:0:0 + v575:0:0 > 1

----------------------------------------

(12) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v569:0:0, v573:0:0, v575:0:0) -> f(1, v569:0:0, v573:0:0 + v575:0:0, v575:0:0) :|: pc = 1 && (v573:0:0 + v575:0:0 < v569:0:0 && v569:0:0 > 2 && v573:0:0 + v575:0:0 > 1)
Witness term starting non-terminating reduction: f(1, 7, 4, 0)
----------------------------------------

(13)
NO

----------------------------------------

(14) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_358(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v576, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_359(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_359(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_360(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: v612 = v573 + v575 && 2 <= v612
f_360(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_361(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: TRUE
f_361(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_362(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: TRUE
f_362(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v612, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_363(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_363(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_364(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_364(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_365(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: v612 < v569 && 3 <= v569
f_365(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_367(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_367(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_369(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: TRUE
f_369(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_371(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_371(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_373(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
f_373(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_375(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: TRUE
f_375(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_357(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v612, 1, v575, v573, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: v572 < v569 && v573 < v569 && v575 < v570 && v612 < v569 && v570 <= v569 && 1 <= v562 && 1 <= v563 && 1 <= v564 && 1 <= v565 && 1 <= v566 && 1 <= v567 && 0 <= v568 && 2 <= v569 && 2 <= v570 && 0 <= v572 && 1 <= v612 && 1 <= v575 && 0 <= v573 && 4 <= v577 && 4 <= v578 && 4 <= v579 && 4 <= v580 && 4 <= v581 && 4 <= v582 && v562 <= v577 && v563 <= v578 && v564 <= v579 && v565 <= v580 && v566 <= v581 && v567 <= v582
f_357(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v576, v577, v578, v579, v580, v581, v582, 3, 2, 4) -> f_358(v562, v563, v564, v565, v566, v567, v568, v569, v570, 0, v572, v573, 1, v575, v576, v577, v578, v579, v580, v581, v582, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_358(v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, 0, v572:0, v573:0, 1, v575:0, v576:0, v577:0, v578:0, v579:0, v580:0, v581:0, v582:0, 3, 2, 4) -> f_358(v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, 0, v572:0, v573:0 + v575:0, 1, v575:0, v573:0, v577:0, v578:0, v579:0, v580:0, v581:0, v582:0, 3, 2, 4) :|: v573:0 + v575:0 > 1 && v569:0 > 2 && v573:0 < v569:0 && v572:0 < v569:0 && v575:0 < v570:0 && v573:0 + v575:0 < v569:0 && v570:0 <= v569:0 && v562:0 > 0 && v563:0 > 0 && v564:0 > 0 && v565:0 > 0 && v566:0 > 0 && v567:0 > 0 && v568:0 > -1 && v570:0 > 1 && v572:0 > -1 && v575:0 > 0 && v573:0 > -1 && v577:0 > 3 && v578:0 > 3 && v579:0 > 3 && v580:0 > 3 && v581:0 > 3 && v582:0 > 3 && v577:0 >= v562:0 && v578:0 >= v563:0 && v579:0 >= v564:0 && v580:0 >= v565:0 && v582:0 >= v567:0 && v581:0 >= v566:0
Filtered unneeded arguments:
   f_358(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_358(x1, x2, x3, x4, x5, x6, x7, x8, x9, x11, x12, x14, x16, x17, x18, x19, x20, x21)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_358(v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, v572:0, v573:0, v575:0, v577:0, v578:0, v579:0, v580:0, v581:0, v582:0) -> f_358(v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, v572:0, v573:0 + v575:0, v575:0, v577:0, v578:0, v579:0, v580:0, v581:0, v582:0) :|: v569:0 > 2 && v573:0 + v575:0 > 1 && v573:0 < v569:0 && v572:0 < v569:0 && v575:0 < v570:0 && v573:0 + v575:0 < v569:0 && v570:0 <= v569:0 && v562:0 > 0 && v563:0 > 0 && v564:0 > 0 && v565:0 > 0 && v566:0 > 0 && v567:0 > 0 && v568:0 > -1 && v570:0 > 1 && v572:0 > -1 && v575:0 > 0 && v573:0 > -1 && v577:0 > 3 && v578:0 > 3 && v579:0 > 3 && v580:0 > 3 && v581:0 > 3 && v582:0 > 3 && v577:0 >= v562:0 && v578:0 >= v563:0 && v579:0 >= v564:0 && v580:0 >= v565:0 && v581:0 >= v566:0 && v582:0 >= v567:0

----------------------------------------

(15)
Obligation:
Rules:
f_358(v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, v572:0, v573:0, v575:0, v577:0, v578:0, v579:0, v580:0, v581:0, v582:0) -> f_358(v562:0, v563:0, v564:0, v565:0, v566:0, v567:0, v568:0, v569:0, v570:0, v572:0, v573:0 + v575:0, v575:0, v577:0, v578:0, v579:0, v580:0, v581:0, v582:0) :|: v569:0 > 2 && v573:0 + v575:0 > 1 && v573:0 < v569:0 && v572:0 < v569:0 && v575:0 < v570:0 && v573:0 + v575:0 < v569:0 && v570:0 <= v569:0 && v562:0 > 0 && v563:0 > 0 && v564:0 > 0 && v565:0 > 0 && v566:0 > 0 && v567:0 > 0 && v568:0 > -1 && v570:0 > 1 && v572:0 > -1 && v575:0 > 0 && v573:0 > -1 && v577:0 > 3 && v578:0 > 3 && v579:0 > 3 && v580:0 > 3 && v581:0 > 3 && v582:0 > 3 && v577:0 >= v562:0 && v578:0 >= v563:0 && v579:0 >= v564:0 && v580:0 >= v565:0 && v581:0 >= v566:0 && v582:0 >= v567:0

----------------------------------------

(16) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_358_18,1)

----------------------------------------

(17)
Obligation:
START: 0;

FROM: 0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := x14;
oldX15 := x15;
oldX16 := x16;
oldX17 := x17;
assume(oldX7 > 2 && oldX10 + oldX11 > 1 && oldX10 < oldX7 && oldX9 < oldX7 && oldX11 < oldX8 && oldX10 + oldX11 < oldX7 && oldX8 <= oldX7 && oldX0 > 0 && oldX1 > 0 && oldX2 > 0 && oldX3 > 0 && oldX4 > 0 && oldX5 > 0 && oldX6 > -1 && oldX8 > 1 && oldX9 > -1 && oldX11 > 0 && oldX10 > -1 && oldX12 > 3 && oldX13 > 3 && oldX14 > 3 && oldX15 > 3 && oldX16 > 3 && oldX17 > 3 && oldX12 >= oldX0 && oldX13 >= oldX1 && oldX14 >= oldX2 && oldX15 >= oldX3 && oldX16 >= oldX4 && oldX17 >= oldX5);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX3;
x4 := oldX4;
x5 := oldX5;
x6 := oldX6;
x7 := oldX7;
x8 := oldX8;
x9 := oldX9;
x10 := oldX10 + oldX11;
x11 := oldX11;
x12 := oldX12;
x13 := oldX13;
x14 := oldX14;
x15 := oldX15;
x16 := oldX16;
x17 := oldX17;
TO: 1;


----------------------------------------

(18) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(19)
Obligation:
Rules:
f_358(v562:0:0, v563:0:0, v564:0:0, v565:0:0, v566:0:0, v567:0:0, v568:0:0, v569:0:0, v570:0:0, v572:0:0, v573:0:0, v575:0:0, v577:0:0, v578:0:0, v579:0:0, v580:0:0, v581:0:0, v582:0:0) -> f_358(v562:0:0, v563:0:0, v564:0:0, v565:0:0, v566:0:0, v567:0:0, v568:0:0, v569:0:0, v570:0:0, v572:0:0, v573:0:0 + v575:0:0, v575:0:0, v577:0:0, v578:0:0, v579:0:0, v580:0:0, v581:0:0, v582:0:0) :|: v581:0:0 >= v566:0:0 && v582:0:0 >= v567:0:0 && v580:0:0 >= v565:0:0 && v579:0:0 >= v564:0:0 && v578:0:0 >= v563:0:0 && v577:0:0 >= v562:0:0 && v582:0:0 > 3 && v581:0:0 > 3 && v580:0:0 > 3 && v579:0:0 > 3 && v578:0:0 > 3 && v577:0:0 > 3 && v573:0:0 > -1 && v575:0:0 > 0 && v572:0:0 > -1 && v570:0:0 > 1 && v568:0:0 > -1 && v567:0:0 > 0 && v566:0:0 > 0 && v565:0:0 > 0 && v564:0:0 > 0 && v563:0:0 > 0 && v562:0:0 > 0 && v570:0:0 <= v569:0:0 && v573:0:0 + v575:0:0 < v569:0:0 && v575:0:0 < v570:0:0 && v572:0:0 < v569:0:0 && v573:0:0 < v569:0:0 && v573:0:0 + v575:0:0 > 1 && v569:0:0 > 2

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_308(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_311(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_311(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_314(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: v185 < v178
f_314(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_318(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_318(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_322(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_322(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_326(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_326(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_330(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_330(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_334(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_334(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_338(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_338(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_342(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_342(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v186, v187, v188, v189, v190, v191, 3, 4) -> f_346(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: v356 = v185 + v184
f_346(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) -> f_350(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_350(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) -> f_353(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_353(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) -> f_304(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_304(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v182, 1, v184, v185, v186, v187, v188, v189, v190, v191, 3, 4) -> f_308(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_308(v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, v179:0, 0, v181:0, v185:0, 1, v184:0, v182:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0, 3, 4) -> f_308(v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, v179:0, 0, v181:0, v185:0 + v184:0, 1, v184:0, v185:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0, 3, 4) :|: v185:0 < v178:0
Filtered unneeded arguments:
   f_308(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_308(x8, x12, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_308(v178:0, v185:0, v184:0) -> f_308(v178:0, v185:0 + v184:0, v184:0) :|: v185:0 < v178:0

----------------------------------------

(22)
Obligation:
Rules:
f_308(v178:0, v185:0, v184:0) -> f_308(v178:0, v185:0 + v184:0, v184:0) :|: v185:0 < v178:0

----------------------------------------

(23) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v178:0, v185:0, v184:0) -> f(1, v178:0, v185:0 + v184:0, v184:0) :|: pc = 1 && v185:0 < v178:0
Witness term starting non-terminating reduction: f(1, -7, -8, 0)
----------------------------------------

(24)
NO

----------------------------------------

(25) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_308(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_311(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_311(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_314(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: v185 < v178
f_314(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_318(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_318(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_322(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_322(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_326(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_326(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_330(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_330(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_334(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_334(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_338(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_338(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_342(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_342(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v186, v187, v188, v189, v190, v191, 3, 4) -> f_346(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: v356 = v185 + v184
f_346(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) -> f_350(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_350(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) -> f_353(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_353(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) -> f_304(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: v181 < v178 && v185 < v178 && v179 <= v178 && 1 <= v171 && 1 <= v172 && 1 <= v173 && 1 <= v174 && 1 <= v175 && 1 <= v176 && 0 <= v177 && 1 <= v178 && 1 <= v179 && 0 <= v181 && 4 <= v186 && 4 <= v187 && 4 <= v188 && 4 <= v189 && 4 <= v190 && 4 <= v191 && v171 <= v186 && v172 <= v187 && v173 <= v188 && v174 <= v189 && v175 <= v190 && v176 <= v191
f_304(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v182, 1, v184, v185, v186, v187, v188, v189, v190, v191, 3, 4) -> f_308(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_308(v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, v179:0, 0, v181:0, v185:0, 1, v184:0, v182:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0, 3, 4) -> f_308(v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, v179:0, 0, v181:0, v185:0 + v184:0, 1, v184:0, v185:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0, 3, 4) :|: v185:0 < v178:0 && v181:0 < v178:0 && v179:0 <= v178:0 && v171:0 > 0 && v172:0 > 0 && v173:0 > 0 && v174:0 > 0 && v175:0 > 0 && v176:0 > 0 && v177:0 > -1 && v178:0 > 0 && v179:0 > 0 && v181:0 > -1 && v186:0 > 3 && v187:0 > 3 && v188:0 > 3 && v189:0 > 3 && v190:0 > 3 && v191:0 > 3 && v186:0 >= v171:0 && v187:0 >= v172:0 && v188:0 >= v173:0 && v189:0 >= v174:0 && v191:0 >= v176:0 && v190:0 >= v175:0
Filtered unneeded arguments:
   f_308(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_308(x1, x2, x3, x4, x5, x6, x7, x8, x9, x11, x12, x14, x16, x17, x18, x19, x20, x21)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_308(v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, v179:0, v181:0, v185:0, v184:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0) -> f_308(v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, v179:0, v181:0, v185:0 + v184:0, v184:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0) :|: v181:0 < v178:0 && v185:0 < v178:0 && v179:0 <= v178:0 && v171:0 > 0 && v172:0 > 0 && v173:0 > 0 && v174:0 > 0 && v175:0 > 0 && v176:0 > 0 && v177:0 > -1 && v178:0 > 0 && v179:0 > 0 && v181:0 > -1 && v186:0 > 3 && v187:0 > 3 && v188:0 > 3 && v189:0 > 3 && v190:0 > 3 && v191:0 > 3 && v186:0 >= v171:0 && v187:0 >= v172:0 && v188:0 >= v173:0 && v189:0 >= v174:0 && v190:0 >= v175:0 && v191:0 >= v176:0

----------------------------------------

(26)
Obligation:
Rules:
f_308(v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, v179:0, v181:0, v185:0, v184:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0) -> f_308(v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, v179:0, v181:0, v185:0 + v184:0, v184:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0) :|: v181:0 < v178:0 && v185:0 < v178:0 && v179:0 <= v178:0 && v171:0 > 0 && v172:0 > 0 && v173:0 > 0 && v174:0 > 0 && v175:0 > 0 && v176:0 > 0 && v177:0 > -1 && v178:0 > 0 && v179:0 > 0 && v181:0 > -1 && v186:0 > 3 && v187:0 > 3 && v188:0 > 3 && v189:0 > 3 && v190:0 > 3 && v191:0 > 3 && v186:0 >= v171:0 && v187:0 >= v172:0 && v188:0 >= v173:0 && v189:0 >= v174:0 && v190:0 >= v175:0 && v191:0 >= v176:0

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f_308(v171:0:0, v172:0:0, v173:0:0, v174:0:0, v175:0:0, v176:0:0, v177:0:0, v178:0:0, v179:0:0, v181:0:0, v185:0:0, v184:0:0, v186:0:0, v187:0:0, v188:0:0, v189:0:0, v190:0:0, v191:0:0) -> f_308(v171:0:0, v172:0:0, v173:0:0, v174:0:0, v175:0:0, v176:0:0, v177:0:0, v178:0:0, v179:0:0, v181:0:0, v185:0:0 + v184:0:0, v184:0:0, v186:0:0, v187:0:0, v188:0:0, v189:0:0, v190:0:0, v191:0:0) :|: v190:0:0 >= v175:0:0 && v191:0:0 >= v176:0:0 && v189:0:0 >= v174:0:0 && v188:0:0 >= v173:0:0 && v187:0:0 >= v172:0:0 && v186:0:0 >= v171:0:0 && v191:0:0 > 3 && v190:0:0 > 3 && v189:0:0 > 3 && v188:0:0 > 3 && v187:0:0 > 3 && v186:0:0 > 3 && v181:0:0 > -1 && v179:0:0 > 0 && v178:0:0 > 0 && v177:0:0 > -1 && v176:0:0 > 0 && v175:0:0 > 0 && v174:0:0 > 0 && v173:0:0 > 0 && v172:0:0 > 0 && v171:0:0 > 0 && v179:0:0 <= v178:0:0 && v185:0:0 < v178:0:0 && v181:0:0 < v178:0:0

----------------------------------------

(29) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v171:0:0, v172:0:0, v173:0:0, v174:0:0, v175:0:0, v176:0:0, v177:0:0, v178:0:0, v179:0:0, v181:0:0, v185:0:0, v184:0:0, v186:0:0, v187:0:0, v188:0:0, v189:0:0, v190:0:0, v191:0:0) -> f(1, v171:0:0, v172:0:0, v173:0:0, v174:0:0, v175:0:0, v176:0:0, v177:0:0, v178:0:0, v179:0:0, v181:0:0, v185:0:0 + v184:0:0, v184:0:0, v186:0:0, v187:0:0, v188:0:0, v189:0:0, v190:0:0, v191:0:0) :|: pc = 1 && (v190:0:0 >= v175:0:0 && v191:0:0 >= v176:0:0 && v189:0:0 >= v174:0:0 && v188:0:0 >= v173:0:0 && v187:0:0 >= v172:0:0 && v186:0:0 >= v171:0:0 && v191:0:0 > 3 && v190:0:0 > 3 && v189:0:0 > 3 && v188:0:0 > 3 && v187:0:0 > 3 && v186:0:0 > 3 && v181:0:0 > -1 && v179:0:0 > 0 && v178:0:0 > 0 && v177:0:0 > -1 && v176:0:0 > 0 && v175:0:0 > 0 && v174:0:0 > 0 && v173:0:0 > 0 && v172:0:0 > 0 && v171:0:0 > 0 && v179:0:0 <= v178:0:0 && v185:0:0 < v178:0:0 && v181:0:0 < v178:0:0)
Witness term starting non-terminating reduction: f(1, 1, 16, 1, 8, 1, 16, 0, 16, 1, 12, 0, 0, 17, 18, 19, 10, 19, 18)
----------------------------------------

(30)
NO

----------------------------------------

(31)
Obligation:
SCC
----------------------------------------

(32) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_282(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_285(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_285(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_288(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: v71 < v15
f_288(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_291(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_291(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_294(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_294(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_297(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_297(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_301(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: v68 = 0 && v71 = v63
f_301(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_306(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_306(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_310(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_310(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_313(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_313(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_317(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_317(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_321(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = v13 - v13 / v17 * v17 && 0 < v17
f_321(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_325(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_325(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_329(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_329(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_333(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_333(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_337(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_337(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_341(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_341(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_345(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_345(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_349(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_349(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_279(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, 0, v63, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_279(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v68, v71, v2, v4, v6, v8, v10, v12, 3, 4) -> f_282(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_282(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, 0, v63:0, v63:0, 1, 0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, 3, 4) -> f_282(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, 0, v63:0, v63:0, 1, 0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, 3, 4) :|: v63:0 < v15:0 && v13:0 - v13:0 / v17:0 * v17:0 = 0 && v17:0 > 0
Filtered duplicate arguments:
   f_282(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_282(x1, x2, x3, x4, x5, x6, x7, x8, x9, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22)
Filtered unneeded arguments:
   f_282(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_282(x7, x8, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_282(v13:0, v15:0, v17:0, v63:0) -> f_282'(v13:0, v15:0, v17:0, v63:0) :|: v13:0 - div * v17:0 = 0 && v17:0 > 0 && v63:0 < v15:0
f_282'(v13:0, v15:0, v17:0, v63:0) -> f_282(v13:0, v15:0, v17:0, v63:0) :|: v17:0 > 0 && v13:0 < 0 && v13:0 - div * v17:0 = 0 && v63:0 < v15:0 && v13:0 - v17:0 * div <= 0 && v13:0 - v17:0 * div + v17:0 > 0
f_282'(v13:0, v15:0, v17:0, v63:0) -> f_282(v13:0, v15:0, v17:0, v63:0) :|: v17:0 > 0 && v13:0 > -1 && v13:0 - div * v17:0 = 0 && v63:0 < v15:0 && v13:0 - v17:0 * div - v17:0 < 0 && v13:0 - v17:0 * div >= 0

----------------------------------------

(33)
Obligation:
Rules:
f_282(x, x1, x2, x3) -> f_282'(x, x1, x2, x3) :|: x - x4 * x2 = 0 && x2 > 0 && x3 < x1
f_282'(x5, x6, x7, x8) -> f_282(x5, x6, x7, x8) :|: x7 > 0 && x5 < 0 && x5 - x9 * x7 = 0 && x8 < x6 && x5 - x7 * x9 <= 0 && x5 - x7 * x9 + x7 > 0
f_282'(x10, x11, x12, x13) -> f_282(x10, x11, x12, x13) :|: x12 > 0 && x10 > -1 && x10 - x14 * x12 = 0 && x13 < x11 && x10 - x12 * x14 - x12 < 0 && x10 - x12 * x14 >= 0

----------------------------------------

(34) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(35)
Obligation:
Rules:
f_282(x:0, x1:0, x2:0, x3:0) -> f_282(x:0, x1:0, x2:0, x3:0) :|: x:0 - x2:0 * x14:0 >= 0 && x:0 - x4:0 * x2:0 = 0 && x:0 - x2:0 * x14:0 - x2:0 < 0 && x3:0 < x1:0 && x:0 - x14:0 * x2:0 = 0 && x:0 > -1 && x2:0 > 0
f_282(x, x1, x2, x3) -> f_282(x, x1, x2, x3) :|: x - x2 * x4 + x2 > 0 && x - x5 * x2 = 0 && x - x2 * x4 <= 0 && x3 < x1 && x - x4 * x2 = 0 && x < 0 && x2 > 0

----------------------------------------

(36) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x:0, x1:0, x2:0, x3:0) -> f(1, x:0, x1:0, x2:0, x3:0) :|: pc = 1 && (x:0 - x2:0 * x14:0 >= 0 && x:0 - x4:0 * x2:0 = 0 && x:0 - x2:0 * x14:0 - x2:0 < 0 && x3:0 < x1:0 && x:0 - x14:0 * x2:0 = 0 && x:0 > -1 && x2:0 > 0)
f(pc, x, x1, x2, x3) -> f(1, x, x1, x2, x3) :|: pc = 1 && (x - x2 * x4 + x2 > 0 && x - x5 * x2 = 0 && x - x2 * x4 <= 0 && x3 < x1 && x - x4 * x2 = 0 && x < 0 && x2 > 0)
Witness term starting non-terminating reduction: f(1, -5, -7, 1, -8)
----------------------------------------

(37)
NO

----------------------------------------

(38) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_282(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_285(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_285(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_288(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: v71 < v15
f_288(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_291(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_291(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_294(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_294(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_297(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_297(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) -> f_301(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: v68 = 0 && v71 = v63
f_301(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_306(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_306(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_310(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_310(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_313(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_313(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_317(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_317(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_321(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = v13 - v13 / v17 * v17 && 0 < v17
f_321(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_325(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_325(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_329(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_329(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_333(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_333(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_337(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_337(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_341(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_341(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_345(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_345(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_349(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_349(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_279(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, 0, v63, v2, v4, v6, v8, v10, v12, 3, 4) :|: v63 < v15 && 0 < v17 && v17 <= v15 && 1 <= v1 && 4 <= v2 && 1 <= v3 && 4 <= v4 && 1 <= v5 && 4 <= v6 && 1 <= v7 && 4 <= v8 && 1 <= v9 && 4 <= v10 && 1 <= v11 && 4 <= v12 && 0 <= v13 && 1 <= v15 && 1 <= v17 && 0 <= v63 && 0 <= 0 && 0 <= v63 && v1 <= v2 && v3 <= v4 && v5 <= v6 && v7 <= v8 && v9 <= v10 && v11 <= v12
f_279(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v68, v71, v2, v4, v6, v8, v10, v12, 3, 4) -> f_282(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v71, 1, v68, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_282(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, 0, v63:0, v63:0, 1, 0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, 3, 4) -> f_282(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, 0, v63:0, v63:0, 1, 0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0, 3, 4) :|: v17:0 > 0 && v63:0 < v15:0 && v17:0 <= v15:0 && v1:0 > 0 && v2:0 > 3 && v3:0 > 0 && v4:0 > 3 && v5:0 > 0 && v6:0 > 3 && v7:0 > 0 && v8:0 > 3 && v9:0 > 0 && v10:0 > 3 && v11:0 > 0 && v12:0 > 3 && v13:0 > -1 && v15:0 > 0 && v63:0 > -1 && v13:0 - v13:0 / v17:0 * v17:0 = 0 && v2:0 >= v1:0 && v4:0 >= v3:0 && v6:0 >= v5:0 && v8:0 >= v7:0 && v12:0 >= v11:0 && v9:0 <= v10:0
Filtered duplicate arguments:
   f_282(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_282(x1, x2, x3, x4, x5, x6, x7, x8, x9, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22)
Filtered unneeded arguments:
   f_282(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_282(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x13, x14, x15, x16, x17, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_282(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, v63:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0) -> f_282'(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, v63:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0) :|: v63:0 < v15:0 && v17:0 > 0 && v17:0 <= v15:0 && v1:0 > 0 && v2:0 > 3 && v3:0 > 0 && v4:0 > 3 && v5:0 > 0 && v6:0 > 3 && v7:0 > 0 && v8:0 > 3 && v9:0 > 0 && v10:0 > 3 && v11:0 > 0 && v12:0 > 3 && v13:0 > -1 && v15:0 > 0 && v63:0 > -1 && v13:0 - div * v17:0 = 0 && v2:0 >= v1:0 && v4:0 >= v3:0 && v6:0 >= v5:0 && v8:0 >= v7:0 && v9:0 <= v10:0 && v12:0 >= v11:0
f_282'(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, v63:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0) -> f_282(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, v63:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0) :|: v17:0 > 0 && v63:0 < v15:0 && v17:0 <= v15:0 && v1:0 > 0 && v2:0 > 3 && v3:0 > 0 && v4:0 > 3 && v5:0 > 0 && v6:0 > 3 && v7:0 > 0 && v8:0 > 3 && v9:0 > 0 && v10:0 > 3 && v11:0 > 0 && v12:0 > 3 && v13:0 > -1 && v15:0 > 0 && v63:0 > -1 && v13:0 - div * v17:0 = 0 && v2:0 >= v1:0 && v4:0 >= v3:0 && v6:0 >= v5:0 && v8:0 >= v7:0 && v13:0 < 0 && v12:0 >= v11:0 && v13:0 - v17:0 * div + v17:0 > 0 && v13:0 - v17:0 * div <= 0 && v9:0 <= v10:0
f_282'(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, v63:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0) -> f_282(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, v63:0, v2:0, v4:0, v6:0, v8:0, v10:0, v12:0) :|: v17:0 > 0 && v63:0 < v15:0 && v17:0 <= v15:0 && v1:0 > 0 && v2:0 > 3 && v3:0 > 0 && v4:0 > 3 && v5:0 > 0 && v6:0 > 3 && v7:0 > 0 && v8:0 > 3 && v9:0 > 0 && v10:0 > 3 && v11:0 > 0 && v12:0 > 3 && v13:0 > -1 && v15:0 > 0 && v63:0 > -1 && v13:0 - div * v17:0 = 0 && v2:0 >= v1:0 && v4:0 >= v3:0 && v6:0 >= v5:0 && v8:0 >= v7:0 && v12:0 >= v11:0 && v13:0 - v17:0 * div >= 0 && v13:0 - v17:0 * div - v17:0 < 0 && v9:0 <= v10:0

----------------------------------------

(39)
Obligation:
Rules:
f_282(x, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_282'(x, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) :|: x9 < x7 && x8 > 0 && x8 <= x7 && x > 0 && x10 > 3 && x1 > 0 && x11 > 3 && x2 > 0 && x12 > 3 && x3 > 0 && x13 > 3 && x4 > 0 && x14 > 3 && x5 > 0 && x15 > 3 && x6 > -1 && x7 > 0 && x9 > -1 && x6 - x16 * x8 = 0 && x10 >= x && x11 >= x1 && x12 >= x2 && x13 >= x3 && x4 <= x14 && x15 >= x5
f_282'(x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) -> f_282(x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32) :|: x25 > 0 && x26 < x24 && x25 <= x24 && x17 > 0 && x27 > 3 && x18 > 0 && x28 > 3 && x19 > 0 && x29 > 3 && x20 > 0 && x30 > 3 && x21 > 0 && x31 > 3 && x22 > 0 && x32 > 3 && x23 > -1 && x24 > 0 && x26 > -1 && x23 - x33 * x25 = 0 && x27 >= x17 && x28 >= x18 && x29 >= x19 && x30 >= x20 && x23 < 0 && x32 >= x22 && x23 - x25 * x33 + x25 > 0 && x23 - x25 * x33 <= 0 && x21 <= x31
f_282'(x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49) -> f_282(x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49) :|: x42 > 0 && x43 < x41 && x42 <= x41 && x34 > 0 && x44 > 3 && x35 > 0 && x45 > 3 && x36 > 0 && x46 > 3 && x37 > 0 && x47 > 3 && x38 > 0 && x48 > 3 && x39 > 0 && x49 > 3 && x40 > -1 && x41 > 0 && x43 > -1 && x40 - x50 * x42 = 0 && x44 >= x34 && x45 >= x35 && x46 >= x36 && x47 >= x37 && x49 >= x39 && x40 - x42 * x50 >= 0 && x40 - x42 * x50 - x42 < 0 && x38 <= x48

----------------------------------------

(40) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_282_16,1)
   (f_282'_16,2)

----------------------------------------

(41)
Obligation:
START: 0;

FROM: 0;
TO: 1;

FROM: 0;
TO: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := x14;
oldX15 := x15;
oldX16 := nondet();
assume(oldX9 < oldX7 && oldX8 > 0 && oldX8 <= oldX7 && oldX0 > 0 && oldX10 > 3 && oldX1 > 0 && oldX11 > 3 && oldX2 > 0 && oldX12 > 3 && oldX3 > 0 && oldX13 > 3 && oldX4 > 0 && oldX14 > 3 && oldX5 > 0 && oldX15 > 3 && oldX6 > -1 && oldX7 > 0 && oldX9 > -1 && oldX6 - oldX16 * oldX8 = 0 && oldX10 >= oldX0 && oldX11 >= oldX1 && oldX12 >= oldX2 && oldX13 >= oldX3 && oldX4 <= oldX14 && oldX15 >= oldX5);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX3;
x4 := oldX4;
x5 := oldX5;
x6 := oldX6;
x7 := oldX7;
x8 := oldX8;
x9 := oldX9;
x10 := oldX10;
x11 := oldX11;
x12 := oldX12;
x13 := oldX13;
x14 := oldX14;
x15 := oldX15;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := x14;
oldX15 := x15;
oldX16 := nondet();
assume(oldX8 > 0 && oldX9 < oldX7 && oldX8 <= oldX7 && oldX0 > 0 && oldX10 > 3 && oldX1 > 0 && oldX11 > 3 && oldX2 > 0 && oldX12 > 3 && oldX3 > 0 && oldX13 > 3 && oldX4 > 0 && oldX14 > 3 && oldX5 > 0 && oldX15 > 3 && oldX6 > -1 && oldX7 > 0 && oldX9 > -1 && oldX6 - oldX16 * oldX8 = 0 && oldX10 >= oldX0 && oldX11 >= oldX1 && oldX12 >= oldX2 && oldX13 >= oldX3 && oldX6 < 0 && oldX15 >= oldX5 && oldX6 - oldX8 * oldX16 + oldX8 > 0 && oldX6 - oldX8 * oldX16 <= 0 && oldX4 <= oldX14);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX3;
x4 := oldX4;
x5 := oldX5;
x6 := oldX6;
x7 := oldX7;
x8 := oldX8;
x9 := oldX9;
x10 := oldX10;
x11 := oldX11;
x12 := oldX12;
x13 := oldX13;
x14 := oldX14;
x15 := oldX15;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := x14;
oldX15 := x15;
oldX16 := nondet();
assume(oldX8 > 0 && oldX9 < oldX7 && oldX8 <= oldX7 && oldX0 > 0 && oldX10 > 3 && oldX1 > 0 && oldX11 > 3 && oldX2 > 0 && oldX12 > 3 && oldX3 > 0 && oldX13 > 3 && oldX4 > 0 && oldX14 > 3 && oldX5 > 0 && oldX15 > 3 && oldX6 > -1 && oldX7 > 0 && oldX9 > -1 && oldX6 - oldX16 * oldX8 = 0 && oldX10 >= oldX0 && oldX11 >= oldX1 && oldX12 >= oldX2 && oldX13 >= oldX3 && oldX15 >= oldX5 && oldX6 - oldX8 * oldX16 >= 0 && oldX6 - oldX8 * oldX16 - oldX8 < 0 && oldX4 <= oldX14);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX3;
x4 := oldX4;
x5 := oldX5;
x6 := oldX6;
x7 := oldX7;
x8 := oldX8;
x9 := oldX9;
x10 := oldX10;
x11 := oldX11;
x12 := oldX12;
x13 := oldX13;
x14 := oldX14;
x15 := oldX15;
TO: 1;


----------------------------------------

(42) SymbolicExecutionGraphToLassoProof (COMPLETE)
Converted SEGraph to 3 dependent lassos.
----------------------------------------

(43)
Complex Obligation (AND)

----------------------------------------

(44)
Obligation:
Lasso
----------------------------------------

(45)
Obligation:
Lasso
----------------------------------------

(46) Lasso2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 68 rulesP rules:
f_308(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_311(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_311(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_314(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: v185 < v178
f_314(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_318(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_318(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_322(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_322(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_326(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_326(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_330(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_330(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_334(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_334(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_338(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_338(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) -> f_342(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_342(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v186, v187, v188, v189, v190, v191, 3, 4) -> f_346(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: v356 = v185 + v184
f_346(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) -> f_350(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_350(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) -> f_353(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_353(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) -> f_304(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v356, v186, v187, v188, v189, v190, v191, 3, 4) :|: TRUE
f_304(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v182, 1, v184, v185, v186, v187, v188, v189, v190, v191, 3, 4) -> f_308(v171, v172, v173, v174, v175, v176, v177, v178, v179, 0, v181, v185, 1, v184, v182, v186, v187, v188, v189, v190, v191, 3, 4) :|: 0 = 0
f_181 -> f_182(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_182(v1, v2, 3, 1, 4) -> f_183(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_183(v1, v3, v2, v4, 3, 1, 4) -> f_184(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_184(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_185(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_185(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_186(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_186(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) -> f_187(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 1 <= v11 && v12 = 3 + v11 && 4 <= v12
f_187(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_188(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_188(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_189(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_189(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_190(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_190(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_191(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_191(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_192(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_192(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_193(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_193(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_194(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_194(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_195(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_195(v1, v3, v5, v7, v9, v11, v13, v15, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_196(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_196(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_197(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: TRUE
f_197(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_198(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: 0 = 0
f_198(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_200(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) :|: 0 <= v13
f_200(v1, v3, v5, v7, v9, v11, v13, v15, v17, v2, v4, v6, v8, v10, v12, 0, 3, 1, 4) -> f_202(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_202(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_204(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_204(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_206(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_206(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_209(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 < v15
f_209(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_212(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_212(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_214(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_214(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_216(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_216(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_219(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 < v17
f_219(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_222(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_222(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_224(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_224(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_226(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_226(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_228(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_228(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_231(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: v17 <= v15
f_231(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_233(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_233(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_235(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_235(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_237(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_237(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_239(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_239(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_241(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_241(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_242(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: v63 = v13 - v13 / v15 * v15 && v63 < v15 && 0 <= v63
f_242(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_243(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_243(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_244(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_244(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_245(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: TRUE
f_245(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_246(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_246(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_247(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) :|: 0 = 0
f_247(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v2, v4, v6, v8, v10, v12, 3, 1, 4) -> f_248(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_248(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_249(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_249(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v2, v4, v6, v8, v10, v12, 3, 4) -> f_250(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_250(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) -> f_251(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) :|: v65 != 0
f_251(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) -> f_253(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_253(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) -> f_255(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_255(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) -> f_257(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_257(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) -> f_259(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) :|: 0 = 0
f_259(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v2, v4, v6, v8, v10, v12, 3, 4) -> f_261(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v67, v2, v4, v6, v8, v10, v12, 3, 4) :|: v67 = v63 + v65
f_261(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v67, v2, v4, v6, v8, v10, v12, 3, 4) -> f_263(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v67, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_263(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v67, v2, v4, v6, v8, v10, v12, 3, 4) -> f_265(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v67, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
f_265(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, 1, v65, v67, v2, v4, v6, v8, v10, v12, 3, 4) -> f_304(v1, v3, v5, v7, v9, v11, v13, v15, v17, 0, v63, v63, 1, v65, v67, v2, v4, v6, v8, v10, v12, 3, 4) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_308(v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, v179:0, 0, v181:0, v185:0, 1, v184:0, v182:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0, 3, 4) -> f_308(v171:0, v172:0, v173:0, v174:0, v175:0, v176:0, v177:0, v178:0, v179:0, 0, v181:0, v185:0 + v184:0, 1, v184:0, v185:0, v186:0, v187:0, v188:0, v189:0, v190:0, v191:0, 3, 4) :|: v185:0 < v178:0
f_181 -> f_308(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, 0, v13:0 - v13:0 / v15:0 * v15:0, v13:0 - v13:0 / v15:0 * v15:0 + v65:0, 1, v65:0, v13:0 - v13:0 / v15:0 * v15:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3 + v11:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v13:0 > -1 && v15:0 > 0 && v17:0 > 0 && v17:0 <= v15:0 && v15:0 > v13:0 - v13:0 / v15:0 * v15:0 && v65:0 < 0 && v13:0 - v13:0 / v15:0 * v15:0 > -1
f_181 -> f_308(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v15:0, v17:0, 0, v13:0 - v13:0 / v15:0 * v15:0, v13:0 - v13:0 / v15:0 * v15:0 + v65:0, 1, v65:0, v13:0 - v13:0 / v15:0 * v15:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3 + v11:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 > 0 && v13:0 > -1 && v15:0 > 0 && v17:0 > 0 && v17:0 <= v15:0 && v15:0 > v13:0 - v13:0 / v15:0 * v15:0 && v65:0 > 0 && v13:0 - v13:0 / v15:0 * v15:0 > -1
Filtered unneeded arguments:
   f_308(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_308(x8, x12, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 18 rules.P rules:
f_308(v178:0, v185:0, v184:0) -> f_308(v178:0, v185:0 + v184:0, v184:0) :|: v185:0 < v178:0
f_181 -> f_181' :|: TRUE
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 < 0 && v13:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div + v15:0 > 0 && v13:0 - v15:0 * div <= 0 && v13:0 - v15:0 * div1 + v15:0 > 0 && v13:0 - v15:0 * div1 <= 0 && v13:0 - v15:0 * div2 <= 0 && v13:0 - v15:0 * div2 + v15:0 > 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 < 0 && v13:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div + v15:0 > 0 && v13:0 - v15:0 * div <= 0 && v13:0 - v15:0 * div1 + v15:0 > 0 && v13:0 - v15:0 * div1 <= 0 && v13:0 - v15:0 * div2 - v15:0 < 0 && v13:0 - v15:0 * div2 >= 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 < 0 && v13:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div + v15:0 > 0 && v13:0 - v15:0 * div <= 0 && v13:0 - v15:0 * div1 >= 0 && v13:0 - v15:0 * div1 - v15:0 < 0 && v13:0 - v15:0 * div2 <= 0 && v13:0 - v15:0 * div2 + v15:0 > 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div >= 0 && v13:0 < 0 && v13:0 - v15:0 * div - v15:0 < 0 && v13:0 - v15:0 * div1 + v15:0 > 0 && v13:0 - v15:0 * div1 <= 0 && v13:0 - v15:0 * div2 <= 0 && v13:0 - v15:0 * div2 + v15:0 > 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 < 0 && v13:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div + v15:0 > 0 && v13:0 - v15:0 * div <= 0 && v13:0 - v15:0 * div1 >= 0 && v13:0 - v15:0 * div1 - v15:0 < 0 && v13:0 - v15:0 * div2 - v15:0 < 0 && v13:0 - v15:0 * div2 >= 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div >= 0 && v13:0 < 0 && v13:0 - v15:0 * div - v15:0 < 0 && v13:0 - v15:0 * div1 + v15:0 > 0 && v13:0 - v15:0 * div1 <= 0 && v13:0 - v15:0 * div2 - v15:0 < 0 && v13:0 - v15:0 * div2 >= 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div >= 0 && v13:0 - v15:0 * div - v15:0 < 0 && v13:0 - v15:0 * div1 >= 0 && v13:0 < 0 && v13:0 - v15:0 * div1 - v15:0 < 0 && v13:0 - v15:0 * div2 <= 0 && v13:0 - v15:0 * div2 + v15:0 > 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div >= 0 && v13:0 - v15:0 * div - v15:0 < 0 && v13:0 - v15:0 * div1 >= 0 && v13:0 - v15:0 * div1 - v15:0 < 0 && v13:0 - v15:0 * div2 - v15:0 < 0 && v13:0 - v15:0 * div2 >= 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 > 0 && v13:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div + v15:0 > 0 && v13:0 - v15:0 * div <= 0 && v13:0 - v15:0 * div1 + v15:0 > 0 && v13:0 - v15:0 * div1 <= 0 && v13:0 - v15:0 * div2 <= 0 && v13:0 - v15:0 * div2 + v15:0 > 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 > 0 && v13:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div + v15:0 > 0 && v13:0 - v15:0 * div <= 0 && v13:0 - v15:0 * div1 + v15:0 > 0 && v13:0 - v15:0 * div1 <= 0 && v13:0 - v15:0 * div2 - v15:0 < 0 && v13:0 - v15:0 * div2 >= 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 > 0 && v13:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div + v15:0 > 0 && v13:0 - v15:0 * div <= 0 && v13:0 - v15:0 * div1 >= 0 && v13:0 - v15:0 * div1 - v15:0 < 0 && v13:0 - v15:0 * div2 <= 0 && v13:0 - v15:0 * div2 + v15:0 > 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 > 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div >= 0 && v13:0 < 0 && v13:0 - v15:0 * div - v15:0 < 0 && v13:0 - v15:0 * div1 + v15:0 > 0 && v13:0 - v15:0 * div1 <= 0 && v13:0 - v15:0 * div2 <= 0 && v13:0 - v15:0 * div2 + v15:0 > 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 > 0 && v13:0 < 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div + v15:0 > 0 && v13:0 - v15:0 * div <= 0 && v13:0 - v15:0 * div1 >= 0 && v13:0 - v15:0 * div1 - v15:0 < 0 && v13:0 - v15:0 * div2 - v15:0 < 0 && v13:0 - v15:0 * div2 >= 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 > 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div >= 0 && v13:0 < 0 && v13:0 - v15:0 * div - v15:0 < 0 && v13:0 - v15:0 * div1 + v15:0 > 0 && v13:0 - v15:0 * div1 <= 0 && v13:0 - v15:0 * div2 - v15:0 < 0 && v13:0 - v15:0 * div2 >= 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 > 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div >= 0 && v13:0 - v15:0 * div - v15:0 < 0 && v13:0 - v15:0 * div1 >= 0 && v13:0 < 0 && v13:0 - v15:0 * div1 - v15:0 < 0 && v13:0 - v15:0 * div2 <= 0 && v13:0 - v15:0 * div2 + v15:0 > 0
f_181' -> f_308(v15:0, v13:0 - div2 * v15:0 + v65:0, v65:0) :|: v15:0 > 0 && v13:0 > -1 && v15:0 > v13:0 - div * v15:0 && v65:0 > 0 && v13:0 - div1 * v15:0 > -1 && v13:0 - v15:0 * div >= 0 && v13:0 - v15:0 * div - v15:0 < 0 && v13:0 - v15:0 * div1 >= 0 && v13:0 - v15:0 * div1 - v15:0 < 0 && v13:0 - v15:0 * div2 - v15:0 < 0 && v13:0 - v15:0 * div2 >= 0

----------------------------------------

(47)
Obligation:
Rules:
f_308(v178:0, v185:0, v184:0) -> f_308(v178:0, v185:0 + v184:0, v184:0) :|: v185:0 < v178:0
f_181 -> f_181' :|: TRUE
f_181' -> f_308(x, x1 - x2 * x + x3, x3) :|: x > 0 && x1 > -1 && x > x1 - x4 * x && x3 < 0 && x1 < 0 && x1 - x5 * x > -1 && x1 - x * x4 + x > 0 && x1 - x * x4 <= 0 && x1 - x * x5 + x > 0 && x1 - x * x5 <= 0 && x1 - x * x2 <= 0 && x1 - x * x2 + x > 0
f_181' -> f_308(x6, x7 - x8 * x6 + x9, x9) :|: x6 > 0 && x7 > -1 && x6 > x7 - x10 * x6 && x9 < 0 && x7 < 0 && x7 - x11 * x6 > -1 && x7 - x6 * x10 + x6 > 0 && x7 - x6 * x10 <= 0 && x7 - x6 * x11 + x6 > 0 && x7 - x6 * x11 <= 0 && x7 - x6 * x8 - x6 < 0 && x7 - x6 * x8 >= 0
f_181' -> f_308(x12, x13 - x14 * x12 + x15, x15) :|: x12 > 0 && x13 > -1 && x12 > x13 - x16 * x12 && x15 < 0 && x13 < 0 && x13 - x17 * x12 > -1 && x13 - x12 * x16 + x12 > 0 && x13 - x12 * x16 <= 0 && x13 - x12 * x17 >= 0 && x13 - x12 * x17 - x12 < 0 && x13 - x12 * x14 <= 0 && x13 - x12 * x14 + x12 > 0
f_181' -> f_308(x18, x19 - x20 * x18 + x21, x21) :|: x18 > 0 && x19 > -1 && x18 > x19 - x22 * x18 && x21 < 0 && x19 - x23 * x18 > -1 && x19 - x18 * x22 >= 0 && x19 < 0 && x19 - x18 * x22 - x18 < 0 && x19 - x18 * x23 + x18 > 0 && x19 - x18 * x23 <= 0 && x19 - x18 * x20 <= 0 && x19 - x18 * x20 + x18 > 0
f_181' -> f_308(x24, x25 - x26 * x24 + x27, x27) :|: x24 > 0 && x25 > -1 && x24 > x25 - x28 * x24 && x27 < 0 && x25 < 0 && x25 - x29 * x24 > -1 && x25 - x24 * x28 + x24 > 0 && x25 - x24 * x28 <= 0 && x25 - x24 * x29 >= 0 && x25 - x24 * x29 - x24 < 0 && x25 - x24 * x26 - x24 < 0 && x25 - x24 * x26 >= 0
f_181' -> f_308(x30, x31 - x32 * x30 + x33, x33) :|: x30 > 0 && x31 > -1 && x30 > x31 - x34 * x30 && x33 < 0 && x31 - x35 * x30 > -1 && x31 - x30 * x34 >= 0 && x31 < 0 && x31 - x30 * x34 - x30 < 0 && x31 - x30 * x35 + x30 > 0 && x31 - x30 * x35 <= 0 && x31 - x30 * x32 - x30 < 0 && x31 - x30 * x32 >= 0
f_181' -> f_308(x36, x37 - x38 * x36 + x39, x39) :|: x36 > 0 && x37 > -1 && x36 > x37 - x40 * x36 && x39 < 0 && x37 - x41 * x36 > -1 && x37 - x36 * x40 >= 0 && x37 - x36 * x40 - x36 < 0 && x37 - x36 * x41 >= 0 && x37 < 0 && x37 - x36 * x41 - x36 < 0 && x37 - x36 * x38 <= 0 && x37 - x36 * x38 + x36 > 0
f_181' -> f_308(x42, x43 - x44 * x42 + x45, x45) :|: x42 > 0 && x43 > -1 && x42 > x43 - x46 * x42 && x45 < 0 && x43 - x47 * x42 > -1 && x43 - x42 * x46 >= 0 && x43 - x42 * x46 - x42 < 0 && x43 - x42 * x47 >= 0 && x43 - x42 * x47 - x42 < 0 && x43 - x42 * x44 - x42 < 0 && x43 - x42 * x44 >= 0
f_181' -> f_308(x48, x49 - x50 * x48 + x51, x51) :|: x48 > 0 && x49 > -1 && x48 > x49 - x52 * x48 && x51 > 0 && x49 < 0 && x49 - x53 * x48 > -1 && x49 - x48 * x52 + x48 > 0 && x49 - x48 * x52 <= 0 && x49 - x48 * x53 + x48 > 0 && x49 - x48 * x53 <= 0 && x49 - x48 * x50 <= 0 && x49 - x48 * x50 + x48 > 0
f_181' -> f_308(x54, x55 - x56 * x54 + x57, x57) :|: x54 > 0 && x55 > -1 && x54 > x55 - x58 * x54 && x57 > 0 && x55 < 0 && x55 - x59 * x54 > -1 && x55 - x54 * x58 + x54 > 0 && x55 - x54 * x58 <= 0 && x55 - x54 * x59 + x54 > 0 && x55 - x54 * x59 <= 0 && x55 - x54 * x56 - x54 < 0 && x55 - x54 * x56 >= 0
f_181' -> f_308(x60, x61 - x62 * x60 + x63, x63) :|: x60 > 0 && x61 > -1 && x60 > x61 - x64 * x60 && x63 > 0 && x61 < 0 && x61 - x65 * x60 > -1 && x61 - x60 * x64 + x60 > 0 && x61 - x60 * x64 <= 0 && x61 - x60 * x65 >= 0 && x61 - x60 * x65 - x60 < 0 && x61 - x60 * x62 <= 0 && x61 - x60 * x62 + x60 > 0
f_181' -> f_308(x66, x67 - x68 * x66 + x69, x69) :|: x66 > 0 && x67 > -1 && x66 > x67 - x70 * x66 && x69 > 0 && x67 - x71 * x66 > -1 && x67 - x66 * x70 >= 0 && x67 < 0 && x67 - x66 * x70 - x66 < 0 && x67 - x66 * x71 + x66 > 0 && x67 - x66 * x71 <= 0 && x67 - x66 * x68 <= 0 && x67 - x66 * x68 + x66 > 0
f_181' -> f_308(x72, x73 - x74 * x72 + x75, x75) :|: x72 > 0 && x73 > -1 && x72 > x73 - x76 * x72 && x75 > 0 && x73 < 0 && x73 - x77 * x72 > -1 && x73 - x72 * x76 + x72 > 0 && x73 - x72 * x76 <= 0 && x73 - x72 * x77 >= 0 && x73 - x72 * x77 - x72 < 0 && x73 - x72 * x74 - x72 < 0 && x73 - x72 * x74 >= 0
f_181' -> f_308(x78, x79 - x80 * x78 + x81, x81) :|: x78 > 0 && x79 > -1 && x78 > x79 - x82 * x78 && x81 > 0 && x79 - x83 * x78 > -1 && x79 - x78 * x82 >= 0 && x79 < 0 && x79 - x78 * x82 - x78 < 0 && x79 - x78 * x83 + x78 > 0 && x79 - x78 * x83 <= 0 && x79 - x78 * x80 - x78 < 0 && x79 - x78 * x80 >= 0
f_181' -> f_308(x84, x85 - x86 * x84 + x87, x87) :|: x84 > 0 && x85 > -1 && x84 > x85 - x88 * x84 && x87 > 0 && x85 - x89 * x84 > -1 && x85 - x84 * x88 >= 0 && x85 - x84 * x88 - x84 < 0 && x85 - x84 * x89 >= 0 && x85 < 0 && x85 - x84 * x89 - x84 < 0 && x85 - x84 * x86 <= 0 && x85 - x84 * x86 + x84 > 0
f_181' -> f_308(x90, x91 - x92 * x90 + x93, x93) :|: x90 > 0 && x91 > -1 && x90 > x91 - x94 * x90 && x93 > 0 && x91 - x95 * x90 > -1 && x91 - x90 * x94 >= 0 && x91 - x90 * x94 - x90 < 0 && x91 - x90 * x95 >= 0 && x91 - x90 * x95 - x90 < 0 && x91 - x90 * x92 - x90 < 0 && x91 - x90 * x92 >= 0
Start term: f_181

----------------------------------------

(48) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_308_3,1)
   (f_181_3,2)
   (f_181'_3,3)

----------------------------------------

(49)
Obligation:
START: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
assume(oldX1 < oldX0);
x0 := oldX0;
x1 := oldX1 + oldX2;
x2 := oldX2;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
assume(0 = 0);
x0 := oldX3;
x1 := oldX4;
x2 := oldX5;
TO: 3;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;


----------------------------------------

(50) T2 Underapproximation (COMPLETE)
Added the following guard statements:




----------------------------------------

(51)
Obligation:
START: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
assume(x1 < x0);
x0 := x0;
x1 := x1 + x2;
x2 := x2;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
assume(0 = 0);
x0 := oldX3;
x1 := oldX4;
x2 := oldX5;
TO: 3;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;


----------------------------------------

(52) T2 Underapproximation (COMPLETE)
Added the following guard statements:




----------------------------------------

(53)
Obligation:
START: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
assume(x1 < x0);
x0 := x0;
x1 := x1 + x2;
x2 := x2;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
assume(0 = 0);
x0 := oldX3;
x1 := oldX4;
x2 := oldX5;
TO: 3;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 < 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 + oldX3 > 0 && oldX4 - oldX3 * oldX7 <= 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 + oldX3 > 0 && oldX4 - oldX3 * oldX8 <= 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 < 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 <= 0 && oldX4 - oldX3 * oldX5 + oldX3 > 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
oldX8 := nondet();
assume(oldX3 > 0 && oldX4 > -1 && oldX3 > oldX4 - oldX7 * oldX3 && oldX6 > 0 && oldX4 - oldX8 * oldX3 > -1 && oldX4 - oldX3 * oldX7 >= 0 && oldX4 - oldX3 * oldX7 - oldX3 < 0 && oldX4 - oldX3 * oldX8 >= 0 && oldX4 - oldX3 * oldX8 - oldX3 < 0 && oldX4 - oldX3 * oldX5 - oldX3 < 0 && oldX4 - oldX3 * oldX5 >= 0);
x0 := oldX3;
x1 := oldX4 - oldX5 * oldX3 + oldX6;
x2 := oldX6;
TO: 1;


----------------------------------------

(54)
Obligation:
Lasso/home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Initialization_4_NT.c:8:13: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int h = __VERIFIER_nondet_int();
            ^
1 warning generated.

line 97:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
Running Thread.stop() against 1652282371Exec. 12, LLVMLassoToIntTRS[]
Stack trace:
 
