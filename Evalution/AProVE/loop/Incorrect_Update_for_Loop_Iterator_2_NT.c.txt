timeout 900 ./AProVE.sh -m wst --bit-width 64 Incorrect_Update_for_Loop_Iterator_2_NT.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Incorrect_Update_for_Loop_Iterator_2_NT.c
MAYBE
proof of /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Update_for_Loop_Iterator_2_NT.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 75 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 276 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
    (7) SCC2IRS [SOUND, 82 ms]
    (8) IntTRS
        (9) IRS2T2 [EQUIVALENT, 0 ms]
        (10) T2IntSys
        (11) T2 [COMPLETE, 506 ms]
        (12) NO
    (13) SCC2IRS [SOUND, 0 ms]
    (14) IntTRS
        (15) IRS2T2 [EQUIVALENT, 0 ms]
        (16) T2IntSys
        (17) T2 [COMPLETE, 832 ms]
        (18) NO
(19) SymbolicExecutionGraphToLassoProof [COMPLETE, 0 ms]
(20) AND
    (21) LLVM Symbolic Execution Lasso
        (22) Lasso2IRS [SOUND, 98 ms]
        (23) IntTRS
        (24) IRS2T2 [EQUIVALENT, 0 ms]
        (25) T2IntSys
        (26) T2 [COMPLETE, 604 ms]
        (27) NO
    (28) LLVM Symbolic Execution Lasso
        (29) Lasso2IRS [SOUND, 72 ms]
        (30) IntTRS
        (31) IRS2T2 [EQUIVALENT, 0 ms]
        (32) T2IntSys
        (33) T2 [COMPLETE, 756 ms]
        (34) NO
    (35) LLVM Symbolic Execution Lasso
        (36) Lasso2IRS [SOUND, 94 ms]
        (37) IntTRS
        (38) IRS2T2 [EQUIVALENT, 0 ms]
        (39) T2IntSys
        (40) T2 [COMPLETE, 604 ms]
        (41) NO
    (42) LLVM Symbolic Execution Lasso
        (43) Lasso2IRS [SOUND, 67 ms]
        (44) IntTRS
        (45) IRS2T2 [EQUIVALENT, 0 ms]
        (46) T2IntSys
        (47) T2 [COMPLETE, 556 ms]
        (48) NO
(49) SEGraph to IRS [SOUND, 129 ms]
(50) IntTRS
    (51) IRS2T2 [EQUIVALENT, 0 ms]
    (52) T2IntSys
    (53) T2 [COMPLETE, 1054 ms]
    (54) NO


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Update_for_Loop_Iterator_2_NT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Update_for_Loop_Iterator_2_NT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_uchar" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%3 = call i32 (...)* @__VERIFIER_nondet_uchar()
		%4 = trunc i32 %3 to i8
		store %4, %2
		br %5
	5:
		%6 = load %2
		%7 = add i8 %6, -1
		store %7, %2
		%8 = icmp ne %6 0
		br %8, %9, %15
	9:
		%10 = load %2
		%11 = add i8 %10, -1
		store %11, %2
		%12 = icmp ne %10 0
		br %12, %13, %14
	13:
		br %14
	14:
		br %5
	15:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) -> f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 1 + v43 = v40
f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: v40 != 0
f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 0 = 0
f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) :|: 0 = 0
f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) -> f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 1 + v53 = v43
f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: v43 != 0
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: v43 = 0 && 1 + v53 = 0 && 0 = 0
f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 0 = 0
f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_143(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_143(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_125(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 4) :|: TRUE
f_125(v33, v34, v35, v36, v37, v38, 1, v40, v41, 0, 3, 4) -> f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) :|: 0 = 0
f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: 0 = 0
f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_147(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_147(v78, v79, v80, v81, 1, 0, -1, v85, 3, 4) -> f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) :|: 0 = 0
f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) -> f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: 0 = 0
f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: TRUE
f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: 0 = 0
f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: TRUE
f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_143(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -1 && v53:0 < -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -1 && v53:0 < -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -1 && v53:0 > -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -1
f_126(v33:0, v34:0, v35:0, v36:0, 1, v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, -3, -2, 1, v41:0, 0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_126(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) -> f_126(x5)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 > -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 > -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 > -1 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(cons_1) -> f_126(-3) :|: TRUE && cons_1 = 1

----------------------------------------

(8)
Obligation:
Rules:
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(x) -> f_126(x1) :|: x1 > -1 && x1 < -2 && x = 1 + (1 + x1)
f_126(x2) -> f_126(x3) :|: x3 < -1 && x3 > -2 && x2 = 1 + (1 + x3)
f_126(x4) -> f_126(x5) :|: x5 > -1 && x4 = 1 + (1 + x5)
f_126(cons_1) -> f_126(-3) :|: TRUE && cons_1 = 1

----------------------------------------

(9) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_126_1,1)

----------------------------------------

(10)
Obligation:
START: 0;

FROM: 0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 < -1 && oldX1 < -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 > -1 && oldX1 < -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 < -1 && oldX1 > -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 > -1 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 1;
oldX0 := x0;
assume(0 = 0 && oldX0 = 1);
x0 := -3;
TO: 1;


----------------------------------------

(11) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 5: 0 <= 0 and x0+1 <= 0 and x0 <= 0

----------------------------------------

(12)
NO

----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) -> f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 1 + v43 = v40
f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: v40 != 0
f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 0 = 0
f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) :|: 0 = 0
f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) -> f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 1 + v53 = v43
f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: v43 != 0
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: v43 = 0 && 1 + v53 = 0 && 0 = 0
f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 0 = 0
f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_143(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 2 + v40 <= v36 && 1 <= v33 && 1 <= v34 && 4 <= v41 && v33 <= v41 && 0 <= 0
f_143(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_125(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 4) :|: 1 + v60 <= v58 && 1 <= v55 && 1 <= v56 && 4 <= v63 && v55 <= v63 && 0 <= 0
f_125(v33, v34, v35, v36, v37, v38, 1, v40, v41, 0, 3, 4) -> f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) :|: 0 = 0
f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: 0 = 0
f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_147(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: 1 <= v33 && 1 <= v34 && 1 <= v36 && 4 <= v41 && v33 <= v41 && 0 <= 0
f_147(v78, v79, v80, v81, 1, 0, -1, v85, 3, 4) -> f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) :|: 0 = 0
f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) -> f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: 0 = 0
f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: TRUE
f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: 0 = 0
f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: TRUE
f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_143(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 2, 4) :|: 2 + -1 <= v81 && 1 <= v78 && 1 <= v79 && 4 <= v85 && v78 <= v85 && 0 <= 0
Combined rules. Obtained 5 rulesP rules:
f_126(v33:0, v34:0, v35:0, v36:0, 1, v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, -3, -2, 1, v41:0, 0, 3, 4) :|: v36:0 > 0 && v34:0 > 0 && v33:0 > 0 && v41:0 > 3 && v41:0 >= v33:0
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -2 && v33:0 > 0 && v36:0 >= 2 + (1 + (1 + v53:0)) && v34:0 > 0 && v41:0 > 3 && v53:0 < -1 && v36:0 >= 1 + (1 + v53:0) && v41:0 >= v33:0
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -2 && v33:0 > 0 && v36:0 >= 2 + (1 + (1 + v53:0)) && v34:0 > 0 && v41:0 > 3 && v53:0 > -1 && v36:0 >= 1 + (1 + v53:0) && v41:0 >= v33:0
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -2 && v33:0 > 0 && v36:0 >= 2 + (1 + (1 + v53:0)) && v34:0 > 0 && v41:0 > 3 && v53:0 < -1 && v36:0 >= 1 + (1 + v53:0) && v41:0 >= v33:0
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -1 && v33:0 > 0 && v36:0 >= 2 + (1 + (1 + v53:0)) && v34:0 > 0 && v41:0 > 3 && v36:0 >= 1 + (1 + v53:0) && v41:0 >= v33:0
Filtered unneeded arguments:
   f_126(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) -> f_126(x1, x2, x4, x5, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_126(v33:0, v34:0, v36:0, cons_1, v41:0) -> f_126(v33:0, v34:0, v36:0, -3, v41:0) :|: v34:0 > 0 && v36:0 > 0 && v33:0 > 0 && v41:0 >= v33:0 && v41:0 > 3 && cons_1 = 1
f_126(v33:0, v34:0, v36:0, sum~cons_1~sum~cons_1~v53:0, v41:0) -> f_126(v33:0, v34:0, v36:0, v53:0, v41:0) :|: v33:0 > 0 && v53:0 < -2 && v36:0 >= 2 + (1 + (1 + v53:0)) && v34:0 > 0 && v41:0 > 3 && v53:0 < -1 && v41:0 >= v33:0 && v36:0 >= 1 + (1 + v53:0) && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(v33:0, v34:0, v36:0, sum~cons_1~sum~cons_1~v53:0, v41:0) -> f_126(v33:0, v34:0, v36:0, v53:0, v41:0) :|: v33:0 > 0 && v53:0 < -2 && v36:0 >= 2 + (1 + (1 + v53:0)) && v34:0 > 0 && v41:0 > 3 && v53:0 > -1 && v41:0 >= v33:0 && v36:0 >= 1 + (1 + v53:0) && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(v33:0, v34:0, v36:0, sum~cons_1~sum~cons_1~v53:0, v41:0) -> f_126(v33:0, v34:0, v36:0, v53:0, v41:0) :|: v33:0 > 0 && v53:0 > -2 && v36:0 >= 2 + (1 + (1 + v53:0)) && v34:0 > 0 && v41:0 > 3 && v53:0 < -1 && v41:0 >= v33:0 && v36:0 >= 1 + (1 + v53:0) && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(v33:0, v34:0, v36:0, sum~cons_1~sum~cons_1~v53:0, v41:0) -> f_126(v33:0, v34:0, v36:0, v53:0, v41:0) :|: v33:0 > 0 && v53:0 > -1 && v36:0 >= 2 + (1 + (1 + v53:0)) && v34:0 > 0 && v41:0 > 3 && v41:0 >= v33:0 && v36:0 >= 1 + (1 + v53:0) && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)

----------------------------------------

(14)
Obligation:
Rules:
f_126(v33:0, v34:0, v36:0, cons_1, v41:0) -> f_126(v33:0, v34:0, v36:0, -3, v41:0) :|: v34:0 > 0 && v36:0 > 0 && v33:0 > 0 && v41:0 >= v33:0 && v41:0 > 3 && cons_1 = 1
f_126(x, x1, x2, x3, x4) -> f_126(x, x1, x2, x5, x4) :|: x > 0 && x5 < -2 && x2 >= 2 + (1 + (1 + x5)) && x1 > 0 && x4 > 3 && x5 < -1 && x4 >= x && x2 >= 1 + (1 + x5) && x3 = 1 + (1 + x5)
f_126(x6, x7, x8, x9, x10) -> f_126(x6, x7, x8, x11, x10) :|: x6 > 0 && x11 < -2 && x8 >= 2 + (1 + (1 + x11)) && x7 > 0 && x10 > 3 && x11 > -1 && x10 >= x6 && x8 >= 1 + (1 + x11) && x9 = 1 + (1 + x11)
f_126(x12, x13, x14, x15, x16) -> f_126(x12, x13, x14, x17, x16) :|: x12 > 0 && x17 > -2 && x14 >= 2 + (1 + (1 + x17)) && x13 > 0 && x16 > 3 && x17 < -1 && x16 >= x12 && x14 >= 1 + (1 + x17) && x15 = 1 + (1 + x17)
f_126(x18, x19, x20, x21, x22) -> f_126(x18, x19, x20, x23, x22) :|: x18 > 0 && x23 > -1 && x20 >= 2 + (1 + (1 + x23)) && x19 > 0 && x22 > 3 && x22 >= x18 && x20 >= 1 + (1 + x23) && x21 = 1 + (1 + x23)

----------------------------------------

(15) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_126_5,1)

----------------------------------------

(16)
Obligation:
START: 0;

FROM: 0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
assume(oldX1 > 0 && oldX2 > 0 && oldX0 > 0 && oldX4 >= oldX0 && oldX4 > 3 && oldX3 = 1);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := -3;
x4 := oldX4;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := oldX3 - 2;
assume(oldX0 > 0 && oldX5 < -2 && oldX2 >= 2 + (1 + (1 + oldX5)) && oldX1 > 0 && oldX4 > 3 && oldX5 < -1 && oldX4 >= oldX0 && oldX2 >= 1 + (1 + oldX5) && oldX3 = 1 + (1 + oldX5));
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX3 - 2;
x4 := oldX4;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := oldX3 - 2;
assume(oldX0 > 0 && oldX5 < -2 && oldX2 >= 2 + (1 + (1 + oldX5)) && oldX1 > 0 && oldX4 > 3 && oldX5 > -1 && oldX4 >= oldX0 && oldX2 >= 1 + (1 + oldX5) && oldX3 = 1 + (1 + oldX5));
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX3 - 2;
x4 := oldX4;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := oldX3 - 2;
assume(oldX0 > 0 && oldX5 > -2 && oldX2 >= 2 + (1 + (1 + oldX5)) && oldX1 > 0 && oldX4 > 3 && oldX5 < -1 && oldX4 >= oldX0 && oldX2 >= 1 + (1 + oldX5) && oldX3 = 1 + (1 + oldX5));
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX3 - 2;
x4 := oldX4;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := oldX3 - 2;
assume(oldX0 > 0 && oldX5 > -1 && oldX2 >= 2 + (1 + (1 + oldX5)) && oldX1 > 0 && oldX4 > 3 && oldX4 >= oldX0 && oldX2 >= 1 + (1 + oldX5) && oldX3 = 1 + (1 + oldX5));
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX3 - 2;
x4 := oldX4;
TO: 1;


----------------------------------------

(17) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 5: 0 <= 0 and -x0+1 <= 0 and -x1+1 <= 0 and x3+1 <= 0 and x3-x2+2 <= 0 and -x4+4 <= 0 and -x4+x0 <= 0 and x3-x2 <= 0 and x3 <= 0

----------------------------------------

(18)
NO

----------------------------------------

(19) SymbolicExecutionGraphToLassoProof (COMPLETE)
Converted SEGraph to 4 dependent lassos.
----------------------------------------

(20)
Complex Obligation (AND)

----------------------------------------

(21)
Obligation:
Lasso
----------------------------------------

(22) Lasso2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 54 rulesP rules:
f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) -> f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 1 + v43 = v40
f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: v40 != 0
f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 0 = 0
f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) :|: 0 = 0
f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) -> f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 1 + v53 = v43
f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: v43 != 0
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: v43 = 0 && 1 + v53 = 0 && 0 = 0
f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 0 = 0
f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_143(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_143(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_125(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 4) :|: TRUE
f_125(v33, v34, v35, v36, v37, v38, 1, v40, v41, 0, 3, 4) -> f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) :|: 0 = 0
f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: 0 = 0
f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_147(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_147(v78, v79, v80, v81, 1, 0, -1, v85, 3, 4) -> f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) :|: 0 = 0
f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) -> f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: 0 = 0
f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: TRUE
f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: 0 = 0
f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: TRUE
f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_143(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 2, 4) :|: TRUE
f_67 -> f_68(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_68(v1, v2, 3, 1, 4) -> f_69(v1, v3, v2, 3, 1, 4, 0) :|: 1 <= v3
f_69(v1, v3, v2, 3, 1, 4, 0) -> f_70(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_70(v1, v3, v2, 0, 3, 1, 4) -> f_71(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_71(v1, v3, v2, 0, 3, 1, 4) -> f_72(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_72(v1, v3, v4, v2, 0, 3, 1, 4) -> f_73(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_73(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_74(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_74(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_75(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_75(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_76(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: 0 = 0
f_76(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_77(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: 1 + v7 = v5
f_77(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_78(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: TRUE
f_78(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_79(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: v5 != 0
f_79(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_81(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: 0 = 0
f_81(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_83(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: TRUE
f_83(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_85(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: 0 = 0
f_85(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_86(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: 1 + v9 = v7
f_86(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_87(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_87(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_89(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: v7 = 0 && 1 + v9 = 0 && 0 = 0
f_89(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_91(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: 0 = 0
f_91(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_93(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: TRUE
f_93(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_95(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: TRUE
f_95(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_147(v1, v3, v4, 1, 1, 0, -1, v2, 3, 4) :|: TRUE
Combined rules. Obtained 7 rulesP rules:
f_67 -> f_126(v1:0, v3:0, v4:0, 1, -3, -2, 1, v2:0, 0, 3, 4) :|: FALSE
f_67 -> f_126(v1:0, v3:0, v4:0, 1, -3, -2, 1, 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -1 && v53:0 < -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -1 && v53:0 < -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -1 && v53:0 > -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -1
f_126(v33:0, v34:0, v35:0, v36:0, 1, v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, -3, -2, 1, v41:0, 0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_126(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) -> f_126(x5)
Removed division, modulo operations, cleaned up constraints. Obtained 7 rules.P rules:
f_67 -> f_126(-3) :|: FALSE
f_67 -> f_126(-3) :|: TRUE
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 > -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 > -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 > -1 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(cons_1) -> f_126(-3) :|: TRUE && cons_1 = 1

----------------------------------------

(23)
Obligation:
Rules:
f_67 -> f_126(-3) :|: FALSE
f_67 -> f_126(-3) :|: TRUE
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(x) -> f_126(x1) :|: x1 > -1 && x1 < -2 && x = 1 + (1 + x1)
f_126(x2) -> f_126(x3) :|: x3 < -1 && x3 > -2 && x2 = 1 + (1 + x3)
f_126(x4) -> f_126(x5) :|: x5 > -1 && x4 = 1 + (1 + x5)
f_126(cons_1) -> f_126(-3) :|: TRUE && cons_1 = 1
Start term: f_67

----------------------------------------

(24) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_67_1,1)
   (f_126_1,2)

----------------------------------------

(25)
Obligation:
START: 1;

FROM: 1;
oldX0 := x0;
assume(0 = 1);
x0 := -3;
TO: 2;

FROM: 1;
oldX0 := x0;
assume(0 = 0);
x0 := -3;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 < -1 && oldX1 < -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 > -1 && oldX1 < -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 < -1 && oldX1 > -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 > -1 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 2;

FROM: 2;
oldX0 := x0;
assume(0 = 0 && oldX0 = 1);
x0 := -3;
TO: 2;


----------------------------------------

(26) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 5: x0 <= -3 and x0+1 <= 0 and x0 <= 0

----------------------------------------

(27)
NO

----------------------------------------

(28)
Obligation:
Lasso
----------------------------------------

(29) Lasso2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 55 rulesP rules:
f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) -> f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 1 + v43 = v40
f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: v40 != 0
f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 0 = 0
f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) :|: 0 = 0
f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) -> f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 1 + v53 = v43
f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: v43 != 0
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: v43 = 0 && 1 + v53 = 0 && 0 = 0
f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 0 = 0
f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_143(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_143(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_125(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 4) :|: TRUE
f_125(v33, v34, v35, v36, v37, v38, 1, v40, v41, 0, 3, 4) -> f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) :|: 0 = 0
f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: 0 = 0
f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_147(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_147(v78, v79, v80, v81, 1, 0, -1, v85, 3, 4) -> f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) :|: 0 = 0
f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) -> f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: 0 = 0
f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: TRUE
f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: 0 = 0
f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: TRUE
f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_143(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 2, 4) :|: TRUE
f_67 -> f_68(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_68(v1, v2, 3, 1, 4) -> f_69(v1, v3, v2, 3, 1, 4, 0) :|: 1 <= v3
f_69(v1, v3, v2, 3, 1, 4, 0) -> f_70(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_70(v1, v3, v2, 0, 3, 1, 4) -> f_71(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_71(v1, v3, v2, 0, 3, 1, 4) -> f_72(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_72(v1, v3, v4, v2, 0, 3, 1, 4) -> f_73(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_73(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_74(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_74(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_75(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_75(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_76(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: 0 = 0
f_76(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_77(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: 1 + v7 = v5
f_77(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_78(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: TRUE
f_78(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_79(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: v5 != 0
f_79(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_81(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: 0 = 0
f_81(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_83(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: TRUE
f_83(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_85(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: 0 = 0
f_85(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_86(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: 1 + v9 = v7
f_86(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_87(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_87(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_88(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: v7 != 0
f_88(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_90(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: 0 = 0
f_90(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_92(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_92(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_94(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_94(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_96(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_96(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_125(v1, v3, v4, v5, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
Combined rules. Obtained 9 rulesP rules:
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -1 && v53:0 < -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -1 && v53:0 < -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -1 && v53:0 > -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -1
f_67 -> f_126(v1:0, v3:0, v4:0, 1 + (1 + v9:0), v9:0, 1 + v9:0, 1, 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v9:0 < -1 && v9:0 < -2
f_67 -> f_126(v1:0, v3:0, v4:0, 1 + (1 + v9:0), v9:0, 1 + v9:0, 1, 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v9:0 > -1 && v9:0 < -2
f_67 -> f_126(v1:0, v3:0, v4:0, 1 + (1 + v9:0), v9:0, 1 + v9:0, 1, 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v9:0 < -1 && v9:0 > -2
f_67 -> f_126(v1:0, v3:0, v4:0, 1 + (1 + v9:0), v9:0, 1 + v9:0, 1, 3 + v1:0, 0, 3, 4) :|: v9:0 > -1 && v1:0 > 0 && v3:0 > 0
f_126(v33:0, v34:0, v35:0, v36:0, 1, v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, -3, -2, 1, v41:0, 0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_126(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) -> f_126(x5)
Removed division, modulo operations, cleaned up constraints. Obtained 9 rules.P rules:
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 > -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 > -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 > -1 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_67 -> f_126(v9:0) :|: v9:0 < -1 && v9:0 < -2
f_67 -> f_126(v9:0) :|: v9:0 > -1 && v9:0 < -2
f_67 -> f_126(v9:0) :|: v9:0 < -1 && v9:0 > -2
f_67 -> f_126(v9:0) :|: v9:0 > -1
f_126(cons_1) -> f_126(-3) :|: TRUE && cons_1 = 1

----------------------------------------

(30)
Obligation:
Rules:
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(x) -> f_126(x1) :|: x1 > -1 && x1 < -2 && x = 1 + (1 + x1)
f_126(x2) -> f_126(x3) :|: x3 < -1 && x3 > -2 && x2 = 1 + (1 + x3)
f_126(x4) -> f_126(x5) :|: x5 > -1 && x4 = 1 + (1 + x5)
f_67 -> f_126(v9:0) :|: v9:0 < -1 && v9:0 < -2
f_67 -> f_126(x6) :|: x6 > -1 && x6 < -2
f_67 -> f_126(x7) :|: x7 < -1 && x7 > -2
f_67 -> f_126(x8) :|: x8 > -1
f_126(cons_1) -> f_126(-3) :|: TRUE && cons_1 = 1
Start term: f_67

----------------------------------------

(31) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_126_1,1)
   (f_67_1,2)

----------------------------------------

(32)
Obligation:
START: 2;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 < -1 && oldX1 < -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 > -1 && oldX1 < -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 < -1 && oldX1 > -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 > -1 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := nondet();
assume(oldX1 < -1 && oldX1 < -2);
x0 := oldX1;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := nondet();
assume(oldX1 > -1 && oldX1 < -2);
x0 := oldX1;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := nondet();
assume(oldX1 < -1 && oldX1 > -2);
x0 := oldX1;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := nondet();
assume(oldX1 > -1);
x0 := oldX1;
TO: 1;

FROM: 1;
oldX0 := x0;
assume(0 = 0 && oldX0 = 1);
x0 := -3;
TO: 1;


----------------------------------------

(33) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 5: oldX1 <= -3 and x0 <= -3 and x0-oldX1 <= 0 and oldX1+x0 <= -6 and x0+1 <= 0 and x0 <= 0

----------------------------------------

(34)
NO

----------------------------------------

(35)
Obligation:
Lasso
----------------------------------------

(36) Lasso2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 54 rulesP rules:
f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) -> f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 1 + v43 = v40
f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: v40 != 0
f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 0 = 0
f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) :|: 0 = 0
f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) -> f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 1 + v53 = v43
f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: v43 != 0
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: v43 = 0 && 1 + v53 = 0 && 0 = 0
f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 0 = 0
f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_143(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_143(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_125(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 4) :|: TRUE
f_125(v33, v34, v35, v36, v37, v38, 1, v40, v41, 0, 3, 4) -> f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) :|: 0 = 0
f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: 0 = 0
f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_147(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_147(v78, v79, v80, v81, 1, 0, -1, v85, 3, 4) -> f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) :|: 0 = 0
f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) -> f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: 0 = 0
f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: TRUE
f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: 0 = 0
f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: TRUE
f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_143(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 2, 4) :|: TRUE
f_67 -> f_68(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_68(v1, v2, 3, 1, 4) -> f_69(v1, v3, v2, 3, 1, 4, 0) :|: 1 <= v3
f_69(v1, v3, v2, 3, 1, 4, 0) -> f_70(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_70(v1, v3, v2, 0, 3, 1, 4) -> f_71(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_71(v1, v3, v2, 0, 3, 1, 4) -> f_72(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_72(v1, v3, v4, v2, 0, 3, 1, 4) -> f_73(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_73(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_74(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_74(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_75(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_75(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_76(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: 0 = 0
f_76(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_77(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: 1 + v7 = v5
f_77(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_78(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: TRUE
f_78(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_79(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: v5 != 0
f_79(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_81(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: 0 = 0
f_81(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_83(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: TRUE
f_83(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_85(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: 0 = 0
f_85(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_86(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: 1 + v9 = v7
f_86(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_87(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_87(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_89(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: v7 = 0 && 1 + v9 = 0 && 0 = 0
f_89(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_91(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: 0 = 0
f_91(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_93(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: TRUE
f_93(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_95(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: TRUE
f_95(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_147(v1, v3, v4, 1, 1, 0, -1, v2, 3, 4) :|: TRUE
Combined rules. Obtained 7 rulesP rules:
f_67 -> f_126(v1:0, v3:0, v4:0, 1, -3, -2, 1, v2:0, 0, 3, 4) :|: FALSE
f_67 -> f_126(v1:0, v3:0, v4:0, 1, -3, -2, 1, 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -1 && v53:0 < -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -1 && v53:0 < -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -1 && v53:0 > -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -1
f_126(v33:0, v34:0, v35:0, v36:0, 1, v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, -3, -2, 1, v41:0, 0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_126(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) -> f_126(x5)
Removed division, modulo operations, cleaned up constraints. Obtained 7 rules.P rules:
f_67 -> f_126(-3) :|: FALSE
f_67 -> f_126(-3) :|: TRUE
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 > -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 > -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 > -1 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(cons_1) -> f_126(-3) :|: TRUE && cons_1 = 1

----------------------------------------

(37)
Obligation:
Rules:
f_67 -> f_126(-3) :|: FALSE
f_67 -> f_126(-3) :|: TRUE
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(x) -> f_126(x1) :|: x1 > -1 && x1 < -2 && x = 1 + (1 + x1)
f_126(x2) -> f_126(x3) :|: x3 < -1 && x3 > -2 && x2 = 1 + (1 + x3)
f_126(x4) -> f_126(x5) :|: x5 > -1 && x4 = 1 + (1 + x5)
f_126(cons_1) -> f_126(-3) :|: TRUE && cons_1 = 1
Start term: f_67

----------------------------------------

(38) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_67_1,1)
   (f_126_1,2)

----------------------------------------

(39)
Obligation:
START: 1;

FROM: 1;
oldX0 := x0;
assume(0 = 1);
x0 := -3;
TO: 2;

FROM: 1;
oldX0 := x0;
assume(0 = 0);
x0 := -3;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 < -1 && oldX1 < -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 > -1 && oldX1 < -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 < -1 && oldX1 > -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 > -1 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 2;

FROM: 2;
oldX0 := x0;
assume(0 = 0 && oldX0 = 1);
x0 := -3;
TO: 2;


----------------------------------------

(40) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 5: x0 <= -3 and x0+1 <= 0 and x0 <= 0

----------------------------------------

(41)
NO

----------------------------------------

(42)
Obligation:
Lasso
----------------------------------------

(43) Lasso2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 55 rulesP rules:
f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) -> f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 1 + v43 = v40
f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: v40 != 0
f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 0 = 0
f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) :|: 0 = 0
f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) -> f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 1 + v53 = v43
f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: v43 != 0
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: v43 = 0 && 1 + v53 = 0 && 0 = 0
f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 0 = 0
f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_143(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_143(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_125(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 4) :|: TRUE
f_125(v33, v34, v35, v36, v37, v38, 1, v40, v41, 0, 3, 4) -> f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) :|: 0 = 0
f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: 0 = 0
f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_147(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_147(v78, v79, v80, v81, 1, 0, -1, v85, 3, 4) -> f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) :|: 0 = 0
f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) -> f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: 0 = 0
f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: TRUE
f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: 0 = 0
f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: TRUE
f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_143(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 2, 4) :|: TRUE
f_67 -> f_68(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_68(v1, v2, 3, 1, 4) -> f_69(v1, v3, v2, 3, 1, 4, 0) :|: 1 <= v3
f_69(v1, v3, v2, 3, 1, 4, 0) -> f_70(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_70(v1, v3, v2, 0, 3, 1, 4) -> f_71(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_71(v1, v3, v2, 0, 3, 1, 4) -> f_72(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_72(v1, v3, v4, v2, 0, 3, 1, 4) -> f_73(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_73(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_74(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_74(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_75(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_75(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_76(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: 0 = 0
f_76(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_77(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: 1 + v7 = v5
f_77(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_78(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: TRUE
f_78(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_79(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: v5 != 0
f_79(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_81(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: 0 = 0
f_81(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_83(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: TRUE
f_83(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_85(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: 0 = 0
f_85(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_86(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: 1 + v9 = v7
f_86(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_87(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_87(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_88(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: v7 != 0
f_88(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_90(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: 0 = 0
f_90(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_92(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_92(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_94(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_94(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_96(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_96(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_125(v1, v3, v4, v5, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
Combined rules. Obtained 9 rulesP rules:
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -1 && v53:0 < -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -1 && v53:0 < -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 < -1 && v53:0 > -2
f_126(v33:0, v34:0, v35:0, v36:0, 1 + (1 + v53:0), v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, v53:0, 1 + v53:0, 1, v41:0, 0, 3, 4) :|: v53:0 > -1
f_67 -> f_126(v1:0, v3:0, v4:0, 1 + (1 + v9:0), v9:0, 1 + v9:0, 1, 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v9:0 < -1 && v9:0 < -2
f_67 -> f_126(v1:0, v3:0, v4:0, 1 + (1 + v9:0), v9:0, 1 + v9:0, 1, 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v9:0 > -1 && v9:0 < -2
f_67 -> f_126(v1:0, v3:0, v4:0, 1 + (1 + v9:0), v9:0, 1 + v9:0, 1, 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v9:0 < -1 && v9:0 > -2
f_67 -> f_126(v1:0, v3:0, v4:0, 1 + (1 + v9:0), v9:0, 1 + v9:0, 1, 3 + v1:0, 0, 3, 4) :|: v9:0 > -1 && v1:0 > 0 && v3:0 > 0
f_126(v33:0, v34:0, v35:0, v36:0, 1, v38:0, 1, v41:0, 0, 3, 4) -> f_126(v33:0, v34:0, v35:0, v36:0, -3, -2, 1, v41:0, 0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_126(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) -> f_126(x5)
Removed division, modulo operations, cleaned up constraints. Obtained 9 rules.P rules:
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 > -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 > -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 > -1 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_67 -> f_126(v9:0) :|: v9:0 < -1 && v9:0 < -2
f_67 -> f_126(v9:0) :|: v9:0 > -1 && v9:0 < -2
f_67 -> f_126(v9:0) :|: v9:0 < -1 && v9:0 > -2
f_67 -> f_126(v9:0) :|: v9:0 > -1
f_126(cons_1) -> f_126(-3) :|: TRUE && cons_1 = 1

----------------------------------------

(44)
Obligation:
Rules:
f_126(sum~cons_1~sum~cons_1~v53:0) -> f_126(v53:0) :|: v53:0 < -1 && v53:0 < -2 && sum~cons_1~sum~cons_1~v53:0 = 1 + (1 + v53:0)
f_126(x) -> f_126(x1) :|: x1 > -1 && x1 < -2 && x = 1 + (1 + x1)
f_126(x2) -> f_126(x3) :|: x3 < -1 && x3 > -2 && x2 = 1 + (1 + x3)
f_126(x4) -> f_126(x5) :|: x5 > -1 && x4 = 1 + (1 + x5)
f_67 -> f_126(v9:0) :|: v9:0 < -1 && v9:0 < -2
f_67 -> f_126(x6) :|: x6 > -1 && x6 < -2
f_67 -> f_126(x7) :|: x7 < -1 && x7 > -2
f_67 -> f_126(x8) :|: x8 > -1
f_126(cons_1) -> f_126(-3) :|: TRUE && cons_1 = 1
Start term: f_67

----------------------------------------

(45) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_126_1,1)
   (f_67_1,2)

----------------------------------------

(46)
Obligation:
START: 2;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 < -1 && oldX1 < -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 > -1 && oldX1 < -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 < -1 && oldX1 > -2 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := oldX0 - 2;
assume(oldX1 > -1 && oldX0 = 1 + (1 + oldX1));
x0 := oldX0 - 2;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := nondet();
assume(oldX1 < -1 && oldX1 < -2);
x0 := oldX1;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := nondet();
assume(oldX1 > -1 && oldX1 < -2);
x0 := oldX1;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := nondet();
assume(oldX1 < -1 && oldX1 > -2);
x0 := oldX1;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := nondet();
assume(oldX1 > -1);
x0 := oldX1;
TO: 1;

FROM: 1;
oldX0 := x0;
assume(0 = 0 && oldX0 = 1);
x0 := -3;
TO: 1;


----------------------------------------

(47) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 5: oldX1 <= -3 and x0 <= -3 and x0-oldX1 <= 0 and oldX1+x0 <= -6 and x0+1 <= 0 and x0 <= 0

----------------------------------------

(48)
NO

----------------------------------------

(49) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 66 rulesP rules:
f_67 -> f_68(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_68(v1, v2, 3, 1, 4) -> f_69(v1, v3, v2, 3, 1, 4, 0) :|: 1 <= v3
f_69(v1, v3, v2, 3, 1, 4, 0) -> f_70(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_70(v1, v3, v2, 0, 3, 1, 4) -> f_71(v1, v3, v2, 0, 3, 1, 4) :|: TRUE
f_71(v1, v3, v2, 0, 3, 1, 4) -> f_72(v1, v3, v4, v2, 0, 3, 1, 4) :|: TRUE
f_72(v1, v3, v4, v2, 0, 3, 1, 4) -> f_73(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_73(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_74(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_74(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_75(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: TRUE
f_75(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_76(v1, v3, v4, v5, v2, 0, 3, 1, 4) :|: 0 = 0
f_76(v1, v3, v4, v5, v2, 0, 3, 1, 4) -> f_77(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: 1 + v7 = v5
f_77(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_78(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: TRUE
f_78(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_79(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) :|: v5 != 0
f_78(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_80(v1, v3, v4, 0, -1, v2, 3, 1, 4) :|: v5 = 0 && 1 + v7 = 0 && 0 = 0
f_79(v1, v3, v4, v5, v7, v2, 0, 3, 1, 4) -> f_81(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: 0 = 0
f_80(v1, v3, v4, 0, -1, v2, 3, 1, 4) -> f_82(v1, v3, v4, 0, -1, v2, 3, 1, 4) :|: 0 = 0
f_81(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_83(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: TRUE
f_82(v1, v3, v4, 0, -1, v2, 3, 1, 4) -> f_84(v1, v3, v4, 0, -1, v2, 3, 1, 4) :|: TRUE
f_83(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_85(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) :|: 0 = 0
f_85(v1, v3, v4, v5, v7, 1, v2, 0, 3, 4) -> f_86(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: 1 + v9 = v7
f_86(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_87(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_87(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_88(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: v7 != 0
f_87(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_89(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: v7 = 0 && 1 + v9 = 0 && 0 = 0
f_88(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_90(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: 0 = 0
f_89(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_91(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: 0 = 0
f_90(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_92(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_91(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_93(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: TRUE
f_92(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_94(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_93(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_95(v1, v3, v4, 1, 0, -1, v2, 3, 4) :|: TRUE
f_94(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_96(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_95(v1, v3, v4, 1, 0, -1, v2, 3, 4) -> f_147(v1, v3, v4, 1, 1, 0, -1, v2, 3, 4) :|: TRUE
f_96(v1, v3, v4, v5, v7, 1, v9, v2, 0, 3, 4) -> f_125(v1, v3, v4, v5, v5, v7, 1, v9, v2, 0, 3, 4) :|: TRUE
f_125(v33, v34, v35, v36, v37, v38, 1, v40, v41, 0, 3, 4) -> f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) :|: 0 = 0
f_126(v33, v34, v35, v36, v40, v38, 1, v41, 0, 3, 4) -> f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 1 + v43 = v40
f_127(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: v40 != 0
f_128(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_130(v33, v34, v35, v36, 0, -1, 1, v41, 3, 2, 4) :|: v40 = 0 && 1 + v43 = 0 && 0 = 0
f_129(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: 0 = 0
f_130(v33, v34, v35, v36, 0, -1, 1, v41, 3, 2, 4) -> f_132(v33, v34, v35, v36, 0, -1, 1, v41, 3, 2, 4) :|: 0 = 0
f_131(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) :|: TRUE
f_132(v33, v34, v35, v36, 0, -1, 1, v41, 3, 2, 4) -> f_134(v33, v34, v35, v36, 0, -1, 1, v41, 3, 2, 4) :|: TRUE
f_133(v33, v34, v35, v36, v40, v43, 1, v38, v41, 0, 3, 4) -> f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) :|: 0 = 0
f_135(v33, v34, v35, v36, v40, v43, 1, v41, 0, 3, 2, 4) -> f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 1 + v53 = v43
f_136(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: v43 != 0
f_137(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: v43 = 0 && 1 + v53 = 0 && 0 = 0
f_138(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: 0 = 0
f_139(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: 0 = 0
f_140(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_141(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_142(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) -> f_143(v33, v34, v35, v36, v40, v43, 1, v53, v41, 0, 3, 2, 4) :|: TRUE
f_143(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_144(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_145(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) :|: TRUE
f_146(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) -> f_147(v33, v34, v35, v36, 1, 0, -1, v41, 3, 4) :|: TRUE
f_147(v78, v79, v80, v81, 1, 0, -1, v85, 3, 4) -> f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) :|: 0 = 0
f_148(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 2, 4) -> f_125(v55, v56, v57, v58, v59, v60, 1, v62, v63, 0, 3, 4) :|: TRUE
f_149(v78, v79, v80, v81, -1, 0, 1, v85, 3, 4) -> f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_150(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_151(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_152(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: TRUE
f_153(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) :|: 0 = 0
f_154(v78, v79, v80, v81, -1, -2, 1, 0, v85, 3, 4) -> f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: 0 = 0
f_155(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) :|: TRUE
f_156(v78, v79, v80, v81, -1, -2, 1, -3, 0, v85, 3, 4) -> f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: 0 = 0
f_157(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) :|: TRUE
f_158(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 4) -> f_143(v78, v79, v80, v81, -1, -2, 1, -3, v85, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 14 rulesP rules:
f_128(v33:0, v34:0, v35:0, v36:0, v40:0, 0, 1, v38:0, v41:0, 0, 3, 4) -> f_128(v33:0, v34:0, v35:0, v36:0, -3, -4, 1, -2, v41:0, 0, 3, 4) :|: v40:0 < 0
f_128(v33:0, v34:0, v35:0, v36:0, v40:0, 0, 1, v38:0, v41:0, 0, 3, 4) -> f_128(v33:0, v34:0, v35:0, v36:0, -3, -4, 1, -2, v41:0, 0, 3, 4) :|: v40:0 > 0
f_67 -> f_128(v1:0, v3:0, v4:0, 1, -3, v43:0, 1, -2, v2:0, 0, 3, 4) :|: FALSE
f_67 -> f_128(v1:0, v3:0, v4:0, 1, -3, -4, 1, -2, 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0
f_128(v33:0, v34:0, v35:0, v36:0, 0, -1, 1, v38:0, v41:0, 0, 3, 4) -> f_134(v33:0, v34:0, v35:0, v36:0, 0, -1, 1, v41:0, 3, 2, 4) :|: TRUE
f_67 -> f_128(v1:0, v3:0, v4:0, 1 + (1 + (1 + v43:0)), 1 + v43:0, v43:0, 1, 1 + (1 + v43:0), 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v43:0 < -2 && v43:0 < -3
f_67 -> f_128(v1:0, v3:0, v4:0, 1 + (1 + (1 + v43:0)), 1 + v43:0, v43:0, 1, 1 + (1 + v43:0), 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v43:0 > -2 && v43:0 < -3
f_67 -> f_128(v1:0, v3:0, v4:0, 1 + (1 + (1 + v43:0)), 1 + v43:0, v43:0, 1, 1 + (1 + v43:0), 3 + v1:0, 0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v43:0 < -2 && v43:0 > -3
f_67 -> f_128(v1:0, v3:0, v4:0, 1 + (1 + (1 + v43:0)), 1 + v43:0, v43:0, 1, 1 + (1 + v43:0), 3 + v1:0, 0, 3, 4) :|: v43:0 > -2 && v1:0 > 0 && v3:0 > 0
f_128(v33:0, v34:0, v35:0, v36:0, v40:0, 1 + (1 + v43:1), 1, v38:0, v41:0, 0, 3, 4) -> f_128(v33:0, v34:0, v35:0, v36:0, 1 + v43:1, v43:1, 1, 1 + (1 + v43:1), v41:0, 0, 3, 4) :|: v43:1 < -2 && v40:0 < 0
f_128(v33:0, v34:0, v35:0, v36:0, v40:0, 1 + (1 + v43:1), 1, v38:0, v41:0, 0, 3, 4) -> f_128(v33:0, v34:0, v35:0, v36:0, 1 + v43:1, v43:1, 1, 1 + (1 + v43:1), v41:0, 0, 3, 4) :|: v43:1 > -2 && v40:0 < 0
f_128(v33:0, v34:0, v35:0, v36:0, v40:0, 1 + (1 + v43:1), 1, v38:0, v41:0, 0, 3, 4) -> f_128(v33:0, v34:0, v35:0, v36:0, 1 + v43:1, v43:1, 1, 1 + (1 + v43:1), v41:0, 0, 3, 4) :|: v43:1 < -2 && v40:0 > 0
f_128(v33:0, v34:0, v35:0, v36:0, v40:0, 1 + (1 + v43:1), 1, v38:0, v41:0, 0, 3, 4) -> f_128(v33:0, v34:0, v35:0, v36:0, 1 + v43:1, v43:1, 1, 1 + (1 + v43:1), v41:0, 0, 3, 4) :|: v43:1 > -2 && v40:0 > 0
f_67 -> f_84(v1:0, v3:0, v4:0, 0, -1, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0
Filtered unneeded arguments:
   f_128(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_128(x5, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 14 rules.P rules:
f_128(v40:0, cons_0) -> f_128(-3, -4) :|: v40:0 < 0 && cons_0 = 0
f_128(v40:0, cons_0) -> f_128(-3, -4) :|: v40:0 > 0 && cons_0 = 0
f_67 -> f_128(-3, v43:0) :|: FALSE
f_67 -> f_128(-3, -4) :|: TRUE
f_128(cons_0, cons_-1) -> f_134(v33:0, v34:0, v35:0, v36:0, 0, -1, 1, v41:0, 3, 2, 4) :|: TRUE && cons_0 = 0 && cons_-1 = -1
f_67 -> f_128(1 + v43:0, v43:0) :|: v43:0 < -2 && v43:0 < -3
f_67 -> f_128(1 + v43:0, v43:0) :|: v43:0 > -2 && v43:0 < -3
f_67 -> f_128(1 + v43:0, v43:0) :|: v43:0 < -2 && v43:0 > -3
f_67 -> f_128(1 + v43:0, v43:0) :|: v43:0 > -2
f_128(v40:0, sum~cons_1~sum~cons_1~v43:1) -> f_128(1 + v43:1, v43:1) :|: v43:1 < -2 && v40:0 < 0 && sum~cons_1~sum~cons_1~v43:1 = 1 + (1 + v43:1)
f_128(v40:0, sum~cons_1~sum~cons_1~v43:1) -> f_128(1 + v43:1, v43:1) :|: v43:1 > -2 && v40:0 < 0 && sum~cons_1~sum~cons_1~v43:1 = 1 + (1 + v43:1)
f_128(v40:0, sum~cons_1~sum~cons_1~v43:1) -> f_128(1 + v43:1, v43:1) :|: v43:1 < -2 && v40:0 > 0 && sum~cons_1~sum~cons_1~v43:1 = 1 + (1 + v43:1)
f_128(v40:0, sum~cons_1~sum~cons_1~v43:1) -> f_128(1 + v43:1, v43:1) :|: v43:1 > -2 && v40:0 > 0 && sum~cons_1~sum~cons_1~v43:1 = 1 + (1 + v43:1)
f_67 -> f_84(v1:0, v3:0, v4:0, 0, -1, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0

----------------------------------------

(50)
Obligation:
Rules:
f_128(v40:0, cons_0) -> f_128(-3, -4) :|: v40:0 < 0 && cons_0 = 0
f_128(x, x1) -> f_128(-3, -4) :|: x > 0 && x1 = 0
f_67 -> f_128(-3, v43:0) :|: FALSE
f_67 -> f_128(-3, -4) :|: TRUE
f_128(x2, x3) -> f_134(x4, x5, x6, x7, 0, -1, 1, x8, 3, 2, 4) :|: TRUE && x2 = 0 && x3 = -1
f_67 -> f_128(1 + x9, x9) :|: x9 < -2 && x9 < -3
f_67 -> f_128(1 + x10, x10) :|: x10 > -2 && x10 < -3
f_67 -> f_128(1 + x11, x11) :|: x11 < -2 && x11 > -3
f_67 -> f_128(1 + x12, x12) :|: x12 > -2
f_128(x13, x14) -> f_128(1 + x15, x15) :|: x15 < -2 && x13 < 0 && x14 = 1 + (1 + x15)
f_128(x16, x17) -> f_128(1 + x18, x18) :|: x18 > -2 && x16 < 0 && x17 = 1 + (1 + x18)
f_128(x19, x20) -> f_128(1 + x21, x21) :|: x21 < -2 && x19 > 0 && x20 = 1 + (1 + x21)
f_128(x22, x23) -> f_128(1 + x24, x24) :|: x24 > -2 && x22 > 0 && x23 = 1 + (1 + x24)
f_67 -> f_84(v1:0, v3:0, v4:0, 0, -1, 3 + v1:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0
Start term: f_67

----------------------------------------

(51) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_128_11,1)
   (f_67_11,2)
   (f_134_11,3)
   (f_84_11,4)

----------------------------------------

(52)
Obligation:
START: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := nondet();
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
assume(oldX0 < 0 && oldX1 = 0);
x0 := -3;
x1 := -4;
x2 := oldX11;
x3 := oldX12;
x4 := oldX13;
x5 := oldX14;
x6 := oldX15;
x7 := oldX16;
x8 := oldX17;
x9 := oldX18;
x10 := oldX19;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := nondet();
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
assume(oldX0 > 0 && oldX1 = 0);
x0 := -3;
x1 := -4;
x2 := oldX11;
x3 := oldX12;
x4 := oldX13;
x5 := oldX14;
x6 := oldX15;
x7 := oldX16;
x8 := oldX17;
x9 := oldX18;
x10 := oldX19;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := nondet();
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
assume(0 = 1);
x0 := -3;
x1 := oldX11;
x2 := oldX12;
x3 := oldX13;
x4 := oldX14;
x5 := oldX15;
x6 := oldX16;
x7 := oldX17;
x8 := oldX18;
x9 := oldX19;
x10 := oldX20;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := nondet();
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
assume(0 = 0);
x0 := -3;
x1 := -4;
x2 := oldX11;
x3 := oldX12;
x4 := oldX13;
x5 := oldX14;
x6 := oldX15;
x7 := oldX16;
x8 := oldX17;
x9 := oldX18;
x10 := oldX19;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := nondet();
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
assume(0 = 0 && oldX0 = 0 && oldX1 = -1);
x0 := oldX11;
x1 := oldX12;
x2 := oldX13;
x3 := oldX14;
x4 := 0;
x5 := -1;
x6 := 1;
x7 := oldX15;
x8 := 3;
x9 := 2;
x10 := 4;
TO: 3;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := nondet();
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
assume(oldX11 < -2 && oldX11 < -3);
x0 := 1 + oldX11;
x1 := oldX11;
x2 := oldX12;
x3 := oldX13;
x4 := oldX14;
x5 := oldX15;
x6 := oldX16;
x7 := oldX17;
x8 := oldX18;
x9 := oldX19;
x10 := oldX20;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := nondet();
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
assume(oldX11 > -2 && oldX11 < -3);
x0 := 1 + oldX11;
x1 := oldX11;
x2 := oldX12;
x3 := oldX13;
x4 := oldX14;
x5 := oldX15;
x6 := oldX16;
x7 := oldX17;
x8 := oldX18;
x9 := oldX19;
x10 := oldX20;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := nondet();
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
assume(oldX11 < -2 && oldX11 > -3);
x0 := 1 + oldX11;
x1 := oldX11;
x2 := oldX12;
x3 := oldX13;
x4 := oldX14;
x5 := oldX15;
x6 := oldX16;
x7 := oldX17;
x8 := oldX18;
x9 := oldX19;
x10 := oldX20;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := nondet();
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
assume(oldX11 > -2);
x0 := 1 + oldX11;
x1 := oldX11;
x2 := oldX12;
x3 := oldX13;
x4 := oldX14;
x5 := oldX15;
x6 := oldX16;
x7 := oldX17;
x8 := oldX18;
x9 := oldX19;
x10 := oldX20;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := oldX1 - 2;
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
assume(oldX11 < -2 && oldX0 < 0 && oldX1 = 1 + (1 + oldX11));
x0 := 1 + oldX11;
x1 := oldX1 - 2;
x2 := oldX12;
x3 := oldX13;
x4 := oldX14;
x5 := oldX15;
x6 := oldX16;
x7 := oldX17;
x8 := oldX18;
x9 := oldX19;
x10 := oldX20;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := oldX1 - 2;
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
assume(oldX11 > -2 && oldX0 < 0 && oldX1 = 1 + (1 + oldX11));
x0 := 1 + oldX11;
x1 := oldX1 - 2;
x2 := oldX12;
x3 := oldX13;
x4 := oldX14;
x5 := oldX15;
x6 := oldX16;
x7 := oldX17;
x8 := oldX18;
x9 := oldX19;
x10 := oldX20;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := oldX1 - 2;
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
assume(oldX11 < -2 && oldX0 > 0 && oldX1 = 1 + (1 + oldX11));
x0 := 1 + oldX11;
x1 := oldX1 - 2;
x2 := oldX12;
x3 := oldX13;
x4 := oldX14;
x5 := oldX15;
x6 := oldX16;
x7 := oldX17;
x8 := oldX18;
x9 := oldX19;
x10 := oldX20;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := oldX1 - 2;
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
assume(oldX11 > -2 && oldX0 > 0 && oldX1 = 1 + (1 + oldX11));
x0 := 1 + oldX11;
x1 := oldX1 - 2;
x2 := oldX12;
x3 := oldX13;
x4 := oldX14;
x5 := oldX15;
x6 := oldX16;
x7 := oldX17;
x8 := oldX18;
x9 := oldX19;
x10 := oldX20;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := nondet();
oldX12 := nondet();
oldX13 := nondet();
oldX14 := nondet();
oldX15 := nondet();
assume(oldX11 > 0 && oldX12 > 0);
x0 := oldX11;
x1 := oldX12;
x2 := oldX13;
x3 := 0;
x4 := -1;
x5 := 3 + oldX11;
x6 := 3;
x7 := 1;
x8 := 4;
x9 := oldX14;
x10 := oldX15;
TO: 4;


----------------------------------------

(53) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 7: x0 <= -3 and x1 <= -4 and x0-x1 <= 1 and x1-x0 <= -1 and x0+x1 <= -7 and x0+1 <= 0 and x1+1 <= 0

----------------------------------------

(54)
NO
/home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Update_for_Loop_Iterator_2_NT.c:9:23: warning: implicit declaration of function '__VERIFIER_nondet_uchar' is invalid in C99 [-Wimplicit-function-declaration]
    unsigned char l = __VERIFIER_nondet_uchar();
                      ^
1 warning generated.

line 47:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
Aborted 1652282570Exec. 8, LLVMNontermination with some error. Reason: java.lang.OutOfMemoryError: Java heap space.
            java.base/java.util.LinkedList.addAll(LinkedList.java:428)
 
