timeout 900 ./AProVE.sh -m wst --bit-width 64 Incorrect_Update_for_Loop_Iterator_3_NT.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Incorrect_Update_for_Loop_Iterator_3_NT.c
NO
proof of /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Update_for_Loop_Iterator_3_NT.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 78 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 666 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToLassoProof [COMPLETE, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution Lasso
        (8) Lasso2IRS [EQUIVALENT, 131 ms]
        (9) IntTRS
        (10) IRS2T2 [EQUIVALENT, 0 ms]
        (11) T2IntSys
    (12) LLVM Symbolic Execution Lasso
        (13) Lasso2IRS [EQUIVALENT, 71 ms]
        (14) IntTRS
        (15) IRS2T2 [EQUIVALENT, 0 ms]
        (16) T2IntSys
        (17) T2 [COMPLETE, 768 ms]
        (18) NO
    (19) LLVM Symbolic Execution Lasso
        (20) Lasso2IRS [EQUIVALENT, 119 ms]
        (21) IntTRS
        (22) IRS2T2 [EQUIVALENT, 0 ms]
        (23) T2IntSys
        (24) T2 [COMPLETE, 649 ms]
        (25) NO
    (26) LLVM Symbolic Execution Lasso
        (27) Lasso2IRS [EQUIVALENT, 59 ms]
        (28) IntTRS
        (29) IRS2T2 [EQUIVALENT, 0 ms]
        (30) T2IntSys
        (31) T2 [COMPLETE, 785 ms]
        (32) NO
    (33) LLVM Symbolic Execution Lasso
        (34) Lasso2IRS [EQUIVALENT, 70 ms]
        (35) IntTRS
        (36) IRS2T2 [EQUIVALENT, 0 ms]
        (37) T2IntSys
        (38) T2 [COMPLETE, 680 ms]
        (39) NO


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Update_for_Loop_Iterator_3_NT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Update_for_Loop_Iterator_3_NT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 (...)* @__VERIFIER_nondet_int()
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%7 = call i32 (...)* @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = load %3
		%11 = icmp sle %9 %10
		br %11, %12, %21
	12:
		%13 = load %2
		%14 = mul i32 %13, 2
		store %14, %2
		%15 = load %2
		%16 = load %4
		%17 = icmp sgt %15 %16
		br %17, %18, %20
	18:
		%19 = load %4
		store %19, %2
		br %20
	20:
		br %8
	21:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToLassoProof (COMPLETE)
Converted SEGraph to 5 dependent lassos.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Lasso
----------------------------------------

(8) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 91 rulesP rules:
f_222(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_223(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_223(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_224(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_224(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_225(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: v218 <= v217
f_225(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_227(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_227(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_229(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_229(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_231(v212, v213, v214, v215, v216, v217, v218, 1, v221, v222, v223, v224, v225, 0, 3, 4) :|: 0 = 0
f_231(v212, v213, v214, v215, v216, v217, v218, 1, v221, v222, v223, v224, v225, 0, 3, 4) -> f_232(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: v269 = 2 * v218
f_232(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_233(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_233(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_234(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_234(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_236(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: v218 < v269
f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_237(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: v269 <= v218
f_236(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_238(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_238(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_240(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_240(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_242(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_242(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_244(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_244(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_246(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_246(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_221(v212, v213, v214, v215, v216, v217, v218, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_221(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_222(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_237(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_239(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: 0 = 0
f_239(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) -> f_241(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: TRUE
f_241(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) -> f_257(v212, v213, v214, v215, v216, v217, v218, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: TRUE
f_257(v403, v404, v405, v406, v407, v408, v409, v410, 1, v412, 0, v414, v415, v416, v417, 3, 2, 4) -> f_274(v403, v404, v405, v406, v407, v408, v409, v410, 1, v412, 0, v414, v415, v416, v417, 3, 2, 4) :|: TRUE
f_274(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) -> f_275(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_275(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) -> f_276(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_276(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_277(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_277(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_278(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_278(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_279(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_279(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_280(v499, v500, v501, v502, v503, v504, v505, v508, 1, 0, v510, v511, v512, v513, 3, 4) :|: 0 = 0
f_280(v499, v500, v501, v502, v503, v504, v505, v508, 1, 0, v510, v511, v512, v513, 3, 4) -> f_281(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v554 = 2 * v508
f_281(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_282(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_282(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_283(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_283(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_285(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v505 < v554
f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_286(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v554 <= v505
f_285(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_287(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: 0 = 0
f_287(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_289(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_289(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_291(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: 0 = 0
f_291(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_292(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_292(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_293(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_293(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_221(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_286(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_288(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_288(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_290(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_290(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_274(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_97 -> f_98(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_98(v1, v2, 3, 1, 4) -> f_99(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_99(v1, v3, v2, v4, 3, 1, 4) -> f_100(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_100(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_101(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_101(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_102(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_102(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_103(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_103(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_105(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_105(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_106(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_106(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_110(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_110(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_111(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_111(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_112(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_112(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_113(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_113(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_114(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_114(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_115(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: v9 <= v11
f_115(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_117(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_117(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_119(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: TRUE
f_119(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_121(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_121(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_122(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v15 = 2 * v9
f_122(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_123(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_123(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_124(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_124(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_125(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_125(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_127(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v15 <= v13
f_127(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_129(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: 0 = 0
f_129(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) -> f_131(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_131(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) -> f_133(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_133(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) -> f_173(v1, v3, v5, v7, v9, v11, v13, v9, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_173(v59, v60, v61, v62, v63, v64, v65, v66, 1, v68, 0, v70, v71, v72, v73, 3, 2, 4) -> f_176(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_176(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_179(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_179(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_182(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: v68 <= v64
f_182(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_186(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_186(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_190(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_190(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_193(v59, v60, v61, v62, v63, v64, v65, v68, 1, 0, v70, v71, v72, v73, 3, 4) :|: 0 = 0
f_193(v59, v60, v61, v62, v63, v64, v65, v68, 1, 0, v70, v71, v72, v73, 3, 4) -> f_195(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: v150 = 2 * v68
f_195(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_197(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_197(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_200(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_200(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_203(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_203(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_206(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: v65 < v150
f_206(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_209(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: 0 = 0
f_209(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) -> f_212(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: TRUE
f_212(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) -> f_215(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: 0 = 0
f_215(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) -> f_218(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: TRUE
f_218(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) -> f_220(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: TRUE
f_220(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) -> f_221(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v219:0, 1, v221:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) -> f_284(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, 2 * v218:0, 1, 2 * (2 * v218:0), 0, v222:0, v223:0, v224:0, v225:0, 3, 2, 4) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) -> f_222(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, v510:0, v511:0, v512:0, v513:0, 0, 3, 2, 4) :|: v554:0 > v505:0
f_97 -> f_222(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v9:0, 1, 2 * (2 * v9:0), 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 <= v11:0 && v13:0 >= 2 * v9:0 && v13:0 < 2 * (2 * v9:0) && v11:0 >= 2 * v9:0
f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) -> f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v554:0, 1, 2 * v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) :|: v554:0 <= v505:0
f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v219:0, 1, v221:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) -> f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v218:0, 1, 2 * v218:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) :|: v218:0 < 2 * v218:0 && v218:0 <= v217:0
Filtered unneeded arguments:
   f_222(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_222(x5, x6, x7, x8, x10)
   f_284(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_284(x6, x7, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_284(v217:0, v218:0, 4 * v218:0) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_284(v504:0, v505:0, v554:0) -> f_222(v503:0, v504:0, v505:0, v508:0, v554:0) :|: v554:0 > v505:0
f_97 -> f_222(v9:0, v11:0, v13:0, 2 * v9:0, 4 * v9:0) :|: v13:0 >= 2 * v9:0 && v9:0 <= v11:0 && v11:0 >= 2 * v9:0 && v13:0 < 4 * v9:0
f_284(v504:0, v505:0, v554:0) -> f_284(v504:0, v505:0, 2 * v554:0) :|: v554:0 <= v505:0
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_222(v216:0, v217:0, v218:0, v218:0, 2 * v218:0) :|: v218:0 < 2 * v218:0 && v218:0 <= v217:0

----------------------------------------

(9)
Obligation:
Rules:
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_284(v217:0, v218:0, 4 * v218:0) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_284(v504:0, v505:0, v554:0) -> f_222(v503:0, v504:0, v505:0, v508:0, v554:0) :|: v554:0 > v505:0
f_97 -> f_222(v9:0, v11:0, v13:0, 2 * v9:0, 4 * v9:0) :|: v13:0 >= 2 * v9:0 && v9:0 <= v11:0 && v11:0 >= 2 * v9:0 && v13:0 < 4 * v9:0
f_284(x, x1, x2) -> f_284(x, x1, 2 * x2) :|: x2 <= x1
f_222(x3, x4, x5, x6, x7) -> f_222(x3, x4, x5, x5, 2 * x5) :|: x5 < 2 * x5 && x5 <= x4
Start term: f_97

----------------------------------------

(10) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_222_5,1)
   (f_284_5,2)
   (f_97_5,3)

----------------------------------------

(11)
Obligation:
START: 3;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 >= 2 * oldX2 && oldX2 <= oldX1);
x0 := oldX1;
x1 := oldX2;
x2 := 4 * oldX2;
x3 := oldX5;
x4 := oldX6;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 > oldX1);
x0 := oldX5;
x1 := oldX0;
x2 := oldX1;
x3 := oldX6;
x4 := oldX2;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
assume(oldX7 >= 2 * oldX5 && oldX5 <= oldX6 && oldX6 >= 2 * oldX5 && oldX7 < 4 * oldX5);
x0 := oldX5;
x1 := oldX6;
x2 := oldX7;
x3 := 2 * oldX5;
x4 := 4 * oldX5;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 <= oldX1);
x0 := oldX0;
x1 := oldX1;
x2 := 2 * oldX2;
x3 := oldX5;
x4 := oldX6;
TO: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
assume(oldX2 < 2 * oldX2 && oldX2 <= oldX1);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX2;
x4 := 2 * oldX2;
TO: 1;


----------------------------------------

(12)
Obligation:
Lasso
----------------------------------------

(13) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 77 rulesP rules:
f_222(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_223(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_223(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_224(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_224(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_225(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: v218 <= v217
f_225(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_227(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_227(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_229(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_229(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_231(v212, v213, v214, v215, v216, v217, v218, 1, v221, v222, v223, v224, v225, 0, 3, 4) :|: 0 = 0
f_231(v212, v213, v214, v215, v216, v217, v218, 1, v221, v222, v223, v224, v225, 0, 3, 4) -> f_232(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: v269 = 2 * v218
f_232(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_233(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_233(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_234(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_234(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_236(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: v218 < v269
f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_237(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: v269 <= v218
f_236(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_238(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_238(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_240(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_240(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_242(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_242(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_244(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_244(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_246(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_246(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_221(v212, v213, v214, v215, v216, v217, v218, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_221(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_222(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_237(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_239(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: 0 = 0
f_239(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) -> f_241(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: TRUE
f_241(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) -> f_257(v212, v213, v214, v215, v216, v217, v218, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: TRUE
f_257(v403, v404, v405, v406, v407, v408, v409, v410, 1, v412, 0, v414, v415, v416, v417, 3, 2, 4) -> f_274(v403, v404, v405, v406, v407, v408, v409, v410, 1, v412, 0, v414, v415, v416, v417, 3, 2, 4) :|: TRUE
f_274(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) -> f_275(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_275(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) -> f_276(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_276(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_277(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_277(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_278(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_278(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_279(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_279(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_280(v499, v500, v501, v502, v503, v504, v505, v508, 1, 0, v510, v511, v512, v513, 3, 4) :|: 0 = 0
f_280(v499, v500, v501, v502, v503, v504, v505, v508, 1, 0, v510, v511, v512, v513, 3, 4) -> f_281(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v554 = 2 * v508
f_281(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_282(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_282(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_283(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_283(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_285(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v505 < v554
f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_286(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v554 <= v505
f_285(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_287(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: 0 = 0
f_287(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_289(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_289(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_291(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: 0 = 0
f_291(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_292(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_292(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_293(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_293(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_221(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_286(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_288(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_288(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_290(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_290(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_274(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_97 -> f_98(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_98(v1, v2, 3, 1, 4) -> f_99(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_99(v1, v3, v2, v4, 3, 1, 4) -> f_100(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_100(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_101(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_101(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_102(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_102(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_103(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_103(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_105(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_105(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_106(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_106(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_110(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_110(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_111(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_111(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_112(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_112(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_113(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_113(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_114(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_114(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_115(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: v9 <= v11
f_115(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_117(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_117(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_119(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: TRUE
f_119(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_121(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_121(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_122(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v15 = 2 * v9
f_122(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_123(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_123(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_124(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_124(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_125(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_125(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_126(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v13 < v15
f_126(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_128(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_128(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_130(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_130(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_132(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_132(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_134(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_134(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_136(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_136(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_189(v1, v3, v5, v7, v9, v11, v13, v9, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_189(v116, v117, v118, v119, v120, v121, v122, v123, 1, v125, v126, v127, v128, v129, 0, 3, 2, 4) -> f_221(v116, v117, v118, v119, v120, v121, v122, v123, 1, v125, v126, v127, v128, v129, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v219:0, 1, v221:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) -> f_284(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, 2 * v218:0, 1, 2 * (2 * v218:0), 0, v222:0, v223:0, v224:0, v225:0, 3, 2, 4) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_97 -> f_222(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v9:0, 1, 2 * v9:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 < 2 * v9:0 && v9:0 <= v11:0
f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) -> f_222(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, v510:0, v511:0, v512:0, v513:0, 0, 3, 2, 4) :|: v554:0 > v505:0
f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) -> f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v554:0, 1, 2 * v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) :|: v554:0 <= v505:0
f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v219:0, 1, v221:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) -> f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v218:0, 1, 2 * v218:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) :|: v218:0 < 2 * v218:0 && v218:0 <= v217:0
Filtered unneeded arguments:
   f_222(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_222(x5, x6, x7, x8, x10)
   f_284(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_284(x6, x7, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_284(v217:0, v218:0, 4 * v218:0) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_97 -> f_222(v9:0, v11:0, v13:0, v9:0, 2 * v9:0) :|: v13:0 < 2 * v9:0 && v9:0 <= v11:0
f_284(v504:0, v505:0, v554:0) -> f_222(v503:0, v504:0, v505:0, v508:0, v554:0) :|: v554:0 > v505:0
f_284(v504:0, v505:0, v554:0) -> f_284(v504:0, v505:0, 2 * v554:0) :|: v554:0 <= v505:0
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_222(v216:0, v217:0, v218:0, v218:0, 2 * v218:0) :|: v218:0 < 2 * v218:0 && v218:0 <= v217:0

----------------------------------------

(14)
Obligation:
Rules:
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_284(v217:0, v218:0, 4 * v218:0) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_97 -> f_222(v9:0, v11:0, v13:0, v9:0, 2 * v9:0) :|: v13:0 < 2 * v9:0 && v9:0 <= v11:0
f_284(v504:0, v505:0, v554:0) -> f_222(v503:0, v504:0, v505:0, v508:0, v554:0) :|: v554:0 > v505:0
f_284(x, x1, x2) -> f_284(x, x1, 2 * x2) :|: x2 <= x1
f_222(x3, x4, x5, x6, x7) -> f_222(x3, x4, x5, x5, 2 * x5) :|: x5 < 2 * x5 && x5 <= x4
Start term: f_97

----------------------------------------

(15) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_222_5,1)
   (f_284_5,2)
   (f_97_5,3)

----------------------------------------

(16)
Obligation:
START: 3;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 >= 2 * oldX2 && oldX2 <= oldX1);
x0 := oldX1;
x1 := oldX2;
x2 := 4 * oldX2;
x3 := oldX5;
x4 := oldX6;
TO: 2;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
assume(oldX7 < 2 * oldX5 && oldX5 <= oldX6);
x0 := oldX5;
x1 := oldX6;
x2 := oldX7;
x3 := oldX5;
x4 := 2 * oldX5;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 > oldX1);
x0 := oldX5;
x1 := oldX0;
x2 := oldX1;
x3 := oldX6;
x4 := oldX2;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 <= oldX1);
x0 := oldX0;
x1 := oldX1;
x2 := 2 * oldX2;
x3 := oldX5;
x4 := oldX6;
TO: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
assume(oldX2 < 2 * oldX2 && oldX2 <= oldX1);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX2;
x4 := 2 * oldX2;
TO: 1;


----------------------------------------

(17) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 6: oldX5 == 1 and oldX6 == 1 and oldX7 == 1 and x1 == 1 and x2 == 1

----------------------------------------

(18)
NO

----------------------------------------

(19)
Obligation:
Lasso
----------------------------------------

(20) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 91 rulesP rules:
f_222(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_223(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_223(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_224(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_224(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_225(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: v218 <= v217
f_225(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_227(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_227(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_229(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_229(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_231(v212, v213, v214, v215, v216, v217, v218, 1, v221, v222, v223, v224, v225, 0, 3, 4) :|: 0 = 0
f_231(v212, v213, v214, v215, v216, v217, v218, 1, v221, v222, v223, v224, v225, 0, 3, 4) -> f_232(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: v269 = 2 * v218
f_232(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_233(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_233(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_234(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_234(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_236(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: v218 < v269
f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_237(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: v269 <= v218
f_236(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_238(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_238(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_240(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_240(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_242(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_242(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_244(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_244(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_246(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_246(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_221(v212, v213, v214, v215, v216, v217, v218, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_221(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_222(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_237(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_239(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: 0 = 0
f_239(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) -> f_241(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: TRUE
f_241(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) -> f_257(v212, v213, v214, v215, v216, v217, v218, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: TRUE
f_257(v403, v404, v405, v406, v407, v408, v409, v410, 1, v412, 0, v414, v415, v416, v417, 3, 2, 4) -> f_274(v403, v404, v405, v406, v407, v408, v409, v410, 1, v412, 0, v414, v415, v416, v417, 3, 2, 4) :|: TRUE
f_274(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) -> f_275(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_275(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) -> f_276(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_276(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_277(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_277(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_278(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_278(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_279(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_279(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_280(v499, v500, v501, v502, v503, v504, v505, v508, 1, 0, v510, v511, v512, v513, 3, 4) :|: 0 = 0
f_280(v499, v500, v501, v502, v503, v504, v505, v508, 1, 0, v510, v511, v512, v513, 3, 4) -> f_281(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v554 = 2 * v508
f_281(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_282(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_282(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_283(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_283(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_285(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v505 < v554
f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_286(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v554 <= v505
f_285(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_287(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: 0 = 0
f_287(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_289(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_289(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_291(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: 0 = 0
f_291(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_292(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_292(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_293(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_293(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_221(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_286(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_288(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_288(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_290(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_290(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_274(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_97 -> f_98(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_98(v1, v2, 3, 1, 4) -> f_99(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_99(v1, v3, v2, v4, 3, 1, 4) -> f_100(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_100(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_101(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_101(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_102(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_102(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_103(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_103(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_105(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_105(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_106(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_106(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_110(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_110(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_111(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_111(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_112(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_112(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_113(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_113(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_114(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_114(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_115(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: v9 <= v11
f_115(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_117(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_117(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_119(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: TRUE
f_119(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_121(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_121(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_122(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v15 = 2 * v9
f_122(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_123(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_123(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_124(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_124(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_125(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_125(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_127(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v15 <= v13
f_127(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_129(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: 0 = 0
f_129(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) -> f_131(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_131(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) -> f_133(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_133(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) -> f_173(v1, v3, v5, v7, v9, v11, v13, v9, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_173(v59, v60, v61, v62, v63, v64, v65, v66, 1, v68, 0, v70, v71, v72, v73, 3, 2, 4) -> f_176(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_176(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_179(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_179(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_182(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: v68 <= v64
f_182(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_186(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_186(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_190(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_190(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_193(v59, v60, v61, v62, v63, v64, v65, v68, 1, 0, v70, v71, v72, v73, 3, 4) :|: 0 = 0
f_193(v59, v60, v61, v62, v63, v64, v65, v68, 1, 0, v70, v71, v72, v73, 3, 4) -> f_195(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: v150 = 2 * v68
f_195(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_197(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_197(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_200(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_200(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_203(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_203(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_206(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: v65 < v150
f_206(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_209(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: 0 = 0
f_209(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) -> f_212(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: TRUE
f_212(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) -> f_215(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: 0 = 0
f_215(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) -> f_218(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: TRUE
f_218(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) -> f_220(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: TRUE
f_220(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) -> f_221(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, v70, v71, v72, v73, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v219:0, 1, v221:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) -> f_284(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, 2 * v218:0, 1, 2 * (2 * v218:0), 0, v222:0, v223:0, v224:0, v225:0, 3, 2, 4) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) -> f_222(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, v510:0, v511:0, v512:0, v513:0, 0, 3, 2, 4) :|: v554:0 > v505:0
f_97 -> f_222(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v9:0, 1, 2 * (2 * v9:0), 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 <= v11:0 && v13:0 >= 2 * v9:0 && v13:0 < 2 * (2 * v9:0) && v11:0 >= 2 * v9:0
f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) -> f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v554:0, 1, 2 * v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) :|: v554:0 <= v505:0
f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v219:0, 1, v221:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) -> f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v218:0, 1, 2 * v218:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) :|: v218:0 < 2 * v218:0 && v218:0 <= v217:0
Filtered unneeded arguments:
   f_222(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_222(x5, x6, x7, x8, x10)
   f_284(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_284(x6, x7, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_284(v217:0, v218:0, 4 * v218:0) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_284(v504:0, v505:0, v554:0) -> f_222(v503:0, v504:0, v505:0, v508:0, v554:0) :|: v554:0 > v505:0
f_97 -> f_222(v9:0, v11:0, v13:0, 2 * v9:0, 4 * v9:0) :|: v13:0 >= 2 * v9:0 && v9:0 <= v11:0 && v11:0 >= 2 * v9:0 && v13:0 < 4 * v9:0
f_284(v504:0, v505:0, v554:0) -> f_284(v504:0, v505:0, 2 * v554:0) :|: v554:0 <= v505:0
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_222(v216:0, v217:0, v218:0, v218:0, 2 * v218:0) :|: v218:0 < 2 * v218:0 && v218:0 <= v217:0

----------------------------------------

(21)
Obligation:
Rules:
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_284(v217:0, v218:0, 4 * v218:0) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_284(v504:0, v505:0, v554:0) -> f_222(v503:0, v504:0, v505:0, v508:0, v554:0) :|: v554:0 > v505:0
f_97 -> f_222(v9:0, v11:0, v13:0, 2 * v9:0, 4 * v9:0) :|: v13:0 >= 2 * v9:0 && v9:0 <= v11:0 && v11:0 >= 2 * v9:0 && v13:0 < 4 * v9:0
f_284(x, x1, x2) -> f_284(x, x1, 2 * x2) :|: x2 <= x1
f_222(x3, x4, x5, x6, x7) -> f_222(x3, x4, x5, x5, 2 * x5) :|: x5 < 2 * x5 && x5 <= x4
Start term: f_97

----------------------------------------

(22) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_222_5,1)
   (f_284_5,2)
   (f_97_5,3)

----------------------------------------

(23)
Obligation:
START: 3;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 >= 2 * oldX2 && oldX2 <= oldX1);
x0 := oldX1;
x1 := oldX2;
x2 := 4 * oldX2;
x3 := oldX5;
x4 := oldX6;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 > oldX1);
x0 := oldX5;
x1 := oldX0;
x2 := oldX1;
x3 := oldX6;
x4 := oldX2;
TO: 1;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
assume(oldX7 >= 2 * oldX5 && oldX5 <= oldX6 && oldX6 >= 2 * oldX5 && oldX7 < 4 * oldX5);
x0 := oldX5;
x1 := oldX6;
x2 := oldX7;
x3 := 2 * oldX5;
x4 := 4 * oldX5;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 <= oldX1);
x0 := oldX0;
x1 := oldX1;
x2 := 2 * oldX2;
x3 := oldX5;
x4 := oldX6;
TO: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
assume(oldX2 < 2 * oldX2 && oldX2 <= oldX1);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX2;
x4 := 2 * oldX2;
TO: 1;


----------------------------------------

(24) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 6: oldX5 == 1 and oldX6 == 2 and oldX7 == 2 and x1 == 2 and x2 == 2

----------------------------------------

(25)
NO

----------------------------------------

(26)
Obligation:
Lasso
----------------------------------------

(27) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 77 rulesP rules:
f_222(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_223(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_223(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_224(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_224(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_225(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: v218 <= v217
f_225(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_227(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_227(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_229(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_229(v212, v213, v214, v215, v216, v217, v218, 1, v219, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_231(v212, v213, v214, v215, v216, v217, v218, 1, v221, v222, v223, v224, v225, 0, 3, 4) :|: 0 = 0
f_231(v212, v213, v214, v215, v216, v217, v218, 1, v221, v222, v223, v224, v225, 0, 3, 4) -> f_232(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: v269 = 2 * v218
f_232(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_233(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_233(v212, v213, v214, v215, v216, v217, v218, 1, v269, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_234(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_234(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_236(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: v218 < v269
f_235(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_237(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: v269 <= v218
f_236(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_238(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_238(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_240(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_240(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_242(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: 0 = 0
f_242(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_244(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_244(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_246(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_246(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_221(v212, v213, v214, v215, v216, v217, v218, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_221(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) -> f_222(v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, 0, 3, 2, 4) :|: TRUE
f_237(v212, v213, v214, v215, v216, v217, v218, 1, v269, v222, v223, v224, v225, 0, 3, 2, 4) -> f_239(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: 0 = 0
f_239(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) -> f_241(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: TRUE
f_241(v212, v213, v214, v215, v216, v217, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) -> f_257(v212, v213, v214, v215, v216, v217, v218, v218, 1, v269, 0, v222, v223, v224, v225, 3, 2, 4) :|: TRUE
f_257(v403, v404, v405, v406, v407, v408, v409, v410, 1, v412, 0, v414, v415, v416, v417, 3, 2, 4) -> f_274(v403, v404, v405, v406, v407, v408, v409, v410, 1, v412, 0, v414, v415, v416, v417, 3, 2, 4) :|: TRUE
f_274(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) -> f_275(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_275(v499, v500, v501, v502, v503, v504, v505, v506, 1, v508, 0, v510, v511, v512, v513, 3, 2, 4) -> f_276(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_276(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_277(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_277(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_278(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_278(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_279(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_279(v499, v500, v501, v502, v503, v504, v505, v508, 1, v506, 0, v510, v511, v512, v513, 3, 2, 4) -> f_280(v499, v500, v501, v502, v503, v504, v505, v508, 1, 0, v510, v511, v512, v513, 3, 4) :|: 0 = 0
f_280(v499, v500, v501, v502, v503, v504, v505, v508, 1, 0, v510, v511, v512, v513, 3, 4) -> f_281(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v554 = 2 * v508
f_281(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_282(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_282(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_283(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_283(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_285(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v505 < v554
f_284(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_286(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: v554 <= v505
f_285(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_287(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: 0 = 0
f_287(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_289(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_289(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_291(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: 0 = 0
f_291(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_292(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_292(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_293(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_293(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) -> f_221(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, v510, v511, v512, v513, 0, 3, 2, 4) :|: TRUE
f_286(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_288(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: 0 = 0
f_288(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_290(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_290(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) -> f_274(v499, v500, v501, v502, v503, v504, v505, v508, 1, v554, 0, v510, v511, v512, v513, 3, 2, 4) :|: TRUE
f_97 -> f_98(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_98(v1, v2, 3, 1, 4) -> f_99(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_99(v1, v3, v2, v4, 3, 1, 4) -> f_100(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_100(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_101(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_101(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_102(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_102(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_103(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_103(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_105(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_105(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_106(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_106(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_110(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_110(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_111(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_111(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_112(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_112(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_113(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_113(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_114(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_114(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_115(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: v9 <= v11
f_115(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_117(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_117(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_119(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: TRUE
f_119(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_121(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_121(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_122(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v15 = 2 * v9
f_122(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_123(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_123(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_124(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_124(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_125(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_125(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_126(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v13 < v15
f_126(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_128(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_128(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_130(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_130(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_132(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_132(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_134(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_134(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_136(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_136(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_189(v1, v3, v5, v7, v9, v11, v13, v9, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_189(v116, v117, v118, v119, v120, v121, v122, v123, 1, v125, v126, v127, v128, v129, 0, 3, 2, 4) -> f_221(v116, v117, v118, v119, v120, v121, v122, v123, 1, v125, v126, v127, v128, v129, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 5 rulesP rules:
f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v219:0, 1, v221:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) -> f_284(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, 2 * v218:0, 1, 2 * (2 * v218:0), 0, v222:0, v223:0, v224:0, v225:0, 3, 2, 4) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_97 -> f_222(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, v9:0, 1, 2 * v9:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 < 2 * v9:0 && v9:0 <= v11:0
f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) -> f_222(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, v510:0, v511:0, v512:0, v513:0, 0, 3, 2, 4) :|: v554:0 > v505:0
f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v508:0, 1, v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) -> f_284(v499:0, v500:0, v501:0, v502:0, v503:0, v504:0, v505:0, v554:0, 1, 2 * v554:0, 0, v510:0, v511:0, v512:0, v513:0, 3, 2, 4) :|: v554:0 <= v505:0
f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v219:0, 1, v221:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) -> f_222(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v218:0, 1, 2 * v218:0, v222:0, v223:0, v224:0, v225:0, 0, 3, 2, 4) :|: v218:0 < 2 * v218:0 && v218:0 <= v217:0
Filtered unneeded arguments:
   f_222(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_222(x5, x6, x7, x8, x10)
   f_284(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_284(x6, x7, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 5 rules.P rules:
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_284(v217:0, v218:0, 4 * v218:0) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_97 -> f_222(v9:0, v11:0, v13:0, v9:0, 2 * v9:0) :|: v13:0 < 2 * v9:0 && v9:0 <= v11:0
f_284(v504:0, v505:0, v554:0) -> f_222(v503:0, v504:0, v505:0, v508:0, v554:0) :|: v554:0 > v505:0
f_284(v504:0, v505:0, v554:0) -> f_284(v504:0, v505:0, 2 * v554:0) :|: v554:0 <= v505:0
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_222(v216:0, v217:0, v218:0, v218:0, 2 * v218:0) :|: v218:0 < 2 * v218:0 && v218:0 <= v217:0

----------------------------------------

(28)
Obligation:
Rules:
f_222(v216:0, v217:0, v218:0, v219:0, v221:0) -> f_284(v217:0, v218:0, 4 * v218:0) :|: v218:0 >= 2 * v218:0 && v218:0 <= v217:0
f_97 -> f_222(v9:0, v11:0, v13:0, v9:0, 2 * v9:0) :|: v13:0 < 2 * v9:0 && v9:0 <= v11:0
f_284(v504:0, v505:0, v554:0) -> f_222(v503:0, v504:0, v505:0, v508:0, v554:0) :|: v554:0 > v505:0
f_284(x, x1, x2) -> f_284(x, x1, 2 * x2) :|: x2 <= x1
f_222(x3, x4, x5, x6, x7) -> f_222(x3, x4, x5, x5, 2 * x5) :|: x5 < 2 * x5 && x5 <= x4
Start term: f_97

----------------------------------------

(29) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_222_5,1)
   (f_284_5,2)
   (f_97_5,3)

----------------------------------------

(30)
Obligation:
START: 3;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 >= 2 * oldX2 && oldX2 <= oldX1);
x0 := oldX1;
x1 := oldX2;
x2 := 4 * oldX2;
x3 := oldX5;
x4 := oldX6;
TO: 2;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
oldX7 := nondet();
assume(oldX7 < 2 * oldX5 && oldX5 <= oldX6);
x0 := oldX5;
x1 := oldX6;
x2 := oldX7;
x3 := oldX5;
x4 := 2 * oldX5;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 > oldX1);
x0 := oldX5;
x1 := oldX0;
x2 := oldX1;
x3 := oldX6;
x4 := oldX2;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := nondet();
oldX6 := nondet();
assume(oldX2 <= oldX1);
x0 := oldX0;
x1 := oldX1;
x2 := 2 * oldX2;
x3 := oldX5;
x4 := oldX6;
TO: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
assume(oldX2 < 2 * oldX2 && oldX2 <= oldX1);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := oldX2;
x4 := 2 * oldX2;
TO: 1;


----------------------------------------

(31) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 6: oldX5 == 1 and oldX6 == 1 and oldX7 == 1 and x1 == 1 and x2 == 1

----------------------------------------

(32)
NO

----------------------------------------

(33)
Obligation:
Lasso
----------------------------------------

(34) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 45 rulesP rules:
f_176(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_179(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_179(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_182(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: v68 <= v64
f_182(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_186(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_186(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_190(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_190(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) -> f_193(v59, v60, v61, v62, v63, v64, v65, v68, 1, 0, v70, v71, v72, v73, 3, 4) :|: 0 = 0
f_193(v59, v60, v61, v62, v63, v64, v65, v68, 1, 0, v70, v71, v72, v73, 3, 4) -> f_195(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: v150 = 2 * v68
f_195(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_197(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_197(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_200(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_200(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_203(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_203(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_207(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: v150 <= v65
f_207(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_210(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_210(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_213(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_213(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_216(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_216(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) -> f_173(v59, v60, v61, v62, v63, v64, v65, v68, 1, v150, 0, v70, v71, v72, v73, 3, 2, 4) :|: TRUE
f_173(v59, v60, v61, v62, v63, v64, v65, v66, 1, v68, 0, v70, v71, v72, v73, 3, 2, 4) -> f_176(v59, v60, v61, v62, v63, v64, v65, v68, 1, v66, 0, v70, v71, v72, v73, 3, 2, 4) :|: 0 = 0
f_97 -> f_98(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_98(v1, v2, 3, 1, 4) -> f_99(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_99(v1, v3, v2, v4, 3, 1, 4) -> f_100(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_100(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_101(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_101(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_102(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_102(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_103(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_103(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_104(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_105(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_105(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_106(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_106(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_107(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_108(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_109(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, 0, 3, 1, 4) -> f_110(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_110(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_111(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_111(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_112(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_112(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_113(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_113(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_114(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_114(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_115(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) :|: v9 <= v11
f_115(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, 0, 3, 1, 4) -> f_117(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_117(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_119(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: TRUE
f_119(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_121(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) :|: 0 = 0
f_121(v1, v3, v5, v7, v9, v11, v13, 1, v2, v4, v6, v8, 0, 3, 4) -> f_122(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v15 = 2 * v9
f_122(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_123(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: TRUE
f_123(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_124(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_124(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_125(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: 0 = 0
f_125(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_127(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) :|: v15 <= v13
f_127(v1, v3, v5, v7, v9, v11, v13, 1, v15, v2, v4, v6, v8, 0, 3, 2, 4) -> f_129(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: 0 = 0
f_129(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) -> f_131(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_131(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) -> f_133(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_133(v1, v3, v5, v7, v9, v11, v13, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) -> f_173(v1, v3, v5, v7, v9, v11, v13, v9, 1, v15, 0, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_97 -> f_176(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 2 * v9:0, 1, v9:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v13:0 >= 2 * v9:0 && v9:0 <= v11:0
f_176(v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, v68:0, 1, v66:0, 0, v70:0, v71:0, v72:0, v73:0, 3, 2, 4) -> f_176(v59:0, v60:0, v61:0, v62:0, v63:0, v64:0, v65:0, 2 * v68:0, 1, v68:0, 0, v70:0, v71:0, v72:0, v73:0, 3, 2, 4) :|: v65:0 >= 2 * v68:0 && v68:0 <= v64:0
Filtered unneeded arguments:
   f_176(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_176(x6, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_97 -> f_176(v11:0, v13:0, 2 * v9:0) :|: v13:0 >= 2 * v9:0 && v9:0 <= v11:0
f_176(v64:0, v65:0, v68:0) -> f_176(v64:0, v65:0, 2 * v68:0) :|: v65:0 >= 2 * v68:0 && v68:0 <= v64:0

----------------------------------------

(35)
Obligation:
Rules:
f_97 -> f_176(v11:0, v13:0, 2 * v9:0) :|: v13:0 >= 2 * v9:0 && v9:0 <= v11:0
f_176(v64:0, v65:0, v68:0) -> f_176(v64:0, v65:0, 2 * v68:0) :|: v65:0 >= 2 * v68:0 && v68:0 <= v64:0
Start term: f_97

----------------------------------------

(36) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_97_3,1)
   (f_176_3,2)

----------------------------------------

(37)
Obligation:
START: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
oldX4 := nondet();
oldX5 := nondet();
assume(oldX4 >= 2 * oldX5 && oldX5 <= oldX3);
x0 := oldX3;
x1 := oldX4;
x2 := 2 * oldX5;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
assume(oldX1 >= 2 * oldX2 && oldX2 <= oldX0);
x0 := oldX0;
x1 := oldX1;
x2 := 2 * oldX2;
TO: 2;


----------------------------------------

(38) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 5: oldX3 == 0 and oldX4 == 0 and oldX5 == 0 and x0 == 0 and x1 == 0 and x2 == 0

----------------------------------------

(39)
NO
/home/ubuntu/tool/FSE_benchmark/loop/Incorrect_Update_for_Loop_Iterator_3_NT.c:10:16: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int nfds = __VERIFIER_nondet_int();
               ^
1 warning generated.

line 57:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
 
