timeout 900 ./AProVE.sh -m wst --bit-width 64 Missing_Corner-case_Handling_1_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Missing_Corner-case_Handling_1_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Missing_Corner-case_Handling_1_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 89 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 583 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 99 ms]
(8) IntTRS
(9) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Missing_Corner-case_Handling_1_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Missing_Corner-case_Handling_1_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Name: flag initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Name: count initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "read" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 16
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = load @flag
		%4 = icmp eq %3 1
		br %4, %8, %5
	5:
		%6 = load @count
		%7 = icmp sgt %6 100
		br %7, %8, %9
	8:
		store 0, %1
		br %24
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%10 = call i32 (...)* @__VERIFIER_nondet_int()
		store %10, %2
		%11 = load %2
		%12 = icmp sle %11 0
		br %12, %13, %14
	13:
		store -1, %1
		br %24
	14:
		%15 = load %2
		%16 = srem i32 %15, 1000
		store %16, %2
		%17 = load %2
		%18 = icmp slt %17 995
		br %18, %19, %23
	19:
		%20 = load @count
		%21 = add i32 %20, 1
		store %21, @count
		%22 = load %2
		store %22, %1
		br %24
	23:
		store 1, @flag
		store 0, %1
		br %24
	24:
		%25 = load %1
		ret %25

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 52
	0:
		%1 = alloca i32, align 4
		store 0, %1
		br %2
	2:
		%3 = call i32 @read()
		%4 = icmp sle %3 0
		br %4, %5, %6
	5:
		br %7
	6:
		br %2
	7:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 37 rulesP rules:
f_231(v1, v5, v132, v134, v3, 0, v31, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) -> f_233(v1, v5, v132, v134, v3, 0, v31, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) :|: 0 = 0
f_233(v1, v5, v132, v134, v3, 0, v31, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) -> f_235(v1, v5, v132, v134, v3, 0, v31, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) :|: TRUE
f_235(v1, v5, v132, v134, v3, 0, v31, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) -> f_236(v1, v5, v132, v134, v3, 0, v31, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) :|: TRUE
f_236(v1, v5, v132, v134, v3, 0, v31, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) -> f_237(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) :|: TRUE
f_237(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) -> f_238(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) :|: TRUE
f_238(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) -> f_239(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) :|: 0 = 0
f_239(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) -> f_241(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) :|: 0 < v150
f_241(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) -> f_243(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) :|: 0 = 0
f_243(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) -> f_245(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) :|: TRUE
f_245(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) -> f_247(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) :|: 0 = 0
f_247(v1, v5, v132, v134, v3, 0, v31, v150, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) -> f_249(v1, v5, v132, v134, v3, 0, v31, v150, v189, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 1, 4, 994, 100, 999) :|: v189 = v150 - v150 / 1000 * 1000 && v189 < 1000 && 0 <= v189
f_249(v1, v5, v132, v134, v3, 0, v31, v150, v189, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 1, 4, 994, 100, 999) -> f_250(v1, v5, v132, v134, v3, 0, v31, v150, v189, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 1, 4, 994, 100, 999) :|: TRUE
f_250(v1, v5, v132, v134, v3, 0, v31, v150, v189, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 1, 4, 994, 100, 999) -> f_251(v1, v5, v132, v134, v3, 0, v31, v150, v189, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 1, 4, 994, 100, 999) :|: 0 = 0
f_251(v1, v5, v132, v134, v3, 0, v31, v150, v189, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 1, 4, 994, 100, 999) -> f_252(v1, v5, v132, v134, v3, 0, v31, v150, v189, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 1, 4, 994, 100) :|: v189 < 995
f_252(v1, v5, v132, v134, v3, 0, v31, v150, v189, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 1, 4, 994, 100) -> f_254(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100) :|: 0 = 0
f_254(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100) -> f_256(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100) :|: TRUE
f_256(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100) -> f_258(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100) :|: 0 = 0
f_258(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100) -> f_260(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v191, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100, 101) :|: v191 = 1 + v31 && v191 <= 101
f_260(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v191, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100, 101) -> f_262(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v191, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100, 101) :|: TRUE
f_262(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v191, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100, 101) -> f_264(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v191, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100, 101) :|: 0 = 0
f_264(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v191, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100, 101) -> f_265(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v191, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100, 101) :|: TRUE
f_265(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v191, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100, 101) -> f_266(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v191, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100, 101) :|: TRUE
f_266(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v191, v2, v6, v9, v10, v133, v135, v23, 3, 1000, 4, 994, 100, 101) -> f_209(v1, v5, v132, v134, v3, 0, v31, v150, v189, 1, v191, v2, v6, v9, v10, v133, v135, 3, 1000, 4, 100, 994, 101) :|: TRUE
f_209(v1, v5, v11, v13, v3, 0, v7, v15, v23, 1, v31, v2, v6, v9, v10, v12, v14, 3, 1000, 4, 100, 994, 101) -> f_211(v1, v5, v11, v13, v3, 0, v7, v15, v23, 1, v31, v2, v6, v9, v10, v12, v14, 3, 1000, 4, 100, 994, 101) :|: 0 = 0
f_211(v1, v5, v11, v13, v3, 0, v7, v15, v23, 1, v31, v2, v6, v9, v10, v12, v14, 3, 1000, 4, 100, 994, 101) -> f_213(v1, v5, v9, v23, v2, v6, v10, v3, 0, v31, 3, 1, 4, 994, 101) :|: 0 = 0
f_213(v1, v5, v9, v23, v2, v6, v10, v3, 0, v31, 3, 1, 4, 994, 101) -> f_216(v1, v5, v9, v23, v2, v6, v10, v3, 0, v31, 3, 1, 4, 994, 101) :|: 0 < v23
f_216(v1, v5, v9, v23, v2, v6, v10, v3, 0, v31, 3, 1, 4, 994, 101) -> f_218(v1, v5, v9, v23, 0, v2, v6, v10, v3, v31, 3, 1, 4, 994, 101) :|: 0 = 0
f_218(v1, v5, v9, v23, 0, v2, v6, v10, v3, v31, 3, 1, 4, 994, 101) -> f_220(v1, v5, v9, v23, 0, v2, v6, v10, v3, v31, 3, 1, 4, 994, 101) :|: TRUE
f_220(v1, v5, v9, v23, 0, v2, v6, v10, v3, v31, 3, 1, 4, 994, 101) -> f_222(v1, v5, v9, v23, 0, v2, v6, v10, v3, v31, 3, 1, 4, 994, 101) :|: TRUE
f_222(v1, v5, v9, v23, 0, v2, v6, v10, v3, v31, 3, 1, 4, 994, 101) -> f_223(v1, v5, v2, v6, v9, v10, v3, 0, v31, v23, 3, 1, 4, 994, 101) :|: TRUE
f_223(v1, v5, v2, v6, v9, v10, v3, 0, v31, v23, 3, 1, 4, 994, 101) -> f_224(v1, v5, v132, v2, v6, v9, v10, v133, v3, 0, v31, v23, 3, 1, 4, 994, 101) :|: 1 <= v132 && v133 = 3 + v132 && 4 <= v133
f_224(v1, v5, v132, v2, v6, v9, v10, v133, v3, 0, v31, v23, 3, 1, 4, 994, 101) -> f_225(v1, v5, v132, v134, v2, v6, v9, v10, v133, v135, v3, 0, v31, v23, 3, 1, 4, 994, 101) :|: 1 <= v134 && v135 = 3 + v134 && 4 <= v135
f_225(v1, v5, v132, v134, v2, v6, v9, v10, v133, v135, v3, 0, v31, v23, 3, 1, 4, 994, 101) -> f_226(v1, v5, v132, v134, v3, v2, v6, v9, v10, v133, v135, 0, v31, v23, 3, 1, 4, 994, 101) :|: 0 = 0
f_226(v1, v5, v132, v134, v3, v2, v6, v9, v10, v133, v135, 0, v31, v23, 3, 1, 4, 994, 101) -> f_227(v1, v5, v132, v134, v3, 0, v2, v6, v9, v10, v133, v135, v31, v23, 3, 1, 4, 994, 101) :|: 0 = 0
f_227(v1, v5, v132, v134, v3, 0, v2, v6, v9, v10, v133, v135, v31, v23, 3, 1, 4, 994, 101) -> f_228(v1, v5, v132, v134, v3, 0, v2, v6, v9, v10, v133, v135, v31, v23, 3, 1, 4, 994, 101) :|: TRUE
f_228(v1, v5, v132, v134, v3, 0, v2, v6, v9, v10, v133, v135, v31, v23, 3, 1, 4, 994, 101) -> f_229(v1, v5, v132, v134, v3, 0, v31, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 101) :|: 0 = 0
f_229(v1, v5, v132, v134, v3, 0, v31, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 101) -> f_231(v1, v5, v132, v134, v3, 0, v31, v2, v6, v9, v10, v133, v135, v23, 3, 1, 4, 994, 100) :|: v31 <= 100
Combined rules. Obtained 1 rulesP rules:
f_231(v1:0, v5:0, v132:0, v134:0, v3:0, 0, v31:0, v2:0, v6:0, v9:0, v10:0, v133:0, v135:0, v23:0, 3, 1, 4, 994, 100) -> f_231(v1:0, v5:0, v132:1, v134:1, v3:0, 0, 1 + v31:0, v2:0, v6:0, v9:0, v10:0, 3 + v132:1, 3 + v134:1, v150:0 - v150:0 / 1000 * 1000, 3, 1, 4, 994, 100) :|: v150:0 - v150:0 / 1000 * 1000 > 0 && v150:0 > 0 && v150:0 - v150:0 / 1000 * 1000 < 1000 && v150:0 - v150:0 / 1000 * 1000 < 995 && v31:0 < 101 && v132:1 > 0 && v134:1 > 0 && v31:0 < 100
Filtered unneeded arguments:
   f_231(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_231(x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_231(v31:0) -> f_231(1 + v31:0) :|: v31:0 < 101 && v31:0 < 100

----------------------------------------

(8)
Obligation:
Rules:
f_231(v31:0) -> f_231(1 + v31:0) :|: v31:0 < 101 && v31:0 < 100

----------------------------------------

(9) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_231(x)] = 99 - x

The following rules are decreasing:
f_231(v31:0) -> f_231(1 + v31:0) :|: v31:0 < 101 && v31:0 < 100
The following rules are bounded:
f_231(v31:0) -> f_231(1 + v31:0) :|: v31:0 < 101 && v31:0 < 100

----------------------------------------

(10)
YES
/home/ubuntu/tool/FSE_benchmark/loop/Missing_Corner-case_Handling_1_T.c:12:16: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int num =  __VERIFIER_nondet_int();
               ^
1 warning generated.

line 91:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
 
