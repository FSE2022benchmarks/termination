timeout 900 ./AProVE.sh -m wst --bit-width 64 Missing_Initialization_1_NT.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Missing_Initialization_1_NT.c
NO
proof of /home/ubuntu/tool/FSE_benchmark/loop/Missing_Initialization_1_NT.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 69 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 468 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToLassoProof [COMPLETE, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution Lasso
        (8) Lasso2IRS [EQUIVALENT, 76 ms]
        (9) IntTRS
        (10) IRS2T2 [EQUIVALENT, 0 ms]
        (11) T2IntSys
    (12) LLVM Symbolic Execution Lasso
        (13) Lasso2IRS [EQUIVALENT, 69 ms]
        (14) IntTRS
        (15) IRS2T2 [EQUIVALENT, 0 ms]
        (16) T2IntSys
        (17) T2 [COMPLETE, 542 ms]
        (18) NO


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Missing_Initialization_1_NT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Missing_Initialization_1_NT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		store 0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 (...)* @__VERIFIER_nondet_int()
		store %4, %3
		br %5
	5:
		%6 = load %3
		%7 = icmp slt %6 10
		br %7, %8, %17
	8:
		br %9
	9:
		%10 = load %2
		%11 = icmp eq %10 0
		br %11, %12, %16
	12:
		%13 = call i32 (...)* @__VERIFIER_nondet_int()
		store %13, %2
		%14 = load %3
		%15 = add i32 %14, 1
		store %15, %3
		br %9
	16:
		br %5
	17:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToLassoProof (COMPLETE)
Converted SEGraph to 2 dependent lassos.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Lasso
----------------------------------------

(8) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 42 rulesP rules:
f_199(v84, v85, v86, v87, v88, 1, v90, 0, v92, v93, v94, v95, v96, 3, 9, 4) -> f_200(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 9, 4) :|: 0 = 0
f_200(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 9, 4) -> f_201(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) :|: v93 < 10 && v92 <= 8 && v87 <= 8
f_201(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) -> f_203(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) :|: 0 = 0
f_203(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) -> f_205(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) :|: TRUE
f_205(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) -> f_207(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) :|: TRUE
f_207(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) -> f_208(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) :|: 0 = 0
f_208(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) -> f_209(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) :|: 0 = 0
f_209(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) -> f_210(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) :|: TRUE
f_210(v84, v85, v86, v87, v93, 1, v90, 0, v92, v94, v95, v96, 3, 8, 9, 4) -> f_198(v84, v85, v86, v87, v93, 1, v90, 0, v92, v93, v94, v95, v96, 3, 9, 4) :|: TRUE
f_198(v84, v85, v86, v87, v88, 1, v90, 0, v92, v93, v94, v95, v96, 3, 9, 4) -> f_199(v84, v85, v86, v87, v88, 1, v90, 0, v92, v93, v94, v95, v96, 3, 9, 4) :|: TRUE
f_79 -> f_80(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_80(v1, v2, 3, 1, 4) -> f_81(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_81(v1, v3, v2, v4, 3, 1, 4) -> f_82(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_82(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_83(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_83(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_84(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_84(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_85(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_85(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_86(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_86(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_87(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_87(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_88(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_88(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_89(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_89(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_90(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: 0 = 0
f_90(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_91(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4, 9) :|: v7 < 10
f_91(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4, 9) -> f_93(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) :|: 0 = 0
f_93(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) -> f_95(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) :|: TRUE
f_95(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) -> f_97(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) :|: TRUE
f_97(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) -> f_98(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) :|: 0 = 0
f_98(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) -> f_99(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) :|: 0 = 0
f_99(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) -> f_100(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) :|: TRUE
f_100(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) -> f_101(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) :|: TRUE
f_101(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) -> f_102(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) :|: TRUE
f_102(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) -> f_103(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) :|: 0 = 0
f_103(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) -> f_104(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) :|: v11 = 1 + v7 && v11 <= 10
f_104(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) -> f_105(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) :|: TRUE
f_105(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) -> f_106(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) :|: TRUE
f_106(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) -> f_128(v1, v3, v5, v7, 1, 0, v9, v7, v11, v2, v4, v6, 3, 9, 10, 11, 4) :|: TRUE
f_128(v17, v18, v19, v20, 1, 0, v23, v24, v25, v26, v27, v28, 3, 9, 10, 11, 4) -> f_150(v17, v18, v19, v20, 1, 0, v23, v24, v25, v26, v27, v28, 3, 9, 11, 12, 4) :|: TRUE
f_150(v33, v34, v35, v36, 1, 0, v39, v40, v41, v42, v43, v44, 3, 9, 11, 12, 4) -> f_172(v33, v34, v35, v36, 1, 0, v39, v40, v41, v42, v43, v44, 3, 9, 4) :|: TRUE
f_172(v49, v50, v51, v52, 1, 0, v55, v56, v57, v58, v59, v60, 3, 9, 4) -> f_173(v49, v50, v51, v52, 1, v55, v56, v57, v58, v59, v60, 0, 3, 9, 4) :|: 0 = 0
f_173(v49, v50, v51, v52, 1, v55, v56, v57, v58, v59, v60, 0, 3, 9, 4) -> f_175(v49, v50, v51, v52, 1, v55, v56, v57, v58, v59, v60, 0, 3, 9, 4) :|: v55 != 0
f_175(v49, v50, v51, v52, 1, v55, v56, v57, v58, v59, v60, 0, 3, 9, 4) -> f_177(v49, v50, v51, v52, 1, v55, 0, v56, v57, v58, v59, v60, 3, 9, 4) :|: 0 = 0
f_177(v49, v50, v51, v52, 1, v55, 0, v56, v57, v58, v59, v60, 3, 9, 4) -> f_179(v49, v50, v51, v52, 1, v55, 0, v56, v57, v58, v59, v60, 3, 9, 4) :|: TRUE
f_179(v49, v50, v51, v52, 1, v55, 0, v56, v57, v58, v59, v60, 3, 9, 4) -> f_198(v49, v50, v51, v52, v52, 1, v55, 0, v56, v57, v58, v59, v60, 3, 9, 4) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_199(v84:0, v85:0, v86:0, v87:0, v88:0, 1, v90:0, 0, v92:0, v93:0, v94:0, v95:0, v96:0, 3, 9, 4) -> f_199(v84:0, v85:0, v86:0, v87:0, v93:0, 1, v90:0, 0, v92:0, v93:0, v94:0, v95:0, v96:0, 3, 9, 4) :|: v92:0 < 9 && v87:0 < 9 && v93:0 < 10
f_79 -> f_199(v1:0, v3:0, v5:0, v7:0, v7:0, 1, v9:0, 0, v7:0, 1 + v7:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 9, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 < 10 && v9:0 < 0
f_79 -> f_199(v1:0, v3:0, v5:0, v7:0, v7:0, 1, v9:0, 0, v7:0, 1 + v7:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3, 9, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 < 10 && v9:0 > 0
Filtered unneeded arguments:
   f_199(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_199(x4, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_199(v87:0, v92:0, v93:0) -> f_199(v87:0, v92:0, v93:0) :|: v87:0 < 9 && v93:0 < 10 && v92:0 < 9
f_79 -> f_199(v7:0, v7:0, 1 + v7:0) :|: v7:0 < 10

----------------------------------------

(9)
Obligation:
Rules:
f_199(v87:0, v92:0, v93:0) -> f_199(v87:0, v92:0, v93:0) :|: v87:0 < 9 && v93:0 < 10 && v92:0 < 9
f_79 -> f_199(v7:0, v7:0, 1 + v7:0) :|: v7:0 < 10
Start term: f_79

----------------------------------------

(10) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_199_3,1)
   (f_79_3,2)

----------------------------------------

(11)
Obligation:
START: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
assume(oldX0 < 9 && oldX2 < 10 && oldX1 < 9);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := nondet();
assume(oldX3 < 10);
x0 := oldX3;
x1 := oldX3;
x2 := 1 + oldX3;
TO: 1;


----------------------------------------

(12)
Obligation:
Lasso
----------------------------------------

(13) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 38 rulesP rules:
f_173(v49, v50, v51, v52, 1, v55, v56, v57, v58, v59, v60, 0, 3, 9, 4) -> f_174(v49, v50, v51, v52, 1, 0, v56, v57, v58, v59, v60, 3, 9, 4) :|: v55 = 0
f_174(v49, v50, v51, v52, 1, 0, v56, v57, v58, v59, v60, 3, 9, 4) -> f_176(v49, v50, v51, v52, 1, 0, v56, v57, v58, v59, v60, 3, 9, 4) :|: 0 = 0
f_176(v49, v50, v51, v52, 1, 0, v56, v57, v58, v59, v60, 3, 9, 4) -> f_178(v49, v50, v51, v52, 1, 0, v56, v57, v58, v59, v60, 3, 9, 4) :|: TRUE
f_178(v49, v50, v51, v52, 1, 0, v56, v57, v58, v59, v60, 3, 9, 4) -> f_180(v49, v50, v51, v52, 1, 0, v61, v56, v57, v58, v59, v60, 3, 9, 4) :|: TRUE
f_180(v49, v50, v51, v52, 1, 0, v61, v56, v57, v58, v59, v60, 3, 9, 4) -> f_182(v49, v50, v51, v52, 1, 0, v61, v56, v57, v58, v59, v60, 3, 9, 4) :|: TRUE
f_182(v49, v50, v51, v52, 1, 0, v61, v56, v57, v58, v59, v60, 3, 9, 4) -> f_184(v49, v50, v51, v52, 1, 0, v61, v57, v58, v59, v60, 3, 9, 4) :|: 0 = 0
f_184(v49, v50, v51, v52, 1, 0, v61, v57, v58, v59, v60, 3, 9, 4) -> f_187(v49, v50, v51, v52, 1, 0, v61, v57, v63, v58, v59, v60, 3, 9, 4) :|: v63 = 1 + v57
f_187(v49, v50, v51, v52, 1, 0, v61, v57, v63, v58, v59, v60, 3, 9, 4) -> f_190(v49, v50, v51, v52, 1, 0, v61, v57, v63, v58, v59, v60, 3, 9, 4) :|: TRUE
f_190(v49, v50, v51, v52, 1, 0, v61, v57, v63, v58, v59, v60, 3, 9, 4) -> f_193(v49, v50, v51, v52, 1, 0, v61, v57, v63, v58, v59, v60, 3, 9, 4) :|: TRUE
f_193(v49, v50, v51, v52, 1, 0, v61, v57, v63, v58, v59, v60, 3, 9, 4) -> f_172(v49, v50, v51, v52, 1, 0, v61, v57, v63, v58, v59, v60, 3, 9, 4) :|: TRUE
f_172(v49, v50, v51, v52, 1, 0, v55, v56, v57, v58, v59, v60, 3, 9, 4) -> f_173(v49, v50, v51, v52, 1, v55, v56, v57, v58, v59, v60, 0, 3, 9, 4) :|: 0 = 0
f_79 -> f_80(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_80(v1, v2, 3, 1, 4) -> f_81(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_81(v1, v3, v2, v4, 3, 1, 4) -> f_82(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_82(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_83(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_83(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_84(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_84(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_85(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_85(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_86(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_86(v1, v3, v5, v2, v4, v6, 0, 3, 1, 4) -> f_87(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_87(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_88(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_88(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_89(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: TRUE
f_89(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_90(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) :|: 0 = 0
f_90(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4) -> f_91(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4, 9) :|: v7 < 10
f_91(v1, v3, v5, v7, v2, v4, v6, 0, 3, 1, 4, 9) -> f_93(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) :|: 0 = 0
f_93(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) -> f_95(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) :|: TRUE
f_95(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) -> f_97(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) :|: TRUE
f_97(v1, v3, v5, v7, 1, v2, v4, v6, 0, 3, 4, 9) -> f_98(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) :|: 0 = 0
f_98(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) -> f_99(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) :|: 0 = 0
f_99(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) -> f_100(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) :|: TRUE
f_100(v1, v3, v5, v7, 1, 0, v2, v4, v6, 3, 4, 9) -> f_101(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) :|: TRUE
f_101(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) -> f_102(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) :|: TRUE
f_102(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) -> f_103(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) :|: 0 = 0
f_103(v1, v3, v5, v7, 1, 0, v9, v2, v4, v6, 3, 4, 9) -> f_104(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) :|: v11 = 1 + v7 && v11 <= 10
f_104(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) -> f_105(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) :|: TRUE
f_105(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) -> f_106(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) :|: TRUE
f_106(v1, v3, v5, v7, 1, 0, v9, v11, v2, v4, v6, 3, 4, 9, 10) -> f_128(v1, v3, v5, v7, 1, 0, v9, v7, v11, v2, v4, v6, 3, 9, 10, 11, 4) :|: TRUE
f_128(v17, v18, v19, v20, 1, 0, v23, v24, v25, v26, v27, v28, 3, 9, 10, 11, 4) -> f_150(v17, v18, v19, v20, 1, 0, v23, v24, v25, v26, v27, v28, 3, 9, 11, 12, 4) :|: TRUE
f_150(v33, v34, v35, v36, 1, 0, v39, v40, v41, v42, v43, v44, 3, 9, 11, 12, 4) -> f_172(v33, v34, v35, v36, 1, 0, v39, v40, v41, v42, v43, v44, 3, 9, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_79 -> f_173(v1:0, v3:0, v5:0, v7:0, 1, v9:0, v7:0, 1 + v7:0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 0, 3, 9, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 < 10
f_173(v49:0, v50:0, v51:0, v52:0, 1, 0, v56:0, v57:0, v58:0, v59:0, v60:0, 0, 3, 9, 4) -> f_173(v49:0, v50:0, v51:0, v52:0, 1, v61:0, v57:0, 1 + v57:0, v58:0, v59:0, v60:0, 0, 3, 9, 4) :|: TRUE
Filtered unneeded arguments:
   f_173(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_173(x6)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_79 -> f_173(v9:0) :|: TRUE
f_173(cons_0) -> f_173(v61:0) :|: TRUE && cons_0 = 0

----------------------------------------

(14)
Obligation:
Rules:
f_79 -> f_173(v9:0) :|: TRUE
f_173(cons_0) -> f_173(v61:0) :|: TRUE && cons_0 = 0
Start term: f_79

----------------------------------------

(15) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_79_1,1)
   (f_173_1,2)

----------------------------------------

(16)
Obligation:
START: 1;

FROM: 1;
oldX0 := x0;
oldX1 := nondet();
assume(0 = 0);
x0 := oldX1;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := nondet();
assume(0 = 0 && oldX0 = 0);
x0 := oldX1;
TO: 2;


----------------------------------------

(17) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 5: oldX1 == 0 and x0 == 0

----------------------------------------

(18)
NO
/home/ubuntu/tool/FSE_benchmark/loop/Missing_Initialization_1_NT.c:8:15: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int pkt = __VERIFIER_nondet_int();
              ^
1 warning generated.

line 53:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
 
