timeout 900 ./AProVE.sh -m wst --bit-width 64 Missing_Iterator_Update_1_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Missing_Iterator_Update_1_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_1_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 86 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 486 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 110 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 10 ms]
(10) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_1_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_1_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Name: errno initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: null section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "waitpid" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 14
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 (...)* @__VERIFIER_nondet_int()
		store %3, %2
		br %4
	4:
		%5 = load %2
		%6 = icmp slt %5 0
		br %6, %7, %17
	7:
		%8 = call i32 (...)* @__VERIFIER_nondet_int()
		%9 = icmp ne %8 0
		br %9, %10, %14
	10:
		%11 = load @errno
		%12 = icmp ne %11 1
		br %12, %13, %14
	13:
		store 1, @errno
		br %15
	14:
		store 2, @errno
		br %15
	15:
		%16 = load %2
		store %16, %1
		br %19
	17:
		%18 = load %2
		store %18, %1
		br %19
	19:
		%20 = load %1
		ret %20

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 38
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @waitpid()
		store %3, %2
		br %4
	4:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%5 = load %2
		%6 = icmp eq %5 0
		br %6, %7, %19
	7:
		br %8
	8:
		%9 = call i32 @waitpid()
		store %9, %2
		br %10
	10:
		%11 = load %2
		%12 = icmp slt %11 0
		br %12, %13, %16
	13:
		%14 = load @errno
		%15 = icmp eq %14 1
		br %16
	16:
		%17 = phi [0, %10], [%15, %13]
		br %17, %8, %18
	18:
		br %19
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 36 rulesP rules:
f_330(v304, v314, v309, v305, v310, v306, v311, v315, v312, 0, v313, 1, 3, 4) -> f_331(v304, v314, v316, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) :|: 1 <= v316 && v317 = 3 + v316 && 4 <= v317
f_331(v304, v314, v316, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) -> f_332(v304, v314, v316, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) :|: TRUE
f_332(v304, v314, v316, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) -> f_333(v304, v314, v316, v318, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) :|: TRUE
f_333(v304, v314, v316, v318, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) -> f_334(v304, v314, v316, v318, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) :|: TRUE
f_334(v304, v314, v316, v318, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) -> f_335(v304, v314, v316, v318, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) :|: TRUE
f_335(v304, v314, v316, v318, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) -> f_336(v304, v314, v316, v318, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) :|: 0 = 0
f_336(v304, v314, v316, v318, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) -> f_337(v304, v314, v316, v318, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) :|: v318 < 0
f_337(v304, v314, v316, v318, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 1, 3, 4) -> f_339(v304, v314, v316, v318, 1, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) :|: 0 = 0
f_339(v304, v314, v316, v318, 1, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) -> f_341(v304, v314, v316, v318, 1, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) :|: TRUE
f_341(v304, v314, v316, v318, 1, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) -> f_343(v304, v314, v316, v318, 1, v320, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) :|: TRUE
f_343(v304, v314, v316, v318, 1, v320, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) -> f_345(v304, v314, v316, v318, 1, v320, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) :|: v320 != 0
f_345(v304, v314, v316, v318, 1, v320, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) -> f_348(v304, v314, v316, v318, 1, v320, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) :|: 0 = 0
f_348(v304, v314, v316, v318, 1, v320, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) -> f_351(v304, v314, v316, v318, 1, v320, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) :|: TRUE
f_351(v304, v314, v316, v318, 1, v320, v309, v305, v310, v306, v311, v315, v317, v312, 0, v313, 3, 4) -> f_354(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) :|: 0 = 0
f_354(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) -> f_357(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) :|: v312 != 1
f_357(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) -> f_361(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) :|: 0 = 0
f_361(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) -> f_365(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) :|: TRUE
f_365(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) -> f_369(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) :|: TRUE
f_369(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) -> f_373(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) :|: TRUE
f_373(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) -> f_377(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) :|: 0 = 0
f_377(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) -> f_381(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) :|: TRUE
f_381(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) -> f_385(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) :|: TRUE
f_385(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) -> f_388(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) :|: 0 = 0
f_388(v304, v314, v316, v318, 1, v320, v312, v309, v305, v310, v306, v311, v315, v317, 0, v313, 3, 4) -> f_391(v304, v305, v306, 0, 1, v318, v309, v310, v311, v313, 3, 4) :|: 0 = 0
f_391(v304, v305, v306, 0, 1, v318, v309, v310, v311, v313, 3, 4) -> f_394(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) :|: TRUE
f_394(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) -> f_397(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) :|: TRUE
f_397(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) -> f_400(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) :|: 0 = 0
f_400(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) -> f_402(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) :|: 0 = 0
f_402(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) -> f_404(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) :|: TRUE
f_404(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) -> f_406(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) :|: 0 = 0
f_406(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) -> f_408(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) :|: 0 = 0
f_408(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) -> f_409(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) :|: 0 = 0
f_409(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) -> f_410(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) :|: TRUE
f_410(v304, v305, v306, 0, 1, v318, v309, v310, v311, 3, 4) -> f_411(v304, v309, v305, v310, v306, v311, 0, 1, v318, 3, 4) :|: TRUE
f_411(v304, v309, v305, v310, v306, v311, 0, 1, v318, 3, 4) -> f_329(v304, v309, v305, v310, v306, v311, 1, 0, v318, 1, 3, 4) :|: TRUE
f_329(v304, v309, v305, v310, v306, v311, v312, 0, v313, 1, 3, 4) -> f_330(v304, v314, v309, v305, v310, v306, v311, v315, v312, 0, v313, 1, 3, 4) :|: 1 <= v314 && v315 = 3 + v314 && 4 <= v315
Combined rules. Obtained 4 rulesP rules:
f_330(v304:0, v314:0, v309:0, v305:0, v310:0, v306:0, v311:0, v315:0, v312:0, 0, v313:0, 1, 3, 4) -> f_330(v304:0, v314:1, v309:0, v305:0, v310:0, v306:0, v311:0, 3 + v314:1, 1, 0, v318:0, 1, 3, 4) :|: v316:0 > 0 && v318:0 < 0 && v320:0 < 0 && v312:0 < 1 && v314:1 > 0
f_330(v304:0, v314:0, v309:0, v305:0, v310:0, v306:0, v311:0, v315:0, v312:0, 0, v313:0, 1, 3, 4) -> f_330(v304:0, v314:1, v309:0, v305:0, v310:0, v306:0, v311:0, 3 + v314:1, 1, 0, v318:0, 1, 3, 4) :|: v316:0 > 0 && v318:0 < 0 && v320:0 < 0 && v312:0 > 1 && v314:1 > 0
f_330(v304:0, v314:0, v309:0, v305:0, v310:0, v306:0, v311:0, v315:0, v312:0, 0, v313:0, 1, 3, 4) -> f_330(v304:0, v314:1, v309:0, v305:0, v310:0, v306:0, v311:0, 3 + v314:1, 1, 0, v318:0, 1, 3, 4) :|: v316:0 > 0 && v318:0 < 0 && v320:0 > 0 && v312:0 < 1 && v314:1 > 0
f_330(v304:0, v314:0, v309:0, v305:0, v310:0, v306:0, v311:0, v315:0, v312:0, 0, v313:0, 1, 3, 4) -> f_330(v304:0, v314:1, v309:0, v305:0, v310:0, v306:0, v311:0, 3 + v314:1, 1, 0, v318:0, 1, 3, 4) :|: v316:0 > 0 && v318:0 < 0 && v320:0 > 0 && v312:0 > 1 && v314:1 > 0
Filtered unneeded arguments:
   f_330(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_330(x9)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_330(v312:0) -> f_330(1) :|: v312:0 < 1
f_330(v312:0) -> f_330(1) :|: v312:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_330(v312:0) -> f_330(1) :|: v312:0 < 1
f_330(x) -> f_330(1) :|: x > 1

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(10)
YES
/home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_1_T.c:13:15: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int num = __VERIFIER_nondet_int();
              ^
1 warning generated.

line 109:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
 
