timeout 900 ./AProVE.sh -m wst --bit-width 64 Missing_Iterator_Update_4_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Missing_Iterator_Update_4_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_4_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 89 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3234 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 118 ms]
        (9) IntTRS
        (10) IRS2T2 [EQUIVALENT, 0 ms]
        (11) T2IntSys
        (12) T2 [EQUIVALENT, 443 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 70 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 75 ms]
        (23) IntTRS
        (24) IRS2T2 [EQUIVALENT, 0 ms]
        (25) T2IntSys
        (26) T2 [EQUIVALENT, 290 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_4_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_4_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%7 = call i32 (...)* @__VERIFIER_nondet_int()
		store %7, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%8 = call i32 (...)* @__VERIFIER_nondet_int()
		store %8, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%9 = call i32 (...)* @__VERIFIER_nondet_int()
		store %9, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%10 = call i32 (...)* @__VERIFIER_nondet_int()
		store %10, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		%11 = call i32 (...)* @__VERIFIER_nondet_int()
		store %11, %6
		%12 = load %3
		%13 = icmp slt %12 0
		br %13, %23, %14
	14:
		%15 = load %6
		%16 = icmp slt %15 0
		br %16, %23, %17
	17:
		%18 = load %3
		%19 = icmp sgt %18 65534
		br %19, %23, %20
	20:
		%21 = load %6
		%22 = icmp sgt %21 65534
		br %22, %23, %24
	23:
		store 0, %1
		br %45
	24:
		store 0, %2
		br %25
	25:
		%26 = load %2
		%27 = load %3
		%28 = icmp slt %26 %27
		br %28, %29, %44
	29:
		store 0, %4
		br %30
	30:
		%31 = load %4
		%32 = load %6
		%33 = icmp slt %31 %32
		br %33, %34, %38
	34:
		br %35
	35:
		%36 = load %4
		%37 = add i32 %36, 1
		store %37, %4
		br %30
	38:
		%39 = load %5
		%40 = add i32 %39, 1
		store %40, %5
		br %41
	41:
		%42 = load %2
		%43 = add i32 %42, 1
		store %43, %2
		br %25
	44:
		store 0, %1
		br %45
	45:
		%46 = load %1
		ret %46


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 35 rulesP rules:
f_836(v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, 0, v3333, 1, v3335, v3336, v3337, v3338, v3339, v3340, v3341, v3342, v3343, v3344, 3, 2, 4) -> f_838(v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, 0, v3333, 1, v3335, v3336, v3337, v3338, v3339, v3340, v3341, v3342, v3343, v3344, 3, 2, 4) :|: 0 = 0
f_838(v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, 0, v3333, 1, v3335, v3336, v3337, v3338, v3339, v3340, v3341, v3342, v3343, v3344, 3, 2, 4) -> f_839(v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, 0, v3333, 1, v3335, v3336, v3337, v3338, v3339, v3340, v3341, v3342, v3343, v3344, 3, 2, 4) :|: 0 = 0
f_839(v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, 0, v3333, 1, v3335, v3336, v3337, v3338, v3339, v3340, v3341, v3342, v3343, v3344, 3, 2, 4) -> f_840(v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, 0, v3333, 1, v3335, v3336, v3337, v3338, v3339, v3340, v3341, v3342, v3343, v3344, 3, 2, 4) :|: TRUE
f_840(v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, 0, v3333, 1, v3335, v3336, v3337, v3338, v3339, v3340, v3341, v3342, v3343, v3344, 3, 2, 4) -> f_841(v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, 0, v3333, 1, 0, v3335, v3331, v3336, v3337, v3338, v3339, v3340, v3341, v3342, v3343, v3344, 3, 2, 4) :|: TRUE
f_841(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3449, v3450, v3451, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_842(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3449, v3450, v3451, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: TRUE
f_842(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3449, v3450, v3451, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_843(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3449, v3451, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: 0 = 0
f_843(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3449, v3451, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_844(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3449, v3471, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: v3471 = 1 + v3449 && 1 <= v3471
f_844(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3449, v3471, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_845(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3449, v3471, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: TRUE
f_845(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3449, v3471, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_846(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3449, v3471, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: TRUE
f_846(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3449, v3471, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_847(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: 0 = 0
f_847(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_848(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: 0 = 0
f_848(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_849(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: v3471 < v3445 && 2 <= v3445
f_848(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_850(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: v3445 <= v3471 && v3445 = v3471
f_849(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_851(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: 0 = 0
f_851(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_853(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: TRUE
f_853(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_841(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3445, 0, v3447, 1, v3471, v3449, v3471, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: TRUE
f_850(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_852(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: 0 = 0
f_852(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_854(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: TRUE
f_854(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3452, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_855(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: 0 = 0
f_855(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_856(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: v3583 = 1 + v3453
f_856(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_857(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: TRUE
f_857(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_858(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: TRUE
f_858(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3454, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_859(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: 0 = 0
f_859(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_860(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3607, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: v3607 = 1 + v3447 && 2 <= v3607
f_860(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3607, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_861(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3607, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: TRUE
f_861(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3607, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_862(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3607, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: TRUE
f_862(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3447, 1, v3449, v3453, v3583, v3607, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_863(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: 0 = 0
f_863(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_864(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: 0 = 0
f_864(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) -> f_865(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 4, 2) :|: v3607 < v3442 && 3 <= v3442
f_865(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 4, 2) -> f_867(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 4, 2) :|: 0 = 0
f_867(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 4, 2) -> f_869(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 4, 2) :|: TRUE
f_869(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 4, 2) -> f_871(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 4, 2) :|: TRUE
f_871(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 4, 2) -> f_873(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 4, 2) :|: TRUE
f_873(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 4, 2) -> f_834(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442, v3443, v3444, v3471, 0, v3607, 1, v3449, v3453, v3583, v3447, v3455, v3456, v3457, v3458, v3459, v3460, 3, 2, 4) :|: TRUE
f_834(v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, 0, v3333, 1, v3335, v3336, v3337, v3338, v3339, v3340, v3341, v3342, v3343, v3344, 3, 2, 4) -> f_836(v3321, v3322, v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330, v3331, 0, v3333, 1, v3335, v3336, v3337, v3338, v3339, v3340, v3341, v3342, v3343, v3344, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_848(v3435:0, v3436:0, v3437:0, v3438:0, v3439:0, v3440:0, v3441:0, v3442:0, v3443:0, v3444:0, v3445:0, 0, v3447:0, 1, v3445:0, v3449:0, v3452:0, v3453:0, v3454:0, v3455:0, v3456:0, v3457:0, v3458:0, v3459:0, v3460:0, 3, 2, 4) -> f_848(v3435:0, v3436:0, v3437:0, v3438:0, v3439:0, v3440:0, v3441:0, v3442:0, v3443:0, v3444:0, v3445:0, 0, 1 + v3447:0, 1, 1, 0, v3453:0, 1 + v3453:0, v3447:0, v3455:0, v3456:0, v3457:0, v3458:0, v3459:0, v3460:0, 3, 2, 4) :|: v3447:0 > 0 && v3442:0 > 1 + v3447:0 && v3442:0 > 2
f_848(v3435:0, v3436:0, v3437:0, v3438:0, v3439:0, v3440:0, v3441:0, v3442:0, v3443:0, v3444:0, v3445:0, 0, v3447:0, 1, v3471:0, v3449:0, v3452:0, v3453:0, v3454:0, v3455:0, v3456:0, v3457:0, v3458:0, v3459:0, v3460:0, 3, 2, 4) -> f_848(v3435:0, v3436:0, v3437:0, v3438:0, v3439:0, v3440:0, v3441:0, v3442:0, v3443:0, v3444:0, v3445:0, 0, v3447:0, 1, 1 + v3471:0, v3471:0, v3452:0, v3453:0, v3454:0, v3455:0, v3456:0, v3457:0, v3458:0, v3459:0, v3460:0, 3, 2, 4) :|: v3471:0 > -1 && v3471:0 < v3445:0 && v3445:0 > 1
Filtered unneeded arguments:
   f_848(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28) -> f_848(x8, x11, x13, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_848(v3442:0, v3445:0, v3447:0, v3445:01) -> f_848(v3442:0, v3445:0, 1 + v3447:0, 1) :|: v3442:0 > 1 + v3447:0 && v3442:0 > 2 && v3447:0 > 0 && v3445:0 = v3445:01
f_848(v3442:0, v3445:0, v3447:0, v3471:0) -> f_848(v3442:0, v3445:0, v3447:0, 1 + v3471:0) :|: v3471:0 < v3445:0 && v3445:0 > 1 && v3471:0 > -1

----------------------------------------

(9)
Obligation:
Rules:
f_848(v3442:0, v3445:0, v3447:0, v3445:01) -> f_848(v3442:0, v3445:0, 1 + v3447:0, 1) :|: v3442:0 > 1 + v3447:0 && v3442:0 > 2 && v3447:0 > 0 && v3445:0 = v3445:01
f_848(x, x1, x2, x3) -> f_848(x, x1, x2, 1 + x3) :|: x3 < x1 && x1 > 1 && x3 > -1

----------------------------------------

(10) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_848_4,1)

----------------------------------------

(11)
Obligation:
START: 0;

FROM: 0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
assume(oldX0 > 1 + oldX2 && oldX0 > 2 && oldX2 > 0 && oldX1 = oldX3);
x0 := oldX0;
x1 := oldX1;
x2 := 1 + oldX2;
x3 := 1;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
assume(oldX3 < oldX1 && oldX1 > 1 && oldX3 > -1);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := 1 + oldX3;
TO: 1;


----------------------------------------

(12) T2 (EQUIVALENT)
Termination proof succeeded
Initially, performed program simplifications using lexicographic rank functions:
 * Removed transitions 1, 4, 5 using the following rank functions:
    - Rank function 1:
      RF for loc. 5: 2*x0-2*x2
      RF for loc. 6: 2*x0-2*x2
      Bound for (chained) transitions 4: 4
    - Rank function 2:
      RF for loc. 5: 2*x1-2*x3
      RF for loc. 6: -1+2*x1-2*x3
      Bound for (chained) transitions 5: 1
    - Rank function 3:
      RF for loc. 5: 0
      RF for loc. 6: -1
      Bound for (chained) transitions 1: 0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_583(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 4) -> f_585(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 4) :|: 0 = 0
f_585(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 4) -> f_587(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: v1184 < v1176 && 2 <= v1176
f_587(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_591(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: 0 = 0
f_591(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_595(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: TRUE
f_595(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_599(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: TRUE
f_599(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_602(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: TRUE
f_602(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_605(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: 0 = 0
f_605(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_608(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: 0 = 0
f_608(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_610(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: 0 = 0
f_610(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_612(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: TRUE
f_612(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_614(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: 0 = 0
f_614(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_616(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: v1397 = 1 + v1183
f_616(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_619(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: TRUE
f_619(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_622(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: TRUE
f_622(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_625(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: 0 = 0
f_625(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_627(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1458, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: v1458 = 1 + v1184 && 2 <= v1458
f_627(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1458, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_629(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1458, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: TRUE
f_629(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1458, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_631(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1458, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) :|: TRUE
f_631(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1458, v1185, v1186, v1187, v1188, v1189, v1190, 3, 2, 4) -> f_581(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1183, v1397, v1458, v1185, v1186, v1187, v1188, v1189, v1190, 3, 4) :|: TRUE
f_581(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1180, 1, v1182, v1183, v1184, v1185, v1186, v1187, v1188, v1189, v1190, 3, 4) -> f_583(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178, 0, v1184, 1, v1182, v1183, v1180, v1185, v1186, v1187, v1188, v1189, v1190, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_583(v1169:0, v1170:0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, v1177:0, v1178:0, 0, v1184:0, 1, v1182:0, v1183:0, v1180:0, v1185:0, v1186:0, v1187:0, v1188:0, v1189:0, v1190:0, 3, 4) -> f_583(v1169:0, v1170:0, v1171:0, v1172:0, v1173:0, v1174:0, v1175:0, v1176:0, v1177:0, v1178:0, 0, 1 + v1184:0, 1, v1183:0, 1 + v1183:0, v1184:0, v1185:0, v1186:0, v1187:0, v1188:0, v1189:0, v1190:0, 3, 4) :|: v1176:0 > 1 && v1184:0 > 0 && v1184:0 < v1176:0
Filtered unneeded arguments:
   f_583(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24) -> f_583(x8, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_583(v1176:0, v1184:0) -> f_583(v1176:0, 1 + v1184:0) :|: v1184:0 > 0 && v1184:0 < v1176:0 && v1176:0 > 1

----------------------------------------

(16)
Obligation:
Rules:
f_583(v1176:0, v1184:0) -> f_583(v1176:0, 1 + v1184:0) :|: v1184:0 > 0 && v1184:0 < v1176:0 && v1176:0 > 1

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_583(v1176:0:0, v1184:0:0) -> f_583(v1176:0:0, 1 + v1184:0:0) :|: v1184:0:0 > 0 && v1184:0:0 < v1176:0:0 && v1176:0:0 > 1

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_583 ] = -1*f_583_2 + f_583_1

The following rules are decreasing:
f_583(v1176:0:0, v1184:0:0) -> f_583(v1176:0:0, 1 + v1184:0:0) :|: v1184:0:0 > 0 && v1184:0:0 < v1176:0:0 && v1176:0:0 > 1

The following rules are bounded:
f_583(v1176:0:0, v1184:0:0) -> f_583(v1176:0:0, 1 + v1184:0:0) :|: v1184:0:0 > 0 && v1184:0:0 < v1176:0:0 && v1176:0:0 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 11 rulesP rules:
f_451(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 4) -> f_453(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 4) :|: 0 = 0
f_453(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 4) -> f_455(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 2, 4) :|: v505 < v501 && 2 <= v501
f_455(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 2, 4) -> f_458(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 2, 4) :|: 0 = 0
f_458(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 2, 4) -> f_461(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 2, 4) :|: TRUE
f_461(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 2, 4) -> f_464(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 2, 4) :|: TRUE
f_464(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 2, 4) -> f_467(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v506, v507, v508, v509, v510, v511, 3, 2, 4) :|: 0 = 0
f_467(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v506, v507, v508, v509, v510, v511, 3, 2, 4) -> f_470(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v537, v506, v507, v508, v509, v510, v511, 3, 2, 4) :|: v537 = 1 + v505 && 2 <= v537
f_470(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v537, v506, v507, v508, v509, v510, v511, 3, 2, 4) -> f_473(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v537, v506, v507, v508, v509, v510, v511, 3, 2, 4) :|: TRUE
f_473(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v537, v506, v507, v508, v509, v510, v511, 3, 2, 4) -> f_476(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v537, v506, v507, v508, v509, v510, v511, 3, 2, 4) :|: TRUE
f_476(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v537, v506, v507, v508, v509, v510, v511, 3, 2, 4) -> f_449(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v537, v506, v507, v508, v509, v510, v511, 3, 4) :|: TRUE
f_449(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v504, v505, v506, v507, v508, v509, v510, v511, 3, 4) -> f_451(v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, 0, 1, v505, v504, v506, v507, v508, v509, v510, v511, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_451(v491:0, v492:0, v493:0, v494:0, v495:0, v496:0, v497:0, v498:0, v499:0, v500:0, v501:0, 0, 1, v505:0, v504:0, v506:0, v507:0, v508:0, v509:0, v510:0, v511:0, 3, 4) -> f_451(v491:0, v492:0, v493:0, v494:0, v495:0, v496:0, v497:0, v498:0, v499:0, v500:0, v501:0, 0, 1, 1 + v505:0, v505:0, v506:0, v507:0, v508:0, v509:0, v510:0, v511:0, 3, 4) :|: v501:0 > 1 && v505:0 > 0 && v505:0 < v501:0
Filtered unneeded arguments:
   f_451(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_451(x11, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_451(v501:0, v505:0) -> f_451(v501:0, 1 + v505:0) :|: v505:0 > 0 && v505:0 < v501:0 && v501:0 > 1

----------------------------------------

(23)
Obligation:
Rules:
f_451(v501:0, v505:0) -> f_451(v501:0, 1 + v505:0) :|: v505:0 > 0 && v505:0 < v501:0 && v501:0 > 1

----------------------------------------

(24) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_451_2,1)

----------------------------------------

(25)
Obligation:
START: 0;

FROM: 0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
assume(oldX1 > 0 && oldX1 < oldX0 && oldX0 > 1);
x0 := oldX0;
x1 := 1 + oldX1;
TO: 1;


----------------------------------------

(26) T2 (EQUIVALENT)
Termination proof succeeded
Initially, performed program simplifications using lexicographic rank functions:
 * Removed transitions 1, 3, 4 using the following rank functions:
    - Rank function 1:
      RF for loc. 5: x0-x1
      RF for loc. 6: x0-x1
      Bound for (chained) transitions 3: 1
      Bound for (chained) transitions 4: 1
    - Rank function 2:
      RF for loc. 5: 0
      RF for loc. 6: -1
      Bound for (chained) transitions 1: 0

----------------------------------------

(27)
YES
/home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_4_T.c:10:13: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int x = __VERIFIER_nondet_int();
            ^
1 warning generated.

line 109:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
 
