timeout 900 ./AProVE.sh -m wst --bit-width 64 Missing_Iterator_Update_5_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Missing_Iterator_Update_5_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_5_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 86 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 4402 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 93 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 100 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_5_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_5_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.stacksave" returnParam: *i8 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.stackrestore" returnParam: BasicVoidType parameters: (*i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca *i8, align 8
		%4 = alloca i64, align 8
		%5 = alloca i32, align 4
		%6 = alloca i32, align 4
		%7 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%8 = call i32 (...)* @__VERIFIER_nondet_int()
		store %8, %2
		%9 = load %2
		%10 = icmp sle %9 0
		br %10, %14, %11
	11:
		%12 = load %2
		%13 = icmp sgt %12 1000
		br %13, %14, %15
	14:
		store 0, %1
		br %56
	15:
		%16 = load %2
		%17 = zext i32 %16 to i64
		%18 = call *i8 @llvm.stacksave()
		store %18, %3
		%19 = alloca i32, numElementsLit: %17, align 16
		store %17, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i64 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %19)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %20
	20:
		%21 = load %5
		%22 = load %2
		%23 = icmp slt %21 %22
		br %23, %24, %32
	24:
		%25 = call i32 (...)* @__VERIFIER_nondet_int()
		%26 = load %5
		%27 = sext i32 %26 to i64
		%28 = getelementptr %19, %27
		store %25, %28
		br %29
	29:
		%30 = load %5
		%31 = add i32 %30, 1
		store %31, %5
		br %20
	32:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %6)
		%33 = call i32 (...)* @__VERIFIER_nondet_int()
		store %33, %6
		%34 = load %6
		%35 = icmp slt %34 0
		br %35, %36, %37
	36:
		store 0, %1
		store 1, %7
		br %54
	37:
		br %38
	38:
		%39 = load %6
		%40 = load %2
		%41 = icmp sge %39 %40
		br %41, %42, %43
	42:
		store 0, %1
		store 1, %7
		br %54
	43:
		%44 = load %6
		%45 = sext i32 %44 to i64
		%46 = getelementptr %19, %45
		%47 = load %46
		%48 = icmp ne %47 0
		br %48, %49, %52
	49:
		%50 = load %6
		%51 = add i32 %50, 1
		store %51, %6
		br %38
	52:
		br %53
	53:
		store 0, %1
		store 1, %7
		br %54
	54:
		%55 = load %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.stackrestore(*i8 %55)
		br %56
	56:
		%57 = load %1
		ret %57


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_640(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 1000, 999, 8) -> f_641(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 1000, 999, 8) :|: 0 = 0
f_641(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 1000, 999, 8) -> f_643(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8) :|: v591 < v579 && v591 <= 999 && 2 <= v579 && 8 <= v599 && 1 <= v584 && v587 <= 998 && v586 <= 998
f_643(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8) -> f_645(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8) :|: 0 = 0
f_645(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8) -> f_647(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8) :|: TRUE
f_647(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8) -> f_649(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8) :|: 0 = 0
f_649(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8) -> f_651(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v588, v589, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8) :|: 0 = 0 && 0 <= 2147483648 + v591 && v591 <= 2147483647
f_651(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v588, v589, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8) -> f_653(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v589, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) :|: v632 = v582 + 4 * v591 && 5 <= v632
f_653(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v589, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) -> f_655(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) :|: TRUE
f_655(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) -> f_657(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) :|: v633 != 0
f_657(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) -> f_660(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) :|: 0 = 0
f_660(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) -> f_663(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) :|: TRUE
f_663(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v587, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) -> f_665(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) :|: 0 = 0
f_665(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) -> f_667(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v685, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) :|: v685 = 1 + v591 && 2 <= v685 && v685 <= 1000
f_667(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v685, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) -> f_669(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v685, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) :|: TRUE
f_669(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v685, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) -> f_671(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v685, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) :|: TRUE
f_671(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v685, v592, v593, v594, v595, v596, v597, v598, v599, v601, v588, v589, v600, v602, 3, 7, 4, 2, 1000, 999, 998, 8, 5) -> f_639(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v632, v633, 1, v685, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 1000, 999, 8) :|: TRUE
f_639(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v587, v588, v589, 1, v591, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 1000, 999, 8) -> f_640(v572, v573, v574, v575, v576, v577, v578, v579, 0, v581, v582, v583, v584, v585, v586, v591, v587, v588, v589, 1, v592, v593, v594, v595, v596, v597, v598, v599, v601, v600, v602, 3, 7, 4, 1000, 999, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_640(v572:0, v573:0, v574:0, v575:0, v576:0, v577:0, v578:0, v579:0, 0, v581:0, v582:0, v583:0, v584:0, v585:0, v586:0, v591:0, v587:0, v588:0, v589:0, 1, v592:0, v593:0, v594:0, v595:0, v596:0, v597:0, v598:0, v599:0, v601:0, v600:0, v602:0, 3, 7, 4, 1000, 999, 8) -> f_640(v572:0, v573:0, v574:0, v575:0, v576:0, v577:0, v578:0, v579:0, 0, v581:0, v582:0, v583:0, v584:0, v585:0, v586:0, 1 + v591:0, v591:0, v582:0 + 4 * v591:0, v633:0, 1, v592:0, v593:0, v594:0, v595:0, v596:0, v597:0, v598:0, v599:0, v601:0, v600:0, v602:0, 3, 7, 4, 1000, 999, 8) :|: v591:0 > 0 && v591:0 < 1000 && v591:0 < v579:0 && v579:0 > 1 && v599:0 > 7 && v584:0 > 0 && v587:0 < 999 && v586:0 < 999 && v591:0 < 2147483648 && v582:0 + 4 * v591:0 > 4 && v633:0 < 0
f_640(v572:0, v573:0, v574:0, v575:0, v576:0, v577:0, v578:0, v579:0, 0, v581:0, v582:0, v583:0, v584:0, v585:0, v586:0, v591:0, v587:0, v588:0, v589:0, 1, v592:0, v593:0, v594:0, v595:0, v596:0, v597:0, v598:0, v599:0, v601:0, v600:0, v602:0, 3, 7, 4, 1000, 999, 8) -> f_640(v572:0, v573:0, v574:0, v575:0, v576:0, v577:0, v578:0, v579:0, 0, v581:0, v582:0, v583:0, v584:0, v585:0, v586:0, 1 + v591:0, v591:0, v582:0 + 4 * v591:0, v633:0, 1, v592:0, v593:0, v594:0, v595:0, v596:0, v597:0, v598:0, v599:0, v601:0, v600:0, v602:0, 3, 7, 4, 1000, 999, 8) :|: v591:0 > 0 && v591:0 < 1000 && v591:0 < v579:0 && v579:0 > 1 && v599:0 > 7 && v584:0 > 0 && v587:0 < 999 && v586:0 < 999 && v591:0 < 2147483648 && v582:0 + 4 * v591:0 > 4 && v633:0 > 0
Filtered unneeded arguments:
   f_640(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37) -> f_640(x8, x11, x13, x15, x16, x17, x28)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_640(v579:0, v582:0, v584:0, v586:0, v591:0, v587:0, v599:0) -> f_640(v579:0, v582:0, v584:0, v586:0, 1 + v591:0, v591:0, v599:0) :|: v591:0 < 1000 && v591:0 > 0 && v591:0 < v579:0 && v579:0 > 1 && v599:0 > 7 && v584:0 > 0 && v587:0 < 999 && v586:0 < 999 && v582:0 + 4 * v591:0 > 4 && v591:0 < 2147483648

----------------------------------------

(9)
Obligation:
Rules:
f_640(v579:0, v582:0, v584:0, v586:0, v591:0, v587:0, v599:0) -> f_640(v579:0, v582:0, v584:0, v586:0, 1 + v591:0, v591:0, v599:0) :|: v591:0 < 1000 && v591:0 > 0 && v591:0 < v579:0 && v579:0 > 1 && v599:0 > 7 && v584:0 > 0 && v587:0 < 999 && v586:0 < 999 && v582:0 + 4 * v591:0 > 4 && v591:0 < 2147483648

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_640(v579:0:0, v582:0:0, v584:0:0, v586:0:0, v591:0:0, v587:0:0, v599:0:0) -> f_640(v579:0:0, v582:0:0, v584:0:0, v586:0:0, 1 + v591:0:0, v591:0:0, v599:0:0) :|: v582:0:0 + 4 * v591:0:0 > 4 && v591:0:0 < 2147483648 && v586:0:0 < 999 && v587:0:0 < 999 && v584:0:0 > 0 && v599:0:0 > 7 && v579:0:0 > 1 && v591:0:0 < v579:0:0 && v591:0:0 > 0 && v591:0:0 < 1000

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_640 ] = -1*f_640_5

The following rules are decreasing:
f_640(v579:0:0, v582:0:0, v584:0:0, v586:0:0, v591:0:0, v587:0:0, v599:0:0) -> f_640(v579:0:0, v582:0:0, v584:0:0, v586:0:0, 1 + v591:0:0, v591:0:0, v599:0:0) :|: v582:0:0 + 4 * v591:0:0 > 4 && v591:0:0 < 2147483648 && v586:0:0 < 999 && v587:0:0 < 999 && v584:0:0 > 0 && v599:0:0 > 7 && v579:0:0 > 1 && v591:0:0 < v579:0:0 && v591:0:0 > 0 && v591:0:0 < 1000

The following rules are bounded:
f_640(v579:0:0, v582:0:0, v584:0:0, v586:0:0, v591:0:0, v587:0:0, v599:0:0) -> f_640(v579:0:0, v582:0:0, v584:0:0, v586:0:0, 1 + v591:0:0, v591:0:0, v599:0:0) :|: v582:0:0 + 4 * v591:0:0 > 4 && v591:0:0 < 2147483648 && v586:0:0 < 999 && v587:0:0 < 999 && v584:0:0 > 0 && v599:0:0 > 7 && v579:0:0 > 1 && v591:0:0 < v579:0:0 && v591:0:0 > 0 && v591:0:0 < 1000


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_501(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v202, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 1000, 999, 8) -> f_502(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v202, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 1000, 999, 8) :|: 0 = 0
f_502(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v202, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 1000, 999, 8) -> f_503(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v202, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 998, 999, 8) :|: v204 < v196 && v204 <= 999 && 2 <= v196 && 8 <= v212 && v200 <= 998
f_503(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v202, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 998, 999, 8) -> f_505(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v202, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 998, 999, 8) :|: 0 = 0
f_505(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v202, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 998, 999, 8) -> f_507(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v202, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 998, 999, 8) :|: TRUE
f_507(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v202, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 998, 999, 8) -> f_509(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, v202, 3, 7, 4, 2, 1000, 998, 999, 8) :|: TRUE
f_509(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, v202, 3, 7, 4, 2, 1000, 998, 999, 8) -> f_511(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, v202, 3, 7, 4, 2, 1000, 998, 999, 8) :|: 0 = 0
f_511(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, v202, 3, 7, 4, 2, 1000, 998, 999, 8) -> f_513(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v203, v200, v205, v206, v207, v208, v209, v210, v211, v212, v213, v202, 3, 7, 4, 2, 1000, 998, 999, 8) :|: 0 = 0 && 0 <= 2147483648 + v204 && v204 <= 2147483647
f_513(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v203, v200, v205, v206, v207, v208, v209, v210, v211, v212, v213, v202, 3, 7, 4, 2, 1000, 998, 999, 8) -> f_515(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v200, v205, v206, v207, v208, v209, v210, v211, v212, v213, v203, v202, 3, 7, 4, 2, 1000, 998, 999, 8, 5) :|: v217 = v199 + 4 * v204 && 5 <= v217
f_515(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v200, v205, v206, v207, v208, v209, v210, v211, v212, v213, v203, v202, 3, 7, 4, 2, 1000, 998, 999, 8, 5) -> f_517(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v200, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 998, 999, 8, 5) :|: TRUE
f_517(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v200, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 998, 999, 8, 5) -> f_520(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v200, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 998, 999, 8, 5) :|: TRUE
f_520(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v200, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 998, 999, 8, 5) -> f_523(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 999, 8, 5) :|: 0 = 0
f_523(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 999, 8, 5) -> f_526(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v219, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 999, 8, 5) :|: v219 = 1 + v204 && 2 <= v219 && v219 <= 1000
f_526(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v219, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 999, 8, 5) -> f_529(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v219, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 999, 8, 5) :|: TRUE
f_529(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v219, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 999, 8, 5) -> f_532(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v219, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 999, 8, 5) :|: TRUE
f_532(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v219, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 2, 1000, 999, 8, 5) -> f_500(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v214, v217, v219, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 1000, 999, 8) :|: TRUE
f_500(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v200, 1, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 1000, 999, 8) -> f_501(v189, v190, v191, v192, v193, v194, v195, v196, 0, v198, v199, v204, 1, v202, v200, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, 3, 7, 4, 1000, 999, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_501(v189:0, v190:0, v191:0, v192:0, v193:0, v194:0, v195:0, v196:0, 0, v198:0, v199:0, v204:0, 1, v202:0, v200:0, v203:0, v205:0, v206:0, v207:0, v208:0, v209:0, v210:0, v211:0, v212:0, v213:0, 3, 7, 4, 1000, 999, 8) -> f_501(v189:0, v190:0, v191:0, v192:0, v193:0, v194:0, v195:0, v196:0, 0, v198:0, v199:0, 1 + v204:0, 1, v214:0, v204:0, v199:0 + 4 * v204:0, v205:0, v206:0, v207:0, v208:0, v209:0, v210:0, v211:0, v212:0, v213:0, 3, 7, 4, 1000, 999, 8) :|: v204:0 > 0 && v204:0 < 1000 && v204:0 < v196:0 && v196:0 > 1 && v212:0 > 7 && v200:0 < 999 && v204:0 < 2147483648 && v199:0 + 4 * v204:0 > 4
Filtered unneeded arguments:
   f_501(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_501(x8, x11, x12, x15, x24)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_501(v196:0, v199:0, v204:0, v200:0, v212:0) -> f_501(v196:0, v199:0, 1 + v204:0, v204:0, v212:0) :|: v204:0 < 1000 && v204:0 > 0 && v204:0 < v196:0 && v196:0 > 1 && v212:0 > 7 && v200:0 < 999 && v199:0 + 4 * v204:0 > 4 && v204:0 < 2147483648

----------------------------------------

(16)
Obligation:
Rules:
f_501(v196:0, v199:0, v204:0, v200:0, v212:0) -> f_501(v196:0, v199:0, 1 + v204:0, v204:0, v212:0) :|: v204:0 < 1000 && v204:0 > 0 && v204:0 < v196:0 && v196:0 > 1 && v212:0 > 7 && v200:0 < 999 && v199:0 + 4 * v204:0 > 4 && v204:0 < 2147483648

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_501(v196:0:0, v199:0:0, v204:0:0, v200:0:0, v212:0:0) -> f_501(v196:0:0, v199:0:0, 1 + v204:0:0, v204:0:0, v212:0:0) :|: v199:0:0 + 4 * v204:0:0 > 4 && v204:0:0 < 2147483648 && v200:0:0 < 999 && v212:0:0 > 7 && v196:0:0 > 1 && v204:0:0 < v196:0:0 && v204:0:0 > 0 && v204:0:0 < 1000

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_501(x, x1, x2, x3, x4)] = x - x2

The following rules are decreasing:
f_501(v196:0:0, v199:0:0, v204:0:0, v200:0:0, v212:0:0) -> f_501(v196:0:0, v199:0:0, 1 + v204:0:0, v204:0:0, v212:0:0) :|: v199:0:0 + 4 * v204:0:0 > 4 && v204:0:0 < 2147483648 && v200:0:0 < 999 && v212:0:0 > 7 && v196:0:0 > 1 && v204:0:0 < v196:0:0 && v204:0:0 > 0 && v204:0:0 < 1000
The following rules are bounded:
f_501(v196:0:0, v199:0:0, v204:0:0, v200:0:0, v212:0:0) -> f_501(v196:0:0, v199:0:0, 1 + v204:0:0, v204:0:0, v212:0:0) :|: v199:0:0 + 4 * v204:0:0 > 4 && v204:0:0 < 2147483648 && v200:0:0 < 999 && v212:0:0 > 7 && v196:0:0 > 1 && v204:0:0 < v196:0:0 && v204:0:0 > 0 && v204:0:0 < 1000

----------------------------------------

(20)
YES
/home/ubuntu/tool/FSE_benchmark/loop/Missing_Iterator_Update_5_T.c:12:23: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int MCE_LOG_LEN = __VERIFIER_nondet_int();
                      ^
1 warning generated.

line 136:18 mismatched input 'nofree' expecting CLOSEC
line 138:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
 
