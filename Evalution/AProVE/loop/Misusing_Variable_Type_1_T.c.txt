timeout 900 ./AProVE.sh -m wst --bit-width 64 Misusing_Variable_Type_1_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Misusing_Variable_Type_1_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Misusing_Variable_Type_1_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 98 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1585 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 59 ms]
        (9) IntTRS
        (10) IRS2T2 [EQUIVALENT, 0 ms]
        (11) T2IntSys
        (12) T2 [EQUIVALENT, 443 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 74 ms]
        (16) IntTRS
        (17) IRS2T2 [EQUIVALENT, 3 ms]
        (18) T2IntSys
        (19) T2 [EQUIVALENT, 367 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 58 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) RankingReductionPairProof [EQUIVALENT, 22 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Misusing_Variable_Type_1_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Misusing_Variable_Type_1_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store 1, %3
		br %5
	5:
		%6 = load %3
		%7 = icmp sge %6 0
		br %7, %8, %28
	8:
		store 7, %4
		br %9
	9:
		%10 = load %4
		%11 = icmp sge %10 0
		br %11, %12, %24
	12:
		store 0, %2
		br %13
	13:
		%14 = load %2
		%15 = icmp ule %14 255
		br %15, %16, %20
	16:
		br %17
	17:
		%18 = load %2
		%19 = add i32 %18, 1
		store %19, %2
		br %13
	20:
		br %21
	21:
		%22 = load %4
		%23 = add i32 %22, -1
		store %23, %4
		br %9
	24:
		br %25
	25:
		%26 = load %3
		%27 = add i32 %26, -1
		store %27, %3
		br %5
	28:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 29 rulesP rules:
f_551(v1844, v1845, v1846, v1847, 0, 1, v1850, 255, 256, v1853, v1854, v1855, v1856, v1857, v1858, 3, 7, 6, 4) -> f_552(v1844, v1845, v1846, v1847, 0, 1, v1850, 255, 256, v1853, v1854, v1855, v1856, v1857, v1858, 3, 7, 6, 4) :|: 0 = 0
f_552(v1844, v1845, v1846, v1847, 0, 1, v1850, 255, 256, v1853, v1854, v1855, v1856, v1857, v1858, 3, 7, 6, 4) -> f_553(v1844, v1845, v1846, v1847, 0, 1, v1850, 255, 256, v1853, v1854, v1855, v1856, v1857, v1858, 3, 7, 6, 4) :|: TRUE
f_553(v1844, v1845, v1846, v1847, 0, 1, v1850, 255, 256, v1853, v1854, v1855, v1856, v1857, v1858, 3, 7, 6, 4) -> f_554(v1844, v1845, v1846, v1847, 0, 1, v1850, 0, 255, 256, v1853, v1854, v1855, v1856, v1857, v1858, 3, 7, 255, 256, 6, 4) :|: TRUE
f_554(v1889, v1890, v1891, v1892, 0, 1, v1895, v1896, v1897, v1898, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 256, 6, 4) -> f_555(v1889, v1890, v1891, v1892, 0, 1, v1895, v1896, v1897, v1898, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 256, 6, 4) :|: TRUE
f_555(v1889, v1890, v1891, v1892, 0, 1, v1895, v1896, v1897, v1898, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 256, 6, 4) -> f_556(v1889, v1890, v1891, v1892, 0, 1, v1895, v1896, v1898, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 256, 6, 4) :|: 0 = 0
f_556(v1889, v1890, v1891, v1892, 0, 1, v1895, v1896, v1898, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 256, 6, 4) -> f_557(v1889, v1890, v1891, v1892, 0, 1, v1895, v1896, v1913, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 6, 4, 256) :|: v1913 = 1 + v1896 && 1 <= v1913 && v1913 <= 256
f_557(v1889, v1890, v1891, v1892, 0, 1, v1895, v1896, v1913, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 6, 4, 256) -> f_558(v1889, v1890, v1891, v1892, 0, 1, v1895, v1896, v1913, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 6, 4, 256) :|: TRUE
f_558(v1889, v1890, v1891, v1892, 0, 1, v1895, v1896, v1913, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 6, 4, 256) -> f_559(v1889, v1890, v1891, v1892, 0, 1, v1895, v1896, v1913, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 6, 4, 256) :|: TRUE
f_559(v1889, v1890, v1891, v1892, 0, 1, v1895, v1896, v1913, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 6, 4, 256) -> f_560(v1889, v1890, v1891, v1892, 0, 1, v1895, v1913, v1896, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 6, 4, 256) :|: 0 = 0
f_560(v1889, v1890, v1891, v1892, 0, 1, v1895, v1913, v1896, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 6, 4, 256) -> f_561(v1889, v1890, v1891, v1892, 0, 1, v1895, v1913, v1896, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 254, 6, 4, 255) :|: v1913 <= 255 && v1896 <= 254
f_560(v1889, v1890, v1891, v1892, 0, 1, v1895, v1913, v1896, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 6, 4, 256) -> f_562(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 6, 4) :|: 255 < v1913 && v1896 = 255 && v1913 = 256 && 0 = 0
f_561(v1889, v1890, v1891, v1892, 0, 1, v1895, v1913, v1896, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 254, 6, 4, 255) -> f_563(v1889, v1890, v1891, v1892, 0, 1, v1895, v1913, v1896, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 254, 6, 4, 255) :|: 0 = 0
f_563(v1889, v1890, v1891, v1892, 0, 1, v1895, v1913, v1896, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 254, 6, 4, 255) -> f_565(v1889, v1890, v1891, v1892, 0, 1, v1895, v1913, v1896, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 254, 6, 4, 255) :|: TRUE
f_565(v1889, v1890, v1891, v1892, 0, 1, v1895, v1913, v1896, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 254, 6, 4, 255) -> f_554(v1889, v1890, v1891, v1892, 0, 1, v1895, v1913, v1896, v1913, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 255, 256, 6, 4) :|: TRUE
f_562(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 6, 4) -> f_564(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 6, 4) :|: 0 = 0
f_564(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 6, 4) -> f_566(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 6, 4) :|: TRUE
f_566(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 6, 4) -> f_567(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 6, 4) :|: TRUE
f_567(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v1899, v1900, v1901, v1902, v1903, v1904, 3, 7, 6, 4) -> f_568(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v1900, v1901, v1902, v1903, v1904, 3, 7, 6, 4) :|: 0 = 0
f_568(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v1900, v1901, v1902, v1903, v1904, 3, 7, 6, 4) -> f_569(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v2004, v1901, v1902, v1903, v1904, 3, 7, 4, 6) :|: 1 + v2004 = v1895 && 0 <= 1 + v2004 && v2004 <= 6
f_569(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v2004, v1901, v1902, v1903, v1904, 3, 7, 4, 6) -> f_570(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v2004, v1901, v1902, v1903, v1904, 3, 7, 4, 6) :|: TRUE
f_570(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v2004, v1901, v1902, v1903, v1904, 3, 7, 4, 6) -> f_571(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v2004, v1901, v1902, v1903, v1904, 3, 7, 4, 6) :|: TRUE
f_571(v1889, v1890, v1891, v1892, 0, 1, v1895, 256, 255, v2004, v1901, v1902, v1903, v1904, 3, 7, 4, 6) -> f_572(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) :|: 0 = 0
f_572(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) -> f_573(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) :|: 0 <= v2004 && 1 <= v1895
f_573(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) -> f_575(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) :|: 0 = 0
f_575(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) -> f_577(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) :|: TRUE
f_577(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) -> f_579(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) :|: TRUE
f_579(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) -> f_581(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) :|: TRUE
f_581(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v1901, v1902, v1903, v1904, 3, 7, 4, 6) -> f_550(v1889, v1890, v1891, v1892, 0, 1, v2004, 256, 255, v1895, v2004, v1901, v1902, v1903, v1904, 3, 7, 6, 4) :|: TRUE
f_550(v1844, v1845, v1846, v1847, 0, 1, v1850, 256, 255, v1853, v1854, v1855, v1856, v1857, v1858, 3, 7, 6, 4) -> f_551(v1844, v1845, v1846, v1847, 0, 1, v1850, 255, 256, v1853, v1854, v1855, v1856, v1857, v1858, 3, 7, 6, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_560(v1889:0, v1890:0, v1891:0, v1892:0, 0, 1, v1895:0, v1913:0, v1896:0, v1899:0, v1900:0, v1901:0, v1902:0, v1903:0, v1904:0, 3, 7, 255, 6, 4, 256) -> f_560(v1889:0, v1890:0, v1891:0, v1892:0, 0, 1, v1895:0, 1 + v1913:0, v1913:0, v1899:0, v1900:0, v1901:0, v1902:0, v1903:0, v1904:0, 3, 7, 255, 6, 4, 256) :|: v1913:0 > -1 && v1913:0 < 256 && v1896:0 < 255
f_560(v1889:0, v1890:0, v1891:0, v1892:0, 0, 1, 1 + v2004:0, 256, 255, v1899:0, v1900:0, v1901:0, v1902:0, v1903:0, v1904:0, 3, 7, 255, 6, 4, 256) -> f_560(v1889:0, v1890:0, v1891:0, v1892:0, 0, 1, v2004:0, 1, 0, 1 + v2004:0, v2004:0, v1901:0, v1902:0, v1903:0, v1904:0, 3, 7, 255, 6, 4, 256) :|: v2004:0 > -1 && v2004:0 < 7
Filtered unneeded arguments:
   f_560(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_560(x7, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_560(v1895:0, v1913:0, v1896:0) -> f_560(v1895:0, 1 + v1913:0, v1913:0) :|: v1913:0 < 256 && v1896:0 < 255 && v1913:0 > -1
f_560(sum~cons_1~v2004:0, cons_256, cons_255) -> f_560(v2004:0, 1, 0) :|: v2004:0 > -1 && v2004:0 < 7 && sum~cons_1~v2004:0 = 1 + v2004:0 && cons_256 = 256 && cons_255 = 255

----------------------------------------

(9)
Obligation:
Rules:
f_560(v1895:0, v1913:0, v1896:0) -> f_560(v1895:0, 1 + v1913:0, v1913:0) :|: v1913:0 < 256 && v1896:0 < 255 && v1913:0 > -1
f_560(sum~cons_1~v2004:0, cons_256, cons_255) -> f_560(v2004:0, 1, 0) :|: v2004:0 > -1 && v2004:0 < 7 && sum~cons_1~v2004:0 = 1 + v2004:0 && cons_256 = 256 && cons_255 = 255

----------------------------------------

(10) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_560_3,1)

----------------------------------------

(11)
Obligation:
START: 0;

FROM: 0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
assume(oldX1 < 256 && oldX2 < 255 && oldX1 > -1);
x0 := oldX0;
x1 := 1 + oldX1;
x2 := oldX1;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := oldX0 - 1;
assume(oldX3 > -1 && oldX3 < 7 && oldX0 = 1 + oldX3 && oldX1 = 256 && oldX2 = 255);
x0 := oldX0 - 1;
x1 := 1;
x2 := 0;
TO: 1;


----------------------------------------

(12) T2 (EQUIVALENT)
Termination proof succeeded
Initially, performed program simplifications using lexicographic rank functions:
 * Removed transitions 1, 4, 5 using the following rank functions:
    - Rank function 1:
      RF for loc. 5: 256*x0-x1
      RF for loc. 6: 256*x0-x1
      Bound for (chained) transitions 5: 0
    - Rank function 2:
      RF for loc. 5: 1-2*x1
      RF for loc. 6: -2*x1
      Bound for (chained) transitions 4: -510
    - Rank function 3:
      RF for loc. 5: 1
      RF for loc. 6: 0
      Bound for (chained) transitions 1: 1

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 29 rulesP rules:
f_363(v628, v629, v630, v631, 1, v633, 0, 255, 256, v637, v638, v639, v640, v641, 3, 6, 7, 4) -> f_364(v628, v629, v630, v631, 1, v633, 0, 255, 256, v637, v638, v639, v640, v641, 3, 6, 7, 4) :|: 0 = 0
f_364(v628, v629, v630, v631, 1, v633, 0, 255, 256, v637, v638, v639, v640, v641, 3, 6, 7, 4) -> f_365(v628, v629, v630, v631, 1, v633, 0, 255, 256, v637, v638, v639, v640, v641, 3, 6, 7, 4) :|: TRUE
f_365(v628, v629, v630, v631, 1, v633, 0, 255, 256, v637, v638, v639, v640, v641, 3, 6, 7, 4) -> f_366(v628, v629, v630, v631, 1, v633, 0, 255, 256, v637, v638, v639, v640, v641, 0, 3, 6, 255, 256, 7, 4) :|: TRUE
f_366(v658, v659, v660, v661, 1, v663, v664, v665, v666, v667, v668, v669, v670, v671, 0, 3, 6, 255, 256, 7, 4) -> f_367(v658, v659, v660, v661, 1, v663, v664, v665, v666, v667, v668, v669, v670, v671, 0, 3, 6, 255, 256, 7, 4) :|: TRUE
f_367(v658, v659, v660, v661, 1, v663, v664, v665, v666, v667, v668, v669, v670, v671, 0, 3, 6, 255, 256, 7, 4) -> f_368(v658, v659, v660, v661, 1, v663, v664, v666, v667, v668, v669, v670, v671, 0, 3, 6, 255, 256, 7, 4) :|: 0 = 0
f_368(v658, v659, v660, v661, 1, v663, v664, v666, v667, v668, v669, v670, v671, 0, 3, 6, 255, 256, 7, 4) -> f_369(v658, v659, v660, v661, 1, v663, v664, v678, v667, v668, v669, v670, v671, 0, 3, 6, 255, 7, 4, 256) :|: v678 = 1 + v664 && 1 <= v678 && v678 <= 256
f_369(v658, v659, v660, v661, 1, v663, v664, v678, v667, v668, v669, v670, v671, 0, 3, 6, 255, 7, 4, 256) -> f_370(v658, v659, v660, v661, 1, v663, v664, v678, v667, v668, v669, v670, v671, 0, 3, 6, 255, 7, 4, 256) :|: TRUE
f_370(v658, v659, v660, v661, 1, v663, v664, v678, v667, v668, v669, v670, v671, 0, 3, 6, 255, 7, 4, 256) -> f_371(v658, v659, v660, v661, 1, v663, v664, v678, v667, v668, v669, v670, v671, 0, 3, 6, 255, 7, 4, 256) :|: TRUE
f_371(v658, v659, v660, v661, 1, v663, v664, v678, v667, v668, v669, v670, v671, 0, 3, 6, 255, 7, 4, 256) -> f_372(v658, v659, v660, v661, 1, v663, v678, v664, v667, v668, v669, v670, v671, 0, 3, 6, 255, 7, 4, 256) :|: 0 = 0
f_372(v658, v659, v660, v661, 1, v663, v678, v664, v667, v668, v669, v670, v671, 0, 3, 6, 255, 7, 4, 256) -> f_373(v658, v659, v660, v661, 1, v663, v678, v664, v667, v668, v669, v670, v671, 0, 3, 6, 254, 7, 4, 255) :|: v678 <= 255 && v664 <= 254
f_372(v658, v659, v660, v661, 1, v663, v678, v664, v667, v668, v669, v670, v671, 0, 3, 6, 255, 7, 4, 256) -> f_374(v658, v659, v660, v661, 1, v663, 256, 255, v667, v668, v669, v670, v671, 0, 3, 6, 7, 4) :|: 255 < v678 && v664 = 255 && v678 = 256 && 0 = 0
f_373(v658, v659, v660, v661, 1, v663, v678, v664, v667, v668, v669, v670, v671, 0, 3, 6, 254, 7, 4, 255) -> f_375(v658, v659, v660, v661, 1, v663, v678, v664, v667, v668, v669, v670, v671, 0, 3, 6, 254, 7, 4, 255) :|: 0 = 0
f_375(v658, v659, v660, v661, 1, v663, v678, v664, v667, v668, v669, v670, v671, 0, 3, 6, 254, 7, 4, 255) -> f_377(v658, v659, v660, v661, 1, v663, v678, v664, v667, v668, v669, v670, v671, 0, 3, 6, 254, 7, 4, 255) :|: TRUE
f_377(v658, v659, v660, v661, 1, v663, v678, v664, v667, v668, v669, v670, v671, 0, 3, 6, 254, 7, 4, 255) -> f_366(v658, v659, v660, v661, 1, v663, v678, v664, v678, v667, v668, v669, v670, v671, 0, 3, 6, 255, 256, 7, 4) :|: TRUE
f_374(v658, v659, v660, v661, 1, v663, 256, 255, v667, v668, v669, v670, v671, 0, 3, 6, 7, 4) -> f_376(v658, v659, v660, v661, 1, v663, 256, 0, 255, v667, v668, v669, v670, v671, 3, 6, 7, 4) :|: 0 = 0
f_376(v658, v659, v660, v661, 1, v663, 256, 0, 255, v667, v668, v669, v670, v671, 3, 6, 7, 4) -> f_378(v658, v659, v660, v661, 1, v663, 256, 0, 255, v667, v668, v669, v670, v671, 3, 6, 7, 4) :|: TRUE
f_378(v658, v659, v660, v661, 1, v663, 256, 0, 255, v667, v668, v669, v670, v671, 3, 6, 7, 4) -> f_379(v658, v659, v660, v661, 1, v663, 256, 0, 255, v667, v668, v669, v670, v671, 3, 6, 7, 4) :|: TRUE
f_379(v658, v659, v660, v661, 1, v663, 256, 0, 255, v667, v668, v669, v670, v671, 3, 6, 7, 4) -> f_380(v658, v659, v660, v661, 1, v663, 256, 0, 255, v668, v669, v670, v671, 3, 6, 4) :|: 0 = 0
f_380(v658, v659, v660, v661, 1, v663, 256, 0, 255, v668, v669, v670, v671, 3, 6, 4) -> f_381(v658, v659, v660, v661, 1, v663, 256, 0, 255, v728, v668, v669, v670, v671, 3, 6, 4, 5) :|: 1 + v728 = v663 && 0 <= 1 + v728 && v728 <= 5
f_381(v658, v659, v660, v661, 1, v663, 256, 0, 255, v728, v668, v669, v670, v671, 3, 6, 4, 5) -> f_382(v658, v659, v660, v661, 1, v663, 256, 0, 255, v728, v668, v669, v670, v671, 3, 6, 4, 5) :|: TRUE
f_382(v658, v659, v660, v661, 1, v663, 256, 0, 255, v728, v668, v669, v670, v671, 3, 6, 4, 5) -> f_383(v658, v659, v660, v661, 1, v663, 256, 0, 255, v728, v668, v669, v670, v671, 3, 6, 4, 5) :|: TRUE
f_383(v658, v659, v660, v661, 1, v663, 256, 0, 255, v728, v668, v669, v670, v671, 3, 6, 4, 5) -> f_384(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) :|: 0 = 0
f_384(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) -> f_385(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) :|: 0 <= v728 && 1 <= v663
f_385(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) -> f_387(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) :|: 0 = 0
f_387(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) -> f_389(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) :|: TRUE
f_389(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) -> f_391(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) :|: TRUE
f_391(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) -> f_393(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) :|: TRUE
f_393(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 4, 5) -> f_362(v658, v659, v660, v661, 1, v728, 256, 0, 255, v663, v668, v669, v670, v671, 3, 6, 7, 4) :|: TRUE
f_362(v628, v629, v630, v631, 1, v633, 256, 0, 255, v637, v638, v639, v640, v641, 3, 6, 7, 4) -> f_363(v628, v629, v630, v631, 1, v633, 0, 255, 256, v637, v638, v639, v640, v641, 3, 6, 7, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_372(v658:0, v659:0, v660:0, v661:0, 1, v663:0, v678:0, v664:0, v667:0, v668:0, v669:0, v670:0, v671:0, 0, 3, 6, 255, 7, 4, 256) -> f_372(v658:0, v659:0, v660:0, v661:0, 1, v663:0, 1 + v678:0, v678:0, v667:0, v668:0, v669:0, v670:0, v671:0, 0, 3, 6, 255, 7, 4, 256) :|: v678:0 > -1 && v678:0 < 256 && v664:0 < 255
f_372(v658:0, v659:0, v660:0, v661:0, 1, 1 + v728:0, 256, 255, v667:0, v668:0, v669:0, v670:0, v671:0, 0, 3, 6, 255, 7, 4, 256) -> f_372(v658:0, v659:0, v660:0, v661:0, 1, v728:0, 1, 0, 1 + v728:0, v668:0, v669:0, v670:0, v671:0, 0, 3, 6, 255, 7, 4, 256) :|: v728:0 > -1 && v728:0 < 6
Filtered unneeded arguments:
   f_372(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_372(x6, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_372(v663:0, v678:0, v664:0) -> f_372(v663:0, 1 + v678:0, v678:0) :|: v678:0 < 256 && v664:0 < 255 && v678:0 > -1
f_372(sum~cons_1~v728:0, cons_256, cons_255) -> f_372(v728:0, 1, 0) :|: v728:0 > -1 && v728:0 < 6 && sum~cons_1~v728:0 = 1 + v728:0 && cons_256 = 256 && cons_255 = 255

----------------------------------------

(16)
Obligation:
Rules:
f_372(v663:0, v678:0, v664:0) -> f_372(v663:0, 1 + v678:0, v678:0) :|: v678:0 < 256 && v664:0 < 255 && v678:0 > -1
f_372(sum~cons_1~v728:0, cons_256, cons_255) -> f_372(v728:0, 1, 0) :|: v728:0 > -1 && v728:0 < 6 && sum~cons_1~v728:0 = 1 + v728:0 && cons_256 = 256 && cons_255 = 255

----------------------------------------

(17) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_372_3,1)

----------------------------------------

(18)
Obligation:
START: 0;

FROM: 0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
assume(oldX1 < 256 && oldX2 < 255 && oldX1 > -1);
x0 := oldX0;
x1 := 1 + oldX1;
x2 := oldX1;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := oldX0 - 1;
assume(oldX3 > -1 && oldX3 < 6 && oldX0 = 1 + oldX3 && oldX1 = 256 && oldX2 = 255);
x0 := oldX0 - 1;
x1 := 1;
x2 := 0;
TO: 1;


----------------------------------------

(19) T2 (EQUIVALENT)
Termination proof succeeded
Initially, performed program simplifications using lexicographic rank functions:
 * Removed transitions 1, 4, 5 using the following rank functions:
    - Rank function 1:
      RF for loc. 5: 256*x0-x1
      RF for loc. 6: 256*x0-x1
      Bound for (chained) transitions 5: 0
    - Rank function 2:
      RF for loc. 5: 1-2*x1
      RF for loc. 6: -2*x1
      Bound for (chained) transitions 4: -510
    - Rank function 3:
      RF for loc. 5: 1
      RF for loc. 6: 0
      Bound for (chained) transitions 1: 1

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_210(v69, v70, v71, v72, 1, 7, v76, v75, v77, v78, v79, v80, 0, 3, 255, 256, 4) -> f_211(v69, v70, v71, v72, 1, 7, v76, v75, v77, v78, v79, v80, 0, 3, 254, 255, 4) :|: v76 <= 255 && v75 <= 254
f_211(v69, v70, v71, v72, 1, 7, v76, v75, v77, v78, v79, v80, 0, 3, 254, 255, 4) -> f_213(v69, v70, v71, v72, 1, 7, v76, v75, v77, v78, v79, v80, 0, 3, 254, 255, 4) :|: 0 = 0
f_213(v69, v70, v71, v72, 1, 7, v76, v75, v77, v78, v79, v80, 0, 3, 254, 255, 4) -> f_215(v69, v70, v71, v72, 1, 7, v76, v75, v77, v78, v79, v80, 0, 3, 254, 255, 4) :|: TRUE
f_215(v69, v70, v71, v72, 1, 7, v76, v75, v77, v78, v79, v80, 0, 3, 254, 255, 4) -> f_217(v69, v70, v71, v72, 1, 7, v76, v75, v77, v78, v79, v80, 0, 3, 254, 255, 4) :|: TRUE
f_217(v69, v70, v71, v72, 1, 7, v76, v75, v77, v78, v79, v80, 0, 3, 254, 255, 4) -> f_219(v69, v70, v71, v72, 1, 7, v76, v77, v78, v79, v80, 0, 3, 255, 4) :|: 0 = 0
f_219(v69, v70, v71, v72, 1, 7, v76, v77, v78, v79, v80, 0, 3, 255, 4) -> f_221(v69, v70, v71, v72, 1, 7, v76, v82, v77, v78, v79, v80, 0, 3, 255, 4, 2, 256) :|: v82 = 1 + v76 && 2 <= v82 && v82 <= 256
f_221(v69, v70, v71, v72, 1, 7, v76, v82, v77, v78, v79, v80, 0, 3, 255, 4, 2, 256) -> f_223(v69, v70, v71, v72, 1, 7, v76, v82, v77, v78, v79, v80, 0, 3, 255, 4, 2, 256) :|: TRUE
f_223(v69, v70, v71, v72, 1, 7, v76, v82, v77, v78, v79, v80, 0, 3, 255, 4, 2, 256) -> f_225(v69, v70, v71, v72, 1, 7, v76, v82, v77, v78, v79, v80, 0, 3, 255, 4, 2, 256) :|: TRUE
f_225(v69, v70, v71, v72, 1, 7, v76, v82, v77, v78, v79, v80, 0, 3, 255, 4, 2, 256) -> f_209(v69, v70, v71, v72, 1, 7, v76, v82, v77, v78, v79, v80, 0, 3, 255, 256, 4) :|: TRUE
f_209(v69, v70, v71, v72, 1, 7, v75, v76, v77, v78, v79, v80, 0, 3, 255, 256, 4) -> f_210(v69, v70, v71, v72, 1, 7, v76, v75, v77, v78, v79, v80, 0, 3, 255, 256, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_210(v69:0, v70:0, v71:0, v72:0, 1, 7, v76:0, v75:0, v77:0, v78:0, v79:0, v80:0, 0, 3, 255, 256, 4) -> f_210(v69:0, v70:0, v71:0, v72:0, 1, 7, 1 + v76:0, v76:0, v77:0, v78:0, v79:0, v80:0, 0, 3, 255, 256, 4) :|: v75:0 < 255 && v76:0 < 256 && v76:0 > 0
Filtered unneeded arguments:
   f_210(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_210(x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_210(v76:0, v75:0) -> f_210(1 + v76:0, v76:0) :|: v76:0 < 256 && v76:0 > 0 && v75:0 < 255

----------------------------------------

(23)
Obligation:
Rules:
f_210(v76:0, v75:0) -> f_210(1 + v76:0, v76:0) :|: v76:0 < 256 && v76:0 > 0 && v75:0 < 255

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_210(v76:0:0, v75:0:0) -> f_210(1 + v76:0:0, v76:0:0) :|: v76:0:0 < 256 && v76:0:0 > 0 && v75:0:0 < 255

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_210 ] = -1*f_210_1

The following rules are decreasing:
f_210(v76:0:0, v75:0:0) -> f_210(1 + v76:0:0, v76:0:0) :|: v76:0:0 < 256 && v76:0:0 > 0 && v75:0:0 < 255

The following rules are bounded:
f_210(v76:0:0, v75:0:0) -> f_210(1 + v76:0:0, v76:0:0) :|: v76:0:0 < 256 && v76:0:0 > 0 && v75:0:0 < 255


----------------------------------------

(27)
YES
line 77:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
                                                                                                                                                                                                                                         java.lang.IllegalStateException: Shutdown in progress
	at java.base/java.io.DeleteOnExitHook.add(DeleteOnExitHook.java:61)
	at java.base/java.io.File.deleteOnExit(File.java:1102)
	at aprove.GraphUserInterface.Factories.Solvers.Engines.YicesEngine.solve(YicesEngine.java:137)
	at aprove.GraphUserInterface.Factories.Solvers.Engines.YicesEngine.solve(YicesEngine.java:64)
	at aprove.Framework.IntTRS.RankingRedPair.RankingRedPairWorker.solveConstraints(RankingRedPairWorker.java:685)
	at aprove.Framework.IntTRS.RankingRedPair.RankingRedPairWorker.work(RankingRedPairWorker.java:200)
 
