timeout 900 ./AProVE.sh -m wst --bit-width 64 Reusing_Same_Loop_Iterator_1_NT.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Reusing_Same_Loop_Iterator_1_NT.c
NO
proof of /home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_1_NT.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 77 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1367 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToLassoProof [COMPLETE, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution Lasso
        (8) Lasso2IRS [EQUIVALENT, 203 ms]
        (9) IntTRS
        (10) IRS2T2 [EQUIVALENT, 0 ms]
        (11) T2IntSys
    (12) LLVM Symbolic Execution Lasso
        (13) Lasso2IRS [EQUIVALENT, 139 ms]
        (14) IntTRS
        (15) IRS2T2 [EQUIVALENT, 0 ms]
        (16) T2IntSys
        (17) T2 [EQUIVALENT, 392 ms]
        (18) YES
    (19) LLVM Symbolic Execution Lasso
        (20) Lasso2IRS [EQUIVALENT, 134 ms]
        (21) IntTRS
        (22) IRS2T2 [EQUIVALENT, 0 ms]
        (23) T2IntSys
        (24) T2 [COMPLETE, 546 ms]
        (25) NO


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_1_NT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_1_NT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%6 = call i32 (...)* @__VERIFIER_nondet_int()
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%7 = call i32 (...)* @__VERIFIER_nondet_int()
		store %7, %5
		%8 = load %4
		%9 = icmp sgt %8 65534
		br %9, %13, %10
	10:
		%11 = load %5
		%12 = icmp sgt %11 65534
		br %12, %13, %14
	13:
		store 0, %1
		br %33
	14:
		store 0, %2
		br %15
	15:
		%16 = load %2
		%17 = load %4
		%18 = icmp slt %16 %17
		br %18, %19, %32
	19:
		store 0, %2
		br %20
	20:
		%21 = load %2
		%22 = load %5
		%23 = icmp slt %21 %22
		br %23, %24, %28
	24:
		br %25
	25:
		%26 = load %2
		%27 = add i32 %26, 1
		store %27, %2
		br %20
	28:
		br %29
	29:
		%30 = load %2
		%31 = add i32 %30, 1
		store %31, %2
		br %15
	32:
		store 0, %1
		br %33
	33:
		%34 = load %1
		ret %34


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToLassoProof (COMPLETE)
Converted SEGraph to 3 dependent lassos.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Lasso
----------------------------------------

(8) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 94 rulesP rules:
f_373(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) -> f_375(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) :|: TRUE
f_375(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) -> f_377(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) :|: 0 = 0
f_377(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) -> f_379(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) :|: 0 = 0
f_379(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) -> f_380(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) :|: 0 = 0
f_380(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) -> f_381(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) :|: TRUE
f_381(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) -> f_394(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, 0, v261, v262, v263, v264, v265, v266, v267, 3, 2, 4) :|: TRUE
f_394(v437, v438, v439, v440, v441, v442, v443, 0, v445, 1, v447, v448, v449, v450, v451, v452, v453, v454, 3, 2, 4) -> f_407(v437, v438, v439, v440, v441, v442, v443, 0, v445, 1, v447, v448, v449, v450, v451, v452, v453, v454, 3, 2, 4) :|: TRUE
f_407(v499, v500, v501, v502, v503, v504, v505, 0, v507, 1, v509, v510, v511, v512, v513, v514, v515, v516, 3, 2, 4) -> f_420(v499, v500, v501, v502, v503, v504, v505, 0, v507, 1, v509, v510, v511, v512, v513, v514, v515, v516, 3, 2, 4) :|: TRUE
f_420(v561, v562, v563, v564, v565, v566, v567, 0, v569, 1, v571, v572, v573, v574, v575, v576, v577, v578, 3, 2, 4) -> f_433(v561, v562, v563, v564, v565, v566, v567, 0, v569, 1, v571, v572, v573, v574, v575, v576, v577, v578, 3, 2, 4) :|: TRUE
f_433(v623, v624, v625, v626, v627, v628, v629, 0, v631, 1, v633, v634, v635, v636, v637, v638, v639, v640, 3, 2, 4) -> f_446(v623, v624, v625, v626, v627, v628, v629, 0, v631, 1, v633, v634, v635, v636, v637, v638, v639, v640, 3, 2, 4) :|: TRUE
f_446(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v695, v696, v697, v698, v699, v700, v701, v702, 3, 2, 4) -> f_447(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v695, v696, v697, v698, v699, v700, v701, v702, 3, 2, 4) :|: TRUE
f_447(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v695, v696, v697, v698, v699, v700, v701, v702, 3, 2, 4) -> f_448(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v695, v697, v698, v699, v700, v701, v702, 3, 2, 4) :|: 0 = 0
f_448(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v695, v697, v698, v699, v700, v701, v702, 3, 2, 4) -> f_449(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v695, v709, v698, v699, v700, v701, v702, 3, 2, 4) :|: v709 = 1 + v695 && 1 <= v709
f_449(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v695, v709, v698, v699, v700, v701, v702, 3, 2, 4) -> f_450(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v695, v709, v698, v699, v700, v701, v702, 3, 2, 4) :|: TRUE
f_450(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v695, v709, v698, v699, v700, v701, v702, 3, 2, 4) -> f_451(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v695, v709, v698, v699, v700, v701, v702, 3, 2, 4) :|: TRUE
f_451(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v695, v709, v698, v699, v700, v701, v702, 3, 2, 4) -> f_452(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: 0 = 0
f_452(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_453(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: 0 = 0
f_453(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_454(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v698, v699, v700, v701, v702, 3, 4, 2) :|: v709 < v691 && 2 <= v691 && 3 <= v693 && 4 <= v690
f_453(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_455(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: v691 <= v709 && v691 = v709
f_454(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v698, v699, v700, v701, v702, 3, 4, 2) -> f_456(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v698, v699, v700, v701, v702, 3, 4, 2) :|: 0 = 0
f_456(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v698, v699, v700, v701, v702, 3, 4, 2) -> f_458(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v698, v699, v700, v701, v702, 3, 4, 2) :|: TRUE
f_458(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v698, v699, v700, v701, v702, 3, 4, 2) -> f_446(v685, v686, v687, v688, v689, v690, v691, 0, v693, 1, v709, v695, v709, v698, v699, v700, v701, v702, 3, 2, 4) :|: TRUE
f_455(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_457(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: 0 = 0
f_457(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_459(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: TRUE
f_459(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_460(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: TRUE
f_460(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_461(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: 0 = 0
f_461(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_462(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: v693 = 1 + v709
f_462(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_463(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: TRUE
f_463(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_464(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: TRUE
f_464(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_465(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: 0 = 0
f_465(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_466(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: 0 = 0
f_466(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_467(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: 0 = 0
f_467(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_468(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) :|: TRUE
f_468(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 2, 4) -> f_371(v685, v686, v687, v688, v689, v690, v709, 0, v693, 1, v695, v698, v699, v700, v701, v702, 3, 4, 2) :|: TRUE
f_371(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) -> f_373(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) :|: TRUE
f_148 -> f_149(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_149(v1, v2, 3, 1, 4) -> f_150(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_150(v1, v3, v2, v4, 3, 1, 4) -> f_151(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_151(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_152(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_152(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_153(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_153(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) -> f_154(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_154(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_155(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_155(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_156(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_156(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_157(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_157(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_158(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_158(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_159(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_159(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_160(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_160(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_161(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_161(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_162(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_162(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_163(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: 0 = 0
f_163(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_165(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: v11 <= 65534
f_165(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_167(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_167(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_169(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_169(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_172(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: v13 <= 65534
f_172(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_175(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_175(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_177(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_177(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_179(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_179(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_181(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_181(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_182(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_182(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_183(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 < v11
f_183(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_185(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_185(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_187(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_187(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_189(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_189(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_191(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_191(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_193(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_193(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_195(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_195(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_196(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 < v13
f_196(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_198(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_198(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_200(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_200(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_202(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_202(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_204(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_204(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_206(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_206(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_208(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_208(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_210(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_210(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_244(v1, v3, v5, v7, v9, v11, v13, 0, 1, 0, 1, v2, v4, v6, v8, v10, 3, 2, 4) :|: TRUE
f_244(v42, v43, v44, v45, v46, v47, v48, 0, 1, v51, v52, v53, v54, v55, v56, v57, 3, 2, 4) -> f_274(v42, v43, v44, v45, v46, v47, v48, 0, 1, v51, v52, v53, v54, v55, v56, v57, 3, 2, 4) :|: TRUE
f_274(v98, v99, v100, v101, v102, v103, v104, 0, 1, v107, v108, v109, v110, v111, v112, v113, 3, 2, 4) -> f_307(v98, v99, v100, v101, v102, v103, v104, 0, 1, v107, v108, v109, v110, v111, v112, v113, 3, 4) :|: TRUE
f_307(v149, v150, v151, v152, v153, v154, v155, 0, 1, v158, v159, v160, v161, v162, v163, v164, 3, 4) -> f_328(v149, v150, v151, v152, v153, v154, v155, 0, 1, v158, v159, v160, v161, v162, v163, v164, 3, 4) :|: TRUE
f_328(v211, v212, v213, v214, v215, v216, v217, 0, 1, v220, v221, v222, v223, v224, v225, v226, 3, 4) -> f_346(v211, v212, v213, v214, v215, v216, v217, 0, 1, v220, v221, v222, v223, v224, v225, v226, 3, 4) :|: TRUE
f_346(v252, v253, v254, v255, v256, v257, v258, 0, 1, v261, v262, v263, v264, v265, v266, v267, 3, 4) -> f_347(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 4) :|: 0 = 0
f_347(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 4) -> f_348(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 4) :|: 0 = 0
f_348(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 4) -> f_350(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v263, v264, v265, v266, v267, 3, 4) :|: v258 <= v262 && v258 = v262
f_350(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v263, v264, v265, v266, v267, 3, 4) -> f_352(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v263, v264, v265, v266, v267, 3, 4) :|: 0 = 0
f_352(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v263, v264, v265, v266, v267, 3, 4) -> f_354(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v263, v264, v265, v266, v267, 3, 4) :|: TRUE
f_354(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v263, v264, v265, v266, v267, 3, 4) -> f_356(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v263, v264, v265, v266, v267, 3, 4) :|: TRUE
f_356(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v263, v264, v265, v266, v267, 3, 4) -> f_358(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v263, v264, v265, v266, v267, 3, 4) :|: 0 = 0
f_358(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v263, v264, v265, v266, v267, 3, 4) -> f_360(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v279, v263, v264, v265, v266, v267, 3, 4, 2) :|: v279 = 1 + v262 && 2 <= v279
f_360(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v279, v263, v264, v265, v266, v267, 3, 4, 2) -> f_362(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v279, v263, v264, v265, v266, v267, 3, 4, 2) :|: TRUE
f_362(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v279, v263, v264, v265, v266, v267, 3, 4, 2) -> f_364(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v279, v263, v264, v265, v266, v267, 3, 4, 2) :|: TRUE
f_364(v252, v253, v254, v255, v256, v257, v262, 0, 1, v261, v279, v263, v264, v265, v266, v267, 3, 4, 2) -> f_365(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) :|: 0 = 0
f_365(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) -> f_366(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) :|: 0 = 0
f_366(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) -> f_367(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) :|: v279 < v257 && 3 <= v257
f_367(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) -> f_369(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) :|: 0 = 0
f_369(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) -> f_371(v252, v253, v254, v255, v256, v257, v262, 0, v279, 1, v261, v263, v264, v265, v266, v267, 3, 4, 2) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_453(v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, v691:0, 0, 1 + v691:0, 1, v691:0, v695:0, v698:0, v699:0, v700:0, v701:0, v702:0, 3, 2, 4) -> f_453(v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, v691:0, 0, 1 + v691:0, 1, 1, 0, v698:0, v699:0, v700:0, v701:0, v702:0, 3, 2, 4) :|: TRUE
f_148 -> f_453(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, 1, 0, 2, 1, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 2, 4) :|: v11:0 > 2 && v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 < 65535
f_453(v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, v691:0, 0, v693:0, 1, v709:0, v695:0, v698:0, v699:0, v700:0, v701:0, v702:0, 3, 2, 4) -> f_453(v685:0, v686:0, v687:0, v688:0, v689:0, v690:0, v691:0, 0, v693:0, 1, 1 + v709:0, v709:0, v698:0, v699:0, v700:0, v701:0, v702:0, 3, 2, 4) :|: v709:0 > -1 && v691:0 > 1 && v709:0 < v691:0 && v690:0 > 3 && v693:0 > 2
Filtered unneeded arguments:
   f_453(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) -> f_453(x6, x7, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_453(v690:0, v691:0, sum~cons_1~v691:0, v691:01) -> f_453(v690:0, v691:0, 1 + v691:0, 1) :|: TRUE && sum~cons_1~v691:0 = 1 + v691:0 && v691:0 = v691:01
f_148 -> f_453(v11:0, 1, 2, 1) :|: v11:0 > 2 && v11:0 < 65535
f_453(v690:0, v691:0, v693:0, v709:0) -> f_453(v690:0, v691:0, v693:0, 1 + v709:0) :|: v691:0 > 1 && v709:0 > -1 && v709:0 < v691:0 && v693:0 > 2 && v690:0 > 3

----------------------------------------

(9)
Obligation:
Rules:
f_453(v690:0, v691:0, sum~cons_1~v691:0, v691:01) -> f_453(v690:0, v691:0, 1 + v691:0, 1) :|: TRUE && sum~cons_1~v691:0 = 1 + v691:0 && v691:0 = v691:01
f_148 -> f_453(v11:0, 1, 2, 1) :|: v11:0 > 2 && v11:0 < 65535
f_453(x, x1, x2, x3) -> f_453(x, x1, x2, 1 + x3) :|: x1 > 1 && x3 > -1 && x3 < x1 && x2 > 2 && x > 3
Start term: f_148

----------------------------------------

(10) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_453_4,1)
   (f_148_4,2)

----------------------------------------

(11)
Obligation:
START: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
assume(0 = 0 && oldX2 = 1 + oldX1 && oldX1 = oldX3);
x0 := oldX0;
x1 := oldX1;
x2 := 1 + oldX1;
x3 := 1;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := nondet();
assume(oldX4 > 2 && oldX4 < 65535);
x0 := oldX4;
x1 := 1;
x2 := 2;
x3 := 1;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
assume(oldX1 > 1 && oldX3 > -1 && oldX3 < oldX1 && oldX2 > 2 && oldX0 > 3);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := 1 + oldX3;
TO: 1;


----------------------------------------

(12)
Obligation:
Lasso
----------------------------------------

(13) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 55 rulesP rules:
f_347(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 4) -> f_348(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 4) :|: 0 = 0
f_348(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 4) -> f_349(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 2, 4) :|: v262 < v258 && 2 <= v258
f_349(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 2, 4) -> f_351(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 2, 4) :|: 0 = 0
f_351(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 2, 4) -> f_353(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 2, 4) :|: TRUE
f_353(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 2, 4) -> f_355(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 2, 4) :|: TRUE
f_355(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 2, 4) -> f_357(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v263, v264, v265, v266, v267, 3, 2, 4) :|: 0 = 0
f_357(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v263, v264, v265, v266, v267, 3, 2, 4) -> f_359(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v278, v263, v264, v265, v266, v267, 3, 2, 4) :|: v278 = 1 + v262 && 2 <= v278
f_359(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v278, v263, v264, v265, v266, v267, 3, 2, 4) -> f_361(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v278, v263, v264, v265, v266, v267, 3, 2, 4) :|: TRUE
f_361(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v278, v263, v264, v265, v266, v267, 3, 2, 4) -> f_363(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v278, v263, v264, v265, v266, v267, 3, 2, 4) :|: TRUE
f_363(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v278, v263, v264, v265, v266, v267, 3, 2, 4) -> f_346(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v278, v263, v264, v265, v266, v267, 3, 4) :|: TRUE
f_346(v252, v253, v254, v255, v256, v257, v258, 0, 1, v261, v262, v263, v264, v265, v266, v267, 3, 4) -> f_347(v252, v253, v254, v255, v256, v257, v258, 0, 1, v262, v261, v263, v264, v265, v266, v267, 3, 4) :|: 0 = 0
f_148 -> f_149(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_149(v1, v2, 3, 1, 4) -> f_150(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_150(v1, v3, v2, v4, 3, 1, 4) -> f_151(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_151(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_152(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_152(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_153(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_153(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) -> f_154(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_154(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_155(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_155(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_156(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_156(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_157(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_157(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_158(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_158(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_159(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_159(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_160(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_160(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_161(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_161(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_162(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_162(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_163(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: 0 = 0
f_163(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_165(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: v11 <= 65534
f_165(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_167(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_167(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_169(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_169(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_172(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: v13 <= 65534
f_172(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_175(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_175(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_177(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_177(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_179(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_179(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_181(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_181(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_182(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_182(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_183(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 < v11
f_183(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_185(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_185(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_187(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_187(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_189(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_189(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_191(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_191(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_193(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_193(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_195(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_195(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_196(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 < v13
f_196(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_198(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_198(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_200(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_200(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_202(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_202(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_204(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_204(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_206(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_206(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_208(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_208(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_210(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_210(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_244(v1, v3, v5, v7, v9, v11, v13, 0, 1, 0, 1, v2, v4, v6, v8, v10, 3, 2, 4) :|: TRUE
f_244(v42, v43, v44, v45, v46, v47, v48, 0, 1, v51, v52, v53, v54, v55, v56, v57, 3, 2, 4) -> f_274(v42, v43, v44, v45, v46, v47, v48, 0, 1, v51, v52, v53, v54, v55, v56, v57, 3, 2, 4) :|: TRUE
f_274(v98, v99, v100, v101, v102, v103, v104, 0, 1, v107, v108, v109, v110, v111, v112, v113, 3, 2, 4) -> f_307(v98, v99, v100, v101, v102, v103, v104, 0, 1, v107, v108, v109, v110, v111, v112, v113, 3, 4) :|: TRUE
f_307(v149, v150, v151, v152, v153, v154, v155, 0, 1, v158, v159, v160, v161, v162, v163, v164, 3, 4) -> f_328(v149, v150, v151, v152, v153, v154, v155, 0, 1, v158, v159, v160, v161, v162, v163, v164, 3, 4) :|: TRUE
f_328(v211, v212, v213, v214, v215, v216, v217, 0, 1, v220, v221, v222, v223, v224, v225, v226, 3, 4) -> f_346(v211, v212, v213, v214, v215, v216, v217, 0, 1, v220, v221, v222, v223, v224, v225, v226, 3, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_148 -> f_347(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 0, 1, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 < 65535 && v13:0 < 65535 && v13:0 > 0 && v11:0 > 0
f_347(v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v258:0, 0, 1, v262:0, v261:0, v263:0, v264:0, v265:0, v266:0, v267:0, 3, 4) -> f_347(v252:0, v253:0, v254:0, v255:0, v256:0, v257:0, v258:0, 0, 1, 1 + v262:0, v262:0, v263:0, v264:0, v265:0, v266:0, v267:0, 3, 4) :|: v258:0 > 1 && v262:0 > 0 && v262:0 < v258:0
Filtered unneeded arguments:
   f_347(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_347(x7, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_148 -> f_347(v13:0, 1) :|: v13:0 < 65535 && v13:0 > 0
f_347(v258:0, v262:0) -> f_347(v258:0, 1 + v262:0) :|: v262:0 > 0 && v262:0 < v258:0 && v258:0 > 1

----------------------------------------

(14)
Obligation:
Rules:
f_148 -> f_347(v13:0, 1) :|: v13:0 < 65535 && v13:0 > 0
f_347(v258:0, v262:0) -> f_347(v258:0, 1 + v262:0) :|: v262:0 > 0 && v262:0 < v258:0 && v258:0 > 1
Start term: f_148

----------------------------------------

(15) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_148_2,1)
   (f_347_2,2)

----------------------------------------

(16)
Obligation:
START: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := nondet();
assume(oldX2 < 65535 && oldX2 > 0);
x0 := oldX2;
x1 := 1;
TO: 2;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
assume(oldX1 > 0 && oldX1 < oldX0 && oldX0 > 1);
x0 := oldX0;
x1 := 1 + oldX1;
TO: 2;


----------------------------------------

(17) T2 (EQUIVALENT)
Termination proof succeeded
Initially, performed program simplifications using lexicographic rank functions:
 * Removed transitions 1, 3, 4 using the following rank functions:
    - Rank function 1:
      RF for loc. 5: 1+2*x0-2*x1
      RF for loc. 6: 2*x0-2*x1
      Bound for (chained) transitions 3: 2
    - Rank function 2:
      RF for loc. 5: 2*x0-2*x1
      RF for loc. 6: -1+2*x0-2*x1
      Bound for (chained) transitions 4: 1
    - Rank function 3:
      RF for loc. 5: 0
      RF for loc. 6: -1
      Bound for (chained) transitions 1: 0

----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Lasso
----------------------------------------

(20) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 57 rulesP rules:
f_265(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 4) -> f_268(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 4) :|: 0 = 0
f_268(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 4) -> f_271(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: 1 < v84
f_271(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_275(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: 0 = 0
f_275(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_278(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: TRUE
f_278(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_281(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: TRUE
f_281(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_285(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: TRUE
f_285(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_289(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: 0 = 0
f_289(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_293(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: 0 = 0
f_293(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_296(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: 0 = 0
f_296(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_299(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: TRUE
f_299(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_302(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: TRUE
f_302(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_305(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: 0 = 0
f_305(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_308(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: 0 = 0
f_308(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_310(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: TRUE
f_310(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_312(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) :|: TRUE
f_312(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 2, 4) -> f_262(v79, v80, v81, v82, v83, v84, v85, 0, 1, 1, v89, v90, v91, v92, v93, 3, 4) :|: TRUE
f_262(v79, v80, v81, v82, v83, v84, v85, 0, v87, 1, v89, v90, v91, v92, v93, 3, 4) -> f_265(v79, v80, v81, v82, v83, v84, v85, 0, 1, v89, v90, v91, v92, v93, 3, 4) :|: 0 = 0
f_148 -> f_149(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_149(v1, v2, 3, 1, 4) -> f_150(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_150(v1, v3, v2, v4, 3, 1, 4) -> f_151(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_151(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_152(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_152(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_153(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) :|: 1 <= v9 && v10 = 3 + v9 && 4 <= v10
f_153(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 3, 1, 4) -> f_154(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_154(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_155(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_155(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_156(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_156(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_157(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_157(v1, v3, v5, v7, v9, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_158(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_158(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_159(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_159(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_160(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_160(v1, v3, v5, v7, v9, v11, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_161(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_161(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_162(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: TRUE
f_162(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_163(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) :|: 0 = 0
f_163(v1, v3, v5, v7, v9, v11, v13, v2, v4, v6, v8, v10, 0, 3, 1, 4) -> f_165(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: v11 <= 65534
f_165(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_167(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_167(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_169(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_169(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_172(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: v13 <= 65534
f_172(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_175(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_175(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_177(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_177(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_179(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: TRUE
f_179(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_181(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_181(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_182(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 = 0
f_182(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_183(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) :|: 0 < v11
f_183(v1, v3, v5, v7, v9, v11, v13, 0, v2, v4, v6, v8, v10, 3, 1, 4) -> f_185(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_185(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_187(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_187(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_189(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_189(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_191(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_191(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_193(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_193(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_195(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_195(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_197(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: v13 <= 0
f_197(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_199(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_199(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_201(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_201(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_203(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_203(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_205(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_205(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_207(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: 0 = 0
f_207(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_209(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_209(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_211(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
f_211(v1, v3, v5, v7, v9, v11, v13, 0, 1, v2, v4, v6, v8, v10, 3, 4) -> f_262(v1, v3, v5, v7, v9, v11, v13, 0, 0, 1, v2, v4, v6, v8, v10, 3, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_265(v79:0, v80:0, v81:0, v82:0, v83:0, v84:0, v85:0, 0, 1, v89:0, v90:0, v91:0, v92:0, v93:0, 3, 4) -> f_265(v79:0, v80:0, v81:0, v82:0, v83:0, v84:0, v85:0, 0, 1, v89:0, v90:0, v91:0, v92:0, v93:0, 3, 4) :|: v84:0 > 1
f_148 -> f_265(v1:0, v3:0, v5:0, v7:0, v9:0, v11:0, v13:0, 0, 1, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3 + v9:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v11:0 < 65535 && v13:0 < 65535 && v13:0 < 1 && v11:0 > 0
Filtered unneeded arguments:
   f_265(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_265(x6)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_265(v84:0) -> f_265(v84:0) :|: v84:0 > 1
f_148 -> f_265(v11:0) :|: v11:0 < 65535 && v11:0 > 0

----------------------------------------

(21)
Obligation:
Rules:
f_265(v84:0) -> f_265(v84:0) :|: v84:0 > 1
f_148 -> f_265(v11:0) :|: v11:0 < 65535 && v11:0 > 0
Start term: f_148

----------------------------------------

(22) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_265_1,1)
   (f_148_1,2)

----------------------------------------

(23)
Obligation:
START: 2;

FROM: 1;
oldX0 := x0;
assume(oldX0 > 1);
x0 := oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := nondet();
assume(oldX1 < 65535 && oldX1 > 0);
x0 := oldX1;
TO: 1;


----------------------------------------

(24) T2 (COMPLETE)
Nontermination proof succeeded
Found this recurrent set for cutpoint 5: oldX1 == 2 and x0 == 2

----------------------------------------

(25)
NO
/home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_1_NT.c:12:20: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int num_crtc = __VERIFIER_nondet_int();
                   ^
1 warning generated.

line 88:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
 
