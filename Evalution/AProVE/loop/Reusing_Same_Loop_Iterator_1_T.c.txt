timeout 900 ./AProVE.sh -m wst --bit-width 64 Reusing_Same_Loop_Iterator_1_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Reusing_Same_Loop_Iterator_1_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_1_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 82 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2135 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 82 ms]
        (9) IntTRS
        (10) IRS2T2 [EQUIVALENT, 0 ms]
        (11) T2IntSys
        (12) T2 [EQUIVALENT, 156 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 49 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 10 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 70 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_1_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_1_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%6 = call i32 (...)* @__VERIFIER_nondet_int()
		store %6, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%7 = call i32 (...)* @__VERIFIER_nondet_int()
		store %7, %5
		%8 = load %4
		%9 = icmp sgt %8 65534
		br %9, %13, %10
	10:
		%11 = load %5
		%12 = icmp sgt %11 65534
		br %12, %13, %14
	13:
		store 0, %1
		br %33
	14:
		store 0, %2
		br %15
	15:
		%16 = load %2
		%17 = load %4
		%18 = icmp slt %16 %17
		br %18, %19, %32
	19:
		store 0, %3
		br %20
	20:
		%21 = load %3
		%22 = load %5
		%23 = icmp slt %21 %22
		br %23, %24, %28
	24:
		br %25
	25:
		%26 = load %3
		%27 = add i32 %26, 1
		store %27, %3
		br %20
	28:
		br %29
	29:
		%30 = load %2
		%31 = add i32 %30, 1
		store %31, %2
		br %15
	32:
		store 0, %1
		br %33
	33:
		%34 = load %1
		ret %34


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_718(v2029, v2030, v2031, v2032, v2033, v2034, v2035, 0, v2037, 1, v2039, v2040, v2041, v2042, v2043, v2044, v2045, 3, 2, 4) -> f_720(v2029, v2030, v2031, v2032, v2033, v2034, v2035, 0, v2037, 1, v2039, v2040, v2041, v2042, v2043, v2044, v2045, 3, 2, 4) :|: 0 = 0
f_720(v2029, v2030, v2031, v2032, v2033, v2034, v2035, 0, v2037, 1, v2039, v2040, v2041, v2042, v2043, v2044, v2045, 3, 2, 4) -> f_721(v2029, v2030, v2031, v2032, v2033, v2034, v2035, 0, v2037, 1, v2039, v2040, v2041, v2042, v2043, v2044, v2045, 3, 2, 4) :|: 0 = 0
f_721(v2029, v2030, v2031, v2032, v2033, v2034, v2035, 0, v2037, 1, v2039, v2040, v2041, v2042, v2043, v2044, v2045, 3, 2, 4) -> f_722(v2029, v2030, v2031, v2032, v2033, v2034, v2035, 0, v2037, 1, v2039, v2040, v2041, v2042, v2043, v2044, v2045, 3, 2, 4) :|: TRUE
f_722(v2029, v2030, v2031, v2032, v2033, v2034, v2035, 0, v2037, 1, v2039, v2040, v2041, v2042, v2043, v2044, v2045, 3, 2, 4) -> f_723(v2029, v2030, v2031, v2032, v2033, v2034, v2035, 0, v2037, 1, 0, v2039, v2035, v2040, v2041, v2042, v2043, v2044, v2045, 3, 2, 4) :|: TRUE
f_723(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2104, v2105, v2106, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_724(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2104, v2105, v2106, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: TRUE
f_724(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2104, v2105, v2106, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_725(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2104, v2106, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: 0 = 0
f_725(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2104, v2106, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_726(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2104, v2119, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: v2119 = 1 + v2104 && 1 <= v2119
f_726(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2104, v2119, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_727(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2104, v2119, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: TRUE
f_727(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2104, v2119, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_728(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2104, v2119, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: TRUE
f_728(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2104, v2119, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_729(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: 0 = 0
f_729(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_730(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: 0 = 0
f_730(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_731(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: v2119 < v2100 && 2 <= v2100
f_730(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_732(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: v2100 <= v2119 && v2100 = v2119
f_731(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_733(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: 0 = 0
f_733(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_735(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: TRUE
f_735(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_723(v2094, v2095, v2096, v2097, v2098, v2099, v2100, 0, v2102, 1, v2119, v2104, v2119, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: TRUE
f_732(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_734(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: 0 = 0
f_734(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_736(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: TRUE
f_736(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_737(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: TRUE
f_737(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2107, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_738(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: 0 = 0
f_738(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_739(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2214, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: v2214 = 1 + v2102 && 2 <= v2214
f_739(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2214, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_740(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2214, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: TRUE
f_740(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2214, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_741(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2214, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: TRUE
f_741(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2102, 1, v2104, v2214, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_742(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: 0 = 0
f_742(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_743(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: 0 = 0
f_743(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) -> f_744(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 4, 2) :|: v2214 < v2099 && 3 <= v2099
f_744(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 4, 2) -> f_746(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 4, 2) :|: 0 = 0
f_746(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 4, 2) -> f_748(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 4, 2) :|: TRUE
f_748(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 4, 2) -> f_750(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 4, 2) :|: TRUE
f_750(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 4, 2) -> f_752(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 4, 2) :|: TRUE
f_752(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 4, 2) -> f_716(v2094, v2095, v2096, v2097, v2098, v2099, v2119, 0, v2214, 1, v2104, v2102, v2108, v2109, v2110, v2111, v2112, 3, 2, 4) :|: TRUE
f_716(v2029, v2030, v2031, v2032, v2033, v2034, v2035, 0, v2037, 1, v2039, v2040, v2041, v2042, v2043, v2044, v2045, 3, 2, 4) -> f_718(v2029, v2030, v2031, v2032, v2033, v2034, v2035, 0, v2037, 1, v2039, v2040, v2041, v2042, v2043, v2044, v2045, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_730(v2094:0, v2095:0, v2096:0, v2097:0, v2098:0, v2099:0, v2100:0, 0, v2102:0, 1, v2119:0, v2104:0, v2107:0, v2108:0, v2109:0, v2110:0, v2111:0, v2112:0, 3, 2, 4) -> f_730(v2094:0, v2095:0, v2096:0, v2097:0, v2098:0, v2099:0, v2100:0, 0, v2102:0, 1, 1 + v2119:0, v2119:0, v2107:0, v2108:0, v2109:0, v2110:0, v2111:0, v2112:0, 3, 2, 4) :|: v2119:0 > -1 && v2119:0 < v2100:0 && v2100:0 > 1
f_730(v2094:0, v2095:0, v2096:0, v2097:0, v2098:0, v2099:0, v2100:0, 0, v2102:0, 1, v2100:0, v2104:0, v2107:0, v2108:0, v2109:0, v2110:0, v2111:0, v2112:0, 3, 2, 4) -> f_730(v2094:0, v2095:0, v2096:0, v2097:0, v2098:0, v2099:0, v2100:0, 0, 1 + v2102:0, 1, 1, 0, v2102:0, v2108:0, v2109:0, v2110:0, v2111:0, v2112:0, 3, 2, 4) :|: v2102:0 > 0 && v2099:0 > 1 + v2102:0 && v2099:0 > 2
Filtered unneeded arguments:
   f_730(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_730(x6, x7, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_730(v2099:0, v2100:0, v2102:0, v2119:0) -> f_730(v2099:0, v2100:0, v2102:0, 1 + v2119:0) :|: v2119:0 < v2100:0 && v2100:0 > 1 && v2119:0 > -1
f_730(v2099:0, v2100:0, v2102:0, v2100:01) -> f_730(v2099:0, v2100:0, 1 + v2102:0, 1) :|: v2099:0 > 1 + v2102:0 && v2099:0 > 2 && v2102:0 > 0 && v2100:0 = v2100:01

----------------------------------------

(9)
Obligation:
Rules:
f_730(v2099:0, v2100:0, v2102:0, v2119:0) -> f_730(v2099:0, v2100:0, v2102:0, 1 + v2119:0) :|: v2119:0 < v2100:0 && v2100:0 > 1 && v2119:0 > -1
f_730(x, x1, x2, x3) -> f_730(x, x1, 1 + x2, 1) :|: x > 1 + x2 && x > 2 && x2 > 0 && x1 = x3

----------------------------------------

(10) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_730_4,1)

----------------------------------------

(11)
Obligation:
START: 0;

FROM: 0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
assume(oldX3 < oldX1 && oldX1 > 1 && oldX3 > -1);
x0 := oldX0;
x1 := oldX1;
x2 := oldX2;
x3 := 1 + oldX3;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
assume(oldX0 > 1 + oldX2 && oldX0 > 2 && oldX2 > 0 && oldX1 = oldX3);
x0 := oldX0;
x1 := oldX1;
x2 := 1 + oldX2;
x3 := 1;
TO: 1;


----------------------------------------

(12) T2 (EQUIVALENT)
Termination proof succeeded
Initially, performed program simplifications using lexicographic rank functions:
 * Removed transitions 1, 4, 5 using the following rank functions:
    - Rank function 1:
      RF for loc. 5: x0-x2
      RF for loc. 6: x0-x2
      Bound for (chained) transitions 5: 2
    - Rank function 2:
      RF for loc. 5: 2*x1-2*x3
      RF for loc. 6: -1+2*x1-2*x3
      Bound for (chained) transitions 4: 1
    - Rank function 3:
      RF for loc. 5: 0
      RF for loc. 6: -1
      Bound for (chained) transitions 1: 0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_465(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 4) -> f_467(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 4) :|: 0 = 0
f_467(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 4) -> f_469(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) :|: v527 < v522 && 2 <= v522
f_469(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) -> f_472(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) :|: 0 = 0
f_472(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) -> f_475(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) :|: TRUE
f_475(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) -> f_478(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) :|: TRUE
f_478(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) -> f_481(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) :|: TRUE
f_481(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) -> f_484(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) :|: 0 = 0
f_484(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) -> f_488(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) :|: 0 = 0
f_488(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) -> f_491(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) :|: 0 = 0
f_491(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) -> f_494(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) :|: TRUE
f_494(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) -> f_496(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) :|: TRUE
f_496(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 2, 4) -> f_498(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v528, v529, v530, v531, v532, 3, 2, 4) :|: 0 = 0
f_498(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v528, v529, v530, v531, v532, 3, 2, 4) -> f_500(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v682, v528, v529, v530, v531, v532, 3, 2, 4) :|: v682 = 1 + v527 && 2 <= v682
f_500(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v682, v528, v529, v530, v531, v532, 3, 2, 4) -> f_502(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v682, v528, v529, v530, v531, v532, 3, 2, 4) :|: TRUE
f_502(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v682, v528, v529, v530, v531, v532, 3, 2, 4) -> f_504(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v682, v528, v529, v530, v531, v532, 3, 2, 4) :|: TRUE
f_504(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v682, v528, v529, v530, v531, v532, 3, 2, 4) -> f_462(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v682, v528, v529, v530, v531, v532, 3, 4) :|: TRUE
f_462(v517, v518, v519, v520, v521, v522, v523, 0, v525, 1, v527, v528, v529, v530, v531, v532, 3, 4) -> f_465(v517, v518, v519, v520, v521, v522, v523, 0, v527, 1, v525, v528, v529, v530, v531, v532, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_465(v517:0, v518:0, v519:0, v520:0, v521:0, v522:0, v523:0, 0, v527:0, 1, v525:0, v528:0, v529:0, v530:0, v531:0, v532:0, 3, 4) -> f_465(v517:0, v518:0, v519:0, v520:0, v521:0, v522:0, v523:0, 0, 1 + v527:0, 1, v527:0, v528:0, v529:0, v530:0, v531:0, v532:0, 3, 4) :|: v522:0 > 1 && v527:0 > 0 && v527:0 < v522:0
Filtered unneeded arguments:
   f_465(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_465(x6, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_465(v522:0, v527:0) -> f_465(v522:0, 1 + v527:0) :|: v527:0 > 0 && v527:0 < v522:0 && v522:0 > 1

----------------------------------------

(16)
Obligation:
Rules:
f_465(v522:0, v527:0) -> f_465(v522:0, 1 + v527:0) :|: v527:0 > 0 && v527:0 < v522:0 && v522:0 > 1

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_465(v522:0:0, v527:0:0) -> f_465(v522:0:0, 1 + v527:0:0) :|: v527:0:0 > 0 && v527:0:0 < v522:0:0 && v522:0:0 > 1

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_465 ] = -1*f_465_2 + f_465_1

The following rules are decreasing:
f_465(v522:0:0, v527:0:0) -> f_465(v522:0:0, 1 + v527:0:0) :|: v527:0:0 > 0 && v527:0:0 < v522:0:0 && v522:0:0 > 1

The following rules are bounded:
f_465(v522:0:0, v527:0:0) -> f_465(v522:0:0, 1 + v527:0:0) :|: v527:0:0 > 0 && v527:0:0 < v522:0:0 && v522:0:0 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 11 rulesP rules:
f_373(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 4) -> f_376(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 4) :|: 0 = 0
f_376(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 4) -> f_379(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 2, 4) :|: v274 < v270 && 2 <= v270
f_379(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 2, 4) -> f_383(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 2, 4) :|: 0 = 0
f_383(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 2, 4) -> f_387(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 2, 4) :|: TRUE
f_387(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 2, 4) -> f_391(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 2, 4) :|: TRUE
f_391(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 2, 4) -> f_395(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v275, v276, v277, v278, v279, 3, 2, 4) :|: 0 = 0
f_395(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v275, v276, v277, v278, v279, 3, 2, 4) -> f_398(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v299, v275, v276, v277, v278, v279, 3, 2, 4) :|: v299 = 1 + v274 && 2 <= v299
f_398(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v299, v275, v276, v277, v278, v279, 3, 2, 4) -> f_401(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v299, v275, v276, v277, v278, v279, 3, 2, 4) :|: TRUE
f_401(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v299, v275, v276, v277, v278, v279, 3, 2, 4) -> f_404(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v299, v275, v276, v277, v278, v279, 3, 2, 4) :|: TRUE
f_404(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v299, v275, v276, v277, v278, v279, 3, 2, 4) -> f_371(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v299, v275, v276, v277, v278, v279, 3, 4) :|: TRUE
f_371(v264, v265, v266, v267, v268, v269, v270, 0, 1, v273, v274, v275, v276, v277, v278, v279, 3, 4) -> f_373(v264, v265, v266, v267, v268, v269, v270, 0, 1, v274, v273, v275, v276, v277, v278, v279, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_373(v264:0, v265:0, v266:0, v267:0, v268:0, v269:0, v270:0, 0, 1, v274:0, v273:0, v275:0, v276:0, v277:0, v278:0, v279:0, 3, 4) -> f_373(v264:0, v265:0, v266:0, v267:0, v268:0, v269:0, v270:0, 0, 1, 1 + v274:0, v274:0, v275:0, v276:0, v277:0, v278:0, v279:0, 3, 4) :|: v270:0 > 1 && v274:0 > 0 && v274:0 < v270:0
Filtered unneeded arguments:
   f_373(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_373(x7, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_373(v270:0, v274:0) -> f_373(v270:0, 1 + v274:0) :|: v274:0 > 0 && v274:0 < v270:0 && v270:0 > 1

----------------------------------------

(23)
Obligation:
Rules:
f_373(v270:0, v274:0) -> f_373(v270:0, 1 + v274:0) :|: v274:0 > 0 && v274:0 < v270:0 && v270:0 > 1

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_373(v270:0:0, v274:0:0) -> f_373(v270:0:0, 1 + v274:0:0) :|: v274:0:0 > 0 && v274:0:0 < v270:0:0 && v270:0:0 > 1

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_373(x, x1)] = x - x1

The following rules are decreasing:
f_373(v270:0:0, v274:0:0) -> f_373(v270:0:0, 1 + v274:0:0) :|: v274:0:0 > 0 && v274:0:0 < v270:0:0 && v270:0:0 > 1
The following rules are bounded:
f_373(v270:0:0, v274:0:0) -> f_373(v270:0:0, 1 + v274:0:0) :|: v274:0:0 > 0 && v274:0:0 < v270:0:0 && v270:0:0 > 1

----------------------------------------

(27)
YES
/home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_1_T.c:13:20: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int num_crtc = __VERIFIER_nondet_int();
                   ^
1 warning generated.

line 88:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
 
