timeout 900 ./AProVE.sh -m wst --bit-width 64 Reusing_Same_Loop_Iterator_2_NT.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Reusing_Same_Loop_Iterator_2_NT.c
MAYBE
proof of /home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_2_NT.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 81 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 384 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 48 ms]
        (9) IntTRS
            (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (11) IntTRS
            (12) IntTRSPeriodicNontermProof [COMPLETE, 3 ms]
            (13) NO
        (14) SCC2IRS [SOUND, 0 ms]
        (15) IntTRS
            (16) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (17) IntTRS
            (18) IntTRSNonPeriodicNontermProof [COMPLETE, 0 ms]
            (19) NO
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 50 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) RankingReductionPairProof [EQUIVALENT, 19 ms]
        (26) YES
(27) SymbolicExecutionGraphToLassoProof [COMPLETE, 5 ms]
(28) AND
    (29) LLVM Symbolic Execution Lasso
        (30) Lasso2IRS [EQUIVALENT, 117 ms]
        (31) IntTRS
        (32) IRS2T2 [EQUIVALENT, 0 ms]
        (33) T2IntSys
        (34) T2 [EQUIVALENT, 422 ms]
        (35) YES
    (36) LLVM Symbolic Execution Lasso
        (37) Lasso2IRS [EQUIVALENT, 91 ms]
        (38) IntTRS
        (39) IRS2T2 [EQUIVALENT, 0 ms]
        (40) T2IntSys
        (41) T2 [EQUIVALENT, 413 ms]
        (42) YES
(43) SEGraph to IRS [EQUIVALENT, 123 ms]
(44) IntTRS
    (45) IRSNoOverapproximation [EQUIVALENT, 0 ms]
    (46) IntTRS
        (47) IRSToKoat [EQUIVALENT, 0 ms]
        (48) Koat Problem
        (49) LoAT [EQUIVALENT, 2624 ms]
        (50) MAYBE
    (51) IRS2T2 [EQUIVALENT, 0 ms]
    (52) T2IntSys
        (53) T2 Underapproximation [COMPLETE, 51.2 s]
        (54) T2IntSys
        (55) T2 Underapproximation [COMPLETE, 50.0 s]
        (56) T2IntSys


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_2_NT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_2_NT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 (...)* @__VERIFIER_nondet_int()
		store %5, %4
		%6 = load %4
		%7 = icmp sgt %6 65534
		br %7, %8, %9
	8:
		store 0, %1
		br %27
	9:
		store 0, %2
		br %10
	10:
		%11 = load %2
		%12 = load %4
		%13 = icmp slt %11 %12
		br %13, %14, %26
	14:
		store 0, %2
		br %15
	15:
		%16 = load %2
		%17 = icmp slt %16 3
		br %17, %18, %22
	18:
		br %19
	19:
		%20 = load %2
		%21 = add i32 %20, 1
		store %21, %2
		br %15
	22:
		br %23
	23:
		%24 = load %2
		%25 = add i32 %24, 1
		store %25, %2
		br %10
	26:
		store 0, %1
		br %27
	27:
		%28 = load %1
		ret %28


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 30 rulesP rules:
f_209(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_211(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: TRUE
f_211(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_213(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: 0 = 0
f_213(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_215(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: 0 = 0
f_215(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_216(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: TRUE
f_216(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_225(v26, v27, v28, v29, v30, 0, 4, 1, 0, 2, 3, 3, v35, v36, v37, v38, 5, 2) :|: TRUE
f_225(v118, v119, v120, v121, v122, 0, 4, 1, v126, v127, v128, 3, v130, v131, v132, v133, 5, 2) -> f_234(v118, v119, v120, v121, v122, 0, 4, 1, v126, v127, v128, 3, v130, v131, v132, v133, 5, 2) :|: TRUE
f_234(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) -> f_235(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_235(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) -> f_236(v166, v167, v168, v169, v170, 0, 4, 1, v174, v176, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_236(v166, v167, v168, v169, v170, 0, 4, 1, v174, v176, 3, v178, v179, v180, v181, 5, 2) -> f_237(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: v188 = 1 + v174 && 1 <= v188 && v188 <= 3
f_237(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_238(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_238(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_239(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_239(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_241(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: v188 < 3 && v174 <= 1
f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_242(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 3 <= v188 && v174 = 2 && v188 = 3 && 0 = 0
f_241(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_243(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_243(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_245(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_245(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_234(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_242(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_244(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_244(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_246(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_246(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_247(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_247(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_248(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_248(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_249(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_249(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_250(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_250(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_251(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_251(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_252(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_252(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_253(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_253(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_254(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_254(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_255(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_255(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_207(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_207(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_209(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, v188:0, v174:0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) -> f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 1 + v188:0, v188:0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) :|: v188:0 > -1 && v188:0 < 3 && v174:0 < 2
f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 3, 2, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) -> f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 1, 0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) :|: TRUE
Filtered unneeded arguments:
   f_240(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_240(x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_240(v188:0, v174:0) -> f_240(1 + v188:0, v188:0) :|: v188:0 < 3 && v174:0 < 2 && v188:0 > -1
f_240(cons_3, cons_2) -> f_240(1, 0) :|: TRUE && cons_3 = 3 && cons_2 = 2

----------------------------------------

(9)
Obligation:
Rules:
f_240(v188:0, v174:0) -> f_240(1 + v188:0, v188:0) :|: v188:0 < 3 && v174:0 < 2 && v188:0 > -1
f_240(cons_3, cons_2) -> f_240(1, 0) :|: TRUE && cons_3 = 3 && cons_2 = 2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_240(v188:0:0, v174:0:0) -> f_240(1 + v188:0:0, v188:0:0) :|: v188:0:0 < 3 && v174:0:0 < 2 && v188:0:0 > -1
f_240(cons_3, cons_2) -> f_240(1, 0) :|: TRUE && cons_3 = 3 && cons_2 = 2

----------------------------------------

(12) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v188:0:0, v174:0:0) -> f(1, 1 + v188:0:0, v188:0:0) :|: pc = 1 && (v188:0:0 < 3 && v174:0:0 < 2 && v188:0:0 > -1)
f(pc, cons_3, cons_2) -> f(1, 1, 0) :|: pc = 1 && (TRUE && cons_3 = 3 && cons_2 = 2)
Witness term starting non-terminating reduction: f(1, 3, 2)
----------------------------------------

(13)
NO

----------------------------------------

(14) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 30 rulesP rules:
f_209(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_211(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: TRUE
f_211(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_213(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: 0 = 0
f_213(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_215(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: 0 = 0
f_215(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_216(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: TRUE
f_216(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_225(v26, v27, v28, v29, v30, 0, 4, 1, 0, 2, 3, 3, v35, v36, v37, v38, 5, 2) :|: 1 <= v26 && 1 <= v27 && 1 <= v28 && 1 <= v29 && 5 <= v30 && 0 <= 0 && 0 <= 1 && 0 <= 2 && 2 <= 2 && 1 <= 3 && 3 <= 3 && 4 <= v35 && 4 <= v36 && 4 <= v37 && 4 <= v38 && v26 <= v35 && v27 <= v36 && v28 <= v37 && v29 <= v38
f_225(v118, v119, v120, v121, v122, 0, 4, 1, v126, v127, v128, 3, v130, v131, v132, v133, 5, 2) -> f_234(v118, v119, v120, v121, v122, 0, 4, 1, v126, v127, v128, 3, v130, v131, v132, v133, 5, 2) :|: 1 <= v118 && 1 <= v119 && 1 <= v120 && 1 <= v121 && 5 <= v122 && 0 <= v126 && v126 <= 2 && 0 <= v127 && v127 <= 2 && 1 <= v128 && v128 <= 3 && 4 <= v130 && 4 <= v131 && 4 <= v132 && 4 <= v133 && v118 <= v130 && v119 <= v131 && v120 <= v132 && v121 <= v133
f_234(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) -> f_235(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_235(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) -> f_236(v166, v167, v168, v169, v170, 0, 4, 1, v174, v176, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_236(v166, v167, v168, v169, v170, 0, 4, 1, v174, v176, 3, v178, v179, v180, v181, 5, 2) -> f_237(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: v188 = 1 + v174 && 1 <= v188 && v188 <= 3
f_237(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_238(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_238(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_239(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_239(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_241(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: v188 < 3 && v174 <= 1
f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_242(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 3 <= v188 && v174 = 2 && v188 = 3 && 0 = 0
f_241(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_243(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_243(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_245(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_245(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_234(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: 1 <= v166 && 1 <= v167 && 1 <= v168 && 1 <= v169 && 5 <= v170 && 0 <= v188 && v188 <= 2 && 0 <= v174 && v174 <= 2 && 1 <= v188 && v188 <= 3 && 4 <= v178 && 4 <= v179 && 4 <= v180 && 4 <= v181 && v166 <= v178 && v167 <= v179 && v168 <= v180 && v169 <= v181
f_242(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_244(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_244(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_246(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_246(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_247(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_247(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_248(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_248(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_249(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_249(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_250(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_250(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_251(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_251(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_252(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_252(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_253(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_253(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_254(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_254(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_255(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_255(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_207(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 1 <= v166 && 1 <= v167 && 1 <= v168 && 1 <= v169 && 5 <= v170 && 4 <= v178 && 4 <= v179 && 4 <= v180 && 4 <= v181 && v166 <= v178 && v167 <= v179 && v168 <= v180 && v169 <= v181
f_207(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_209(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 3, 2, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) -> f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 1, 0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) :|: v167:0 > 0 && v166:0 > 0 && v168:0 > 0 && v169:0 > 0 && v170:0 > 4 && v178:0 > 3 && v179:0 > 3 && v180:0 > 3 && v181:0 > 3 && v178:0 >= v166:0 && v179:0 >= v167:0 && v180:0 >= v168:0 && v181:0 >= v169:0
f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, v188:0, v174:0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) -> f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 1 + v188:0, v188:0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) :|: v188:0 > 0 && v167:0 > 0 && v166:0 > 0 && v168:0 > 0 && v169:0 > 0 && v170:0 > 4 && v188:0 < 3 && v174:0 > -1 && v174:0 < 3 && v188:0 < 4 && v178:0 > 3 && v179:0 > 3 && v180:0 > 3 && v181:0 > 3 && v178:0 >= v166:0 && v179:0 >= v167:0 && v180:0 >= v168:0 && v181:0 >= v169:0 && v174:0 < 2
Filtered unneeded arguments:
   f_240(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_240(x1, x2, x3, x4, x5, x9, x10, x12, x13, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_240(v166:0, v167:0, v168:0, v169:0, v170:0, cons_3, cons_2, v178:0, v179:0, v180:0, v181:0) -> f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 1, 0, v178:0, v179:0, v180:0, v181:0) :|: v166:0 > 0 && v167:0 > 0 && v168:0 > 0 && v169:0 > 0 && v170:0 > 4 && v178:0 > 3 && v179:0 > 3 && v180:0 > 3 && v181:0 > 3 && v178:0 >= v166:0 && v179:0 >= v167:0 && v181:0 >= v169:0 && v180:0 >= v168:0 && cons_3 = 3 && cons_2 = 2
f_240(v166:0, v167:0, v168:0, v169:0, v170:0, v188:0, v174:0, v178:0, v179:0, v180:0, v181:0) -> f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 1 + v188:0, v188:0, v178:0, v179:0, v180:0, v181:0) :|: v167:0 > 0 && v188:0 > 0 && v166:0 > 0 && v168:0 > 0 && v169:0 > 0 && v170:0 > 4 && v188:0 < 3 && v174:0 > -1 && v174:0 < 3 && v188:0 < 4 && v178:0 > 3 && v179:0 > 3 && v180:0 > 3 && v181:0 > 3 && v178:0 >= v166:0 && v179:0 >= v167:0 && v180:0 >= v168:0 && v174:0 < 2 && v181:0 >= v169:0

----------------------------------------

(15)
Obligation:
Rules:
f_240(v166:0, v167:0, v168:0, v169:0, v170:0, cons_3, cons_2, v178:0, v179:0, v180:0, v181:0) -> f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 1, 0, v178:0, v179:0, v180:0, v181:0) :|: v166:0 > 0 && v167:0 > 0 && v168:0 > 0 && v169:0 > 0 && v170:0 > 4 && v178:0 > 3 && v179:0 > 3 && v180:0 > 3 && v181:0 > 3 && v178:0 >= v166:0 && v179:0 >= v167:0 && v181:0 >= v169:0 && v180:0 >= v168:0 && cons_3 = 3 && cons_2 = 2
f_240(x, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) -> f_240(x, x1, x2, x3, x4, 1 + x5, x5, x7, x8, x9, x10) :|: x1 > 0 && x5 > 0 && x > 0 && x2 > 0 && x3 > 0 && x4 > 4 && x5 < 3 && x6 > -1 && x6 < 3 && x5 < 4 && x7 > 3 && x8 > 3 && x9 > 3 && x10 > 3 && x7 >= x && x8 >= x1 && x9 >= x2 && x6 < 2 && x10 >= x3

----------------------------------------

(16) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(17)
Obligation:
Rules:
f_240(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, x9:0, x10:0) -> f_240(x:0, x1:0, x2:0, x3:0, x4:0, 1 + x5:0, x5:0, x7:0, x8:0, x9:0, x10:0) :|: x6:0 < 2 && x3:0 <= x10:0 && x9:0 >= x2:0 && x8:0 >= x1:0 && x:0 <= x7:0 && x10:0 > 3 && x9:0 > 3 && x8:0 > 3 && x7:0 > 3 && x5:0 < 4 && x6:0 < 3 && x6:0 > -1 && x5:0 < 3 && x4:0 > 4 && x3:0 > 0 && x2:0 > 0 && x:0 > 0 && x5:0 > 0 && x1:0 > 0
f_240(v166:0:0, v167:0:0, v168:0:0, v169:0:0, v170:0:0, cons_3, cons_2, v178:0:0, v179:0:0, v180:0:0, v181:0:0) -> f_240(v166:0:0, v167:0:0, v168:0:0, v169:0:0, v170:0:0, 1, 0, v178:0:0, v179:0:0, v180:0:0, v181:0:0) :|: v181:0:0 >= v169:0:0 && v180:0:0 >= v168:0:0 && v179:0:0 >= v167:0:0 && v178:0:0 >= v166:0:0 && v181:0:0 > 3 && v180:0:0 > 3 && v179:0:0 > 3 && v178:0:0 > 3 && v170:0:0 > 4 && v169:0:0 > 0 && v168:0:0 > 0 && v167:0:0 > 0 && v166:0:0 > 0 && cons_3 = 3 && cons_2 = 2

----------------------------------------

(18) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0, x7:0, x8:0, x9:0, x10:0) -> f(1, x:0, x1:0, x2:0, x3:0, x4:0, 1 + x5:0, x5:0, x7:0, x8:0, x9:0, x10:0) :|: pc = 1 && (x6:0 < 2 && x3:0 <= x10:0 && x9:0 >= x2:0 && x8:0 >= x1:0 && x:0 <= x7:0 && x10:0 > 3 && x9:0 > 3 && x8:0 > 3 && x7:0 > 3 && x5:0 < 4 && x6:0 < 3 && x6:0 > -1 && x5:0 < 3 && x4:0 > 4 && x3:0 > 0 && x2:0 > 0 && x:0 > 0 && x5:0 > 0 && x1:0 > 0)
f(pc, v166:0:0, v167:0:0, v168:0:0, v169:0:0, v170:0:0, cons_3, cons_2, v178:0:0, v179:0:0, v180:0:0, v181:0:0) -> f(1, v166:0:0, v167:0:0, v168:0:0, v169:0:0, v170:0:0, 1, 0, v178:0:0, v179:0:0, v180:0:0, v181:0:0) :|: pc = 1 && (v181:0:0 >= v169:0:0 && v180:0:0 >= v168:0:0 && v179:0:0 >= v167:0:0 && v178:0:0 >= v166:0:0 && v181:0:0 > 3 && v180:0:0 > 3 && v179:0:0 > 3 && v178:0:0 > 3 && v170:0:0 > 4 && v169:0:0 > 0 && v168:0:0 > 0 && v167:0:0 > 0 && v166:0:0 > 0 && cons_3 = 3 && cons_2 = 2)
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
((((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((1 * 1) + (run1_6 * 1)) and run2_7 = ((run1_6 * 1)) and run2_8 = ((run1_8 * 1)) and run2_9 = ((run1_9 * 1)) and run2_10 = ((run1_10 * 1)) and run2_11 = ((run1_11 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((((((((((((((((((((run1_7 * 1)) < ((1 * 2)) and ((run1_4 * 1)) <= ((run1_11 * 1))) and ((run1_10 * 1)) >= ((run1_3 * 1))) and ((run1_9 * 1)) >= ((run1_2 * 1))) and ((run1_1 * 1)) <= ((run1_8 * 1))) and ((run1_11 * 1)) > ((1 * 3))) and ((run1_10 * 1)) > ((1 * 3))) and ((run1_9 * 1)) > ((1 * 3))) and ((run1_8 * 1)) > ((1 * 3))) and ((run1_6 * 1)) < ((1 * 4))) and ((run1_7 * 1)) < ((1 * 3))) and ((run1_7 * 1)) > ((1 * -1))) and ((run1_6 * 1)) < ((1 * 3))) and ((run1_5 * 1)) > ((1 * 4))) and ((run1_4 * 1)) > 0) and ((run1_3 * 1)) > 0) and ((run1_1 * 1)) > 0) and ((run1_6 * 1)) > 0) and ((run1_2 * 1)) > 0))) or ((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((1 * 1)) and run2_7 = 0 and run2_8 = ((run1_8 * 1)) and run2_9 = ((run1_9 * 1)) and run2_10 = ((run1_10 * 1)) and run2_11 = ((run1_11 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((((((((((((((((run1_11 * 1)) >= ((run1_4 * 1)) and ((run1_10 * 1)) >= ((run1_3 * 1))) and ((run1_9 * 1)) >= ((run1_2 * 1))) and ((run1_8 * 1)) >= ((run1_1 * 1))) and ((run1_11 * 1)) > ((1 * 3))) and ((run1_10 * 1)) > ((1 * 3))) and ((run1_9 * 1)) > ((1 * 3))) and ((run1_8 * 1)) > ((1 * 3))) and ((run1_5 * 1)) > ((1 * 4))) and ((run1_4 * 1)) > 0) and ((run1_3 * 1)) > 0) and ((run1_2 * 1)) > 0) and ((run1_1 * 1)) > 0) and ((run1_6 * 1)) = ((1 * 3))) and ((run1_7 * 1)) = ((1 * 2)))))) and (!(((run2_0 * 1)) = ((1 * 1)) and ((((((((((((((((((((run2_7 * 1)) < ((1 * 2)) and ((run2_4 * 1)) <= ((run2_11 * 1))) and ((run2_10 * 1)) >= ((run2_3 * 1))) and ((run2_9 * 1)) >= ((run2_2 * 1))) and ((run2_1 * 1)) <= ((run2_8 * 1))) and ((run2_11 * 1)) > ((1 * 3))) and ((run2_10 * 1)) > ((1 * 3))) and ((run2_9 * 1)) > ((1 * 3))) and ((run2_8 * 1)) > ((1 * 3))) and ((run2_6 * 1)) < ((1 * 4))) and ((run2_7 * 1)) < ((1 * 3))) and ((run2_7 * 1)) > ((1 * -1))) and ((run2_6 * 1)) < ((1 * 3))) and ((run2_5 * 1)) > ((1 * 4))) and ((run2_4 * 1)) > 0) and ((run2_3 * 1)) > 0) and ((run2_1 * 1)) > 0) and ((run2_6 * 1)) > 0) and ((run2_2 * 1)) > 0)) and !(((run2_0 * 1)) = ((1 * 1)) and ((((((((((((((((run2_11 * 1)) >= ((run2_4 * 1)) and ((run2_10 * 1)) >= ((run2_3 * 1))) and ((run2_9 * 1)) >= ((run2_2 * 1))) and ((run2_8 * 1)) >= ((run2_1 * 1))) and ((run2_11 * 1)) > ((1 * 3))) and ((run2_10 * 1)) > ((1 * 3))) and ((run2_9 * 1)) > ((1 * 3))) and ((run2_8 * 1)) > ((1 * 3))) and ((run2_5 * 1)) > ((1 * 4))) and ((run2_4 * 1)) > 0) and ((run2_3 * 1)) > 0) and ((run2_2 * 1)) > 0) and ((run2_1 * 1)) > 0) and ((run2_6 * 1)) = ((1 * 3))) and ((run2_7 * 1)) = ((1 * 2))))))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
(((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((1 * 1) + (run1_6 * 1)) and run2_7 = ((run1_6 * 1)) and run2_8 = ((run1_8 * 1)) and run2_9 = ((run1_9 * 1)) and run2_10 = ((run1_10 * 1)) and run2_11 = ((run1_11 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((((((((((((((((((((run1_7 * 1)) < ((1 * 2)) and ((run1_4 * 1)) <= ((run1_11 * 1))) and ((run1_10 * 1)) >= ((run1_3 * 1))) and ((run1_9 * 1)) >= ((run1_2 * 1))) and ((run1_1 * 1)) <= ((run1_8 * 1))) and ((run1_11 * 1)) > ((1 * 3))) and ((run1_10 * 1)) > ((1 * 3))) and ((run1_9 * 1)) > ((1 * 3))) and ((run1_8 * 1)) > ((1 * 3))) and ((run1_6 * 1)) < ((1 * 4))) and ((run1_7 * 1)) < ((1 * 3))) and ((run1_7 * 1)) > ((1 * -1))) and ((run1_6 * 1)) < ((1 * 3))) and ((run1_5 * 1)) > ((1 * 4))) and ((run1_4 * 1)) > 0) and ((run1_3 * 1)) > 0) and ((run1_1 * 1)) > 0) and ((run1_6 * 1)) > 0) and ((run1_2 * 1)) > 0))) or ((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((1 * 1)) and run2_7 = 0 and run2_8 = ((run1_8 * 1)) and run2_9 = ((run1_9 * 1)) and run2_10 = ((run1_10 * 1)) and run2_11 = ((run1_11 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((((((((((((((((run1_11 * 1)) >= ((run1_4 * 1)) and ((run1_10 * 1)) >= ((run1_3 * 1))) and ((run1_9 * 1)) >= ((run1_2 * 1))) and ((run1_8 * 1)) >= ((run1_1 * 1))) and ((run1_11 * 1)) > ((1 * 3))) and ((run1_10 * 1)) > ((1 * 3))) and ((run1_9 * 1)) > ((1 * 3))) and ((run1_8 * 1)) > ((1 * 3))) and ((run1_5 * 1)) > ((1 * 4))) and ((run1_4 * 1)) > 0) and ((run1_3 * 1)) > 0) and ((run1_2 * 1)) > 0) and ((run1_1 * 1)) > 0) and ((run1_6 * 1)) = ((1 * 3))) and ((run1_7 * 1)) = ((1 * 2))))))

----------------------------------------

(19)
NO

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_184(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_185(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: v34 < 3 && v33 <= 1
f_185(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_187(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: 0 = 0
f_187(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_189(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_189(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_191(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_191(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_193(v26, v27, v28, v29, v30, 0, 1, v34, v35, v36, v37, v38, 3, 2, 4) :|: 0 = 0
f_193(v26, v27, v28, v29, v30, 0, 1, v34, v35, v36, v37, v38, 3, 2, 4) -> f_195(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: v39 = 1 + v34 && 2 <= v39 && v39 <= 3
f_195(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) -> f_197(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_197(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) -> f_199(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_199(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) -> f_183(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_183(v26, v27, v28, v29, v30, 0, 1, v33, v34, v35, v36, v37, v38, 3, 2, 4) -> f_184(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_184(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 1, v34:0, v33:0, v35:0, v36:0, v37:0, v38:0, 3, 2, 4) -> f_184(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 1, 1 + v34:0, v34:0, v35:0, v36:0, v37:0, v38:0, 3, 2, 4) :|: v33:0 < 2 && v34:0 < 3 && v34:0 > 0
Filtered unneeded arguments:
   f_184(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_184(x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_184(v34:0, v33:0) -> f_184(1 + v34:0, v34:0) :|: v34:0 < 3 && v34:0 > 0 && v33:0 < 2

----------------------------------------

(22)
Obligation:
Rules:
f_184(v34:0, v33:0) -> f_184(1 + v34:0, v34:0) :|: v34:0 < 3 && v34:0 > 0 && v33:0 < 2

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_184(v34:0:0, v33:0:0) -> f_184(1 + v34:0:0, v34:0:0) :|: v34:0:0 < 3 && v34:0:0 > 0 && v33:0:0 < 2

----------------------------------------

(25) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_184 ] = -1*f_184_1

The following rules are decreasing:
f_184(v34:0:0, v33:0:0) -> f_184(1 + v34:0:0, v34:0:0) :|: v34:0:0 < 3 && v34:0:0 > 0 && v33:0:0 < 2

The following rules are bounded:
f_184(v34:0:0, v33:0:0) -> f_184(1 + v34:0:0, v34:0:0) :|: v34:0:0 < 3 && v34:0:0 > 0 && v33:0:0 < 2


----------------------------------------

(26)
YES

----------------------------------------

(27) SymbolicExecutionGraphToLassoProof (COMPLETE)
Converted SEGraph to 2 dependent lassos.
----------------------------------------

(28)
Complex Obligation (AND)

----------------------------------------

(29)
Obligation:
Lasso
----------------------------------------

(30) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 76 rulesP rules:
f_209(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_211(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: TRUE
f_211(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_213(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: 0 = 0
f_213(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_215(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: 0 = 0
f_215(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_216(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: TRUE
f_216(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_225(v26, v27, v28, v29, v30, 0, 4, 1, 0, 2, 3, 3, v35, v36, v37, v38, 5, 2) :|: TRUE
f_225(v118, v119, v120, v121, v122, 0, 4, 1, v126, v127, v128, 3, v130, v131, v132, v133, 5, 2) -> f_234(v118, v119, v120, v121, v122, 0, 4, 1, v126, v127, v128, 3, v130, v131, v132, v133, 5, 2) :|: TRUE
f_234(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) -> f_235(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_235(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) -> f_236(v166, v167, v168, v169, v170, 0, 4, 1, v174, v176, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_236(v166, v167, v168, v169, v170, 0, 4, 1, v174, v176, 3, v178, v179, v180, v181, 5, 2) -> f_237(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: v188 = 1 + v174 && 1 <= v188 && v188 <= 3
f_237(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_238(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_238(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_239(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_239(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_241(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: v188 < 3 && v174 <= 1
f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_242(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 3 <= v188 && v174 = 2 && v188 = 3 && 0 = 0
f_241(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_243(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_243(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_245(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_245(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_234(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_242(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_244(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_244(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_246(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_246(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_247(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_247(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_248(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_248(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_249(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_249(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_250(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_250(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_251(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_251(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_252(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_252(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_253(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_253(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_254(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_254(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_255(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_255(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_207(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_207(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_209(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: TRUE
f_124 -> f_125(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_125(v1, v2, 3, 1, 4) -> f_126(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_126(v1, v3, v2, v4, 3, 1, 4) -> f_127(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_127(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_128(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_128(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_129(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_129(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_130(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_130(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_131(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_131(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_132(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_132(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_133(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_133(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_134(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_134(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_135(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_135(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_137(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: v9 <= 65534
f_137(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_139(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_139(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_141(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_141(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_143(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_143(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_145(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 = 0
f_145(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_146(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 = 0
f_146(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_147(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 < v9
f_147(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_149(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_149(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_151(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_151(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_153(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_153(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_155(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_155(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_157(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_157(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_159(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_159(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_160(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_160(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_161(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_161(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_162(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_162(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_163(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_163(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_164(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_164(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_165(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_165(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_174(v1, v3, v5, v7, v9, 0, 1, 0, 1, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_174(v11, v12, v13, v14, v15, 0, 1, v18, v19, v20, v21, v22, v23, 3, 2, 4) -> f_183(v11, v12, v13, v14, v15, 0, 1, v18, v19, v20, v21, v22, v23, 3, 2, 4) :|: TRUE
f_183(v26, v27, v28, v29, v30, 0, 1, v33, v34, v35, v36, v37, v38, 3, 2, 4) -> f_184(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: 0 = 0
f_184(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_186(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) :|: 3 <= v34 && v33 = 2 && v34 = 3 && 0 = 0
f_186(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) -> f_188(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) :|: 0 = 0
f_188(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) -> f_190(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) :|: TRUE
f_190(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) -> f_192(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) :|: TRUE
f_192(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) -> f_194(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) :|: 0 = 0
f_194(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) -> f_196(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) :|: 0 = 0
f_196(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) -> f_198(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) :|: TRUE
f_198(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) -> f_200(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) :|: TRUE
f_200(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) -> f_201(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38) :|: 0 = 0
f_201(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38) -> f_202(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38) :|: 0 = 0
f_202(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38) -> f_203(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: 4 < v30
f_203(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_205(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: 0 = 0
f_205(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_207(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, v188:0, v174:0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) -> f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 1 + v188:0, v188:0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) :|: v188:0 > -1 && v188:0 < 3 && v174:0 < 2
f_124 -> f_240(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 4, 1, v188:0, 0, 3, v2:0, v4:0, v6:0, v8:0, 5, 2) :|: FALSE
f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 3, 2, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) -> f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 1, 0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) :|: TRUE
Filtered unneeded arguments:
   f_240(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_240(x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_240(v188:0, v174:0) -> f_240(1 + v188:0, v188:0) :|: v188:0 < 3 && v174:0 < 2 && v188:0 > -1
f_124 -> f_240(v188:0, 0) :|: FALSE
f_240(cons_3, cons_2) -> f_240(1, 0) :|: TRUE && cons_3 = 3 && cons_2 = 2

----------------------------------------

(31)
Obligation:
Rules:
f_240(v188:0, v174:0) -> f_240(1 + v188:0, v188:0) :|: v188:0 < 3 && v174:0 < 2 && v188:0 > -1
f_124 -> f_240(x, 0) :|: FALSE
f_240(cons_3, cons_2) -> f_240(1, 0) :|: TRUE && cons_3 = 3 && cons_2 = 2
Start term: f_124

----------------------------------------

(32) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_240_2,1)
   (f_124_2,2)

----------------------------------------

(33)
Obligation:
START: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
assume(oldX0 < 3 && oldX1 < 2 && oldX0 > -1);
x0 := 1 + oldX0;
x1 := oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
oldX2 := nondet();
assume(0 = 1);
x0 := oldX2;
x1 := 0;
TO: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
assume(0 = 0 && oldX0 = 3 && oldX1 = 2);
x0 := 1;
x1 := 0;
TO: 1;


----------------------------------------

(34) T2 (EQUIVALENT)
Termination proof succeeded

----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
Lasso
----------------------------------------

(37) Lasso2IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 42 rulesP rules:
f_184(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_185(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: v34 < 3 && v33 <= 1
f_185(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_187(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: 0 = 0
f_187(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_189(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_189(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_191(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_191(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_193(v26, v27, v28, v29, v30, 0, 1, v34, v35, v36, v37, v38, 3, 2, 4) :|: 0 = 0
f_193(v26, v27, v28, v29, v30, 0, 1, v34, v35, v36, v37, v38, 3, 2, 4) -> f_195(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: v39 = 1 + v34 && 2 <= v39 && v39 <= 3
f_195(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) -> f_197(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_197(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) -> f_199(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_199(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) -> f_183(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_183(v26, v27, v28, v29, v30, 0, 1, v33, v34, v35, v36, v37, v38, 3, 2, 4) -> f_184(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: 0 = 0
f_124 -> f_125(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_125(v1, v2, 3, 1, 4) -> f_126(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_126(v1, v3, v2, v4, 3, 1, 4) -> f_127(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_127(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_128(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_128(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_129(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_129(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_130(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_130(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_131(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_131(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_132(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_132(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_133(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_133(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_134(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_134(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_135(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_135(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_137(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: v9 <= 65534
f_137(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_139(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_139(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_141(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_141(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_143(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_143(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_145(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 = 0
f_145(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_146(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 = 0
f_146(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_147(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 < v9
f_147(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_149(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_149(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_151(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_151(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_153(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_153(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_155(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_155(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_157(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_157(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_159(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_159(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_160(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_160(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_161(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_161(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_162(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_162(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_163(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_163(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_164(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_164(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_165(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_165(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_174(v1, v3, v5, v7, v9, 0, 1, 0, 1, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_174(v11, v12, v13, v14, v15, 0, 1, v18, v19, v20, v21, v22, v23, 3, 2, 4) -> f_183(v11, v12, v13, v14, v15, 0, 1, v18, v19, v20, v21, v22, v23, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_184(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 1, v34:0, v33:0, v35:0, v36:0, v37:0, v38:0, 3, 2, 4) -> f_184(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 1, 1 + v34:0, v34:0, v35:0, v36:0, v37:0, v38:0, 3, 2, 4) :|: v33:0 < 2 && v34:0 < 3 && v34:0 > 0
f_124 -> f_184(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 1, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v9:0 < 65535
Filtered unneeded arguments:
   f_184(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_184(x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_184(v34:0, v33:0) -> f_184(1 + v34:0, v34:0) :|: v34:0 < 3 && v34:0 > 0 && v33:0 < 2
f_124 -> f_184(1, 0) :|: TRUE

----------------------------------------

(38)
Obligation:
Rules:
f_184(v34:0, v33:0) -> f_184(1 + v34:0, v34:0) :|: v34:0 < 3 && v34:0 > 0 && v33:0 < 2
f_124 -> f_184(1, 0) :|: TRUE
Start term: f_124

----------------------------------------

(39) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_184_2,1)
   (f_124_2,2)

----------------------------------------

(40)
Obligation:
START: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
assume(oldX0 < 3 && oldX0 > 0 && oldX1 < 2);
x0 := 1 + oldX0;
x1 := oldX0;
TO: 1;

FROM: 2;
oldX0 := x0;
oldX1 := x1;
assume(0 = 0);
x0 := 1;
x1 := 0;
TO: 1;


----------------------------------------

(41) T2 (EQUIVALENT)
Termination proof succeeded
Initially, performed program simplifications using lexicographic rank functions:
 * Removed transitions 1, 3, 4 using the following rank functions:
    - Rank function 1:
      RF for loc. 5: 1-2*x0
      RF for loc. 6: -2*x0
      Bound for (chained) transitions 4: -4
    - Rank function 2:
      RF for loc. 5: -2*x0
      RF for loc. 6: -1-2*x0
      Bound for (chained) transitions 3: -5
    - Rank function 3:
      RF for loc. 5: 1
      RF for loc. 6: 0
      Bound for (chained) transitions 1: 1

----------------------------------------

(42)
YES

----------------------------------------

(43) SEGraph to IRS (EQUIVALENT)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 102 rulesP rules:
f_124 -> f_125(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_125(v1, v2, 3, 1, 4) -> f_126(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_126(v1, v3, v2, v4, 3, 1, 4) -> f_127(v1, v3, v5, v2, v4, v6, 3, 1, 4) :|: 1 <= v5 && v6 = 3 + v5 && 4 <= v6
f_127(v1, v3, v5, v2, v4, v6, 3, 1, 4) -> f_128(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) :|: 1 <= v7 && v8 = 3 + v7 && 4 <= v8
f_128(v1, v3, v5, v7, v2, v4, v6, v8, 3, 1, 4) -> f_129(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_129(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_130(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_130(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_131(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_131(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_132(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_132(v1, v3, v5, v7, v2, v4, v6, v8, 0, 3, 1, 4) -> f_133(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_133(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_134(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: TRUE
f_134(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_135(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) :|: 0 = 0
f_135(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_136(v1, v3, v5, v7, v9, 1, v2, v4, v6, v8, 0, 3, 4) :|: 65534 < v9
f_135(v1, v3, v5, v7, v9, v2, v4, v6, v8, 0, 3, 1, 4) -> f_137(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: v9 <= 65534
f_136(v1, v3, v5, v7, v9, 1, v2, v4, v6, v8, 0, 3, 4) -> f_138(v1, v3, v5, v7, v9, 1, v2, v4, v6, v8, 0, 3, 4) :|: TRUE
f_137(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_139(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_138(v1, v3, v5, v7, v9, 1, v2, v4, v6, v8, 0, 3, 4) -> f_140(v1, v3, v5, v7, v9, 1, v2, v4, v6, v8, 0, 3, 4) :|: TRUE
f_139(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_141(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_140(v1, v3, v5, v7, v9, 1, v2, v4, v6, v8, 0, 3, 4) -> f_142(v1, v3, v5, v7, v9, 1, v2, v4, v6, v8, 0, 3, 4) :|: TRUE
f_141(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_143(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_142(v1, v3, v5, v7, v9, 1, v2, v4, v6, v8, 0, 3, 4) -> f_144(v1, v3, v5, v7, v9, 1, 0, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_143(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_145(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 = 0
f_145(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_146(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 = 0
f_146(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_147(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 < v9
f_146(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_148(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: v9 <= 0
f_147(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_149(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_148(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_150(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 = 0
f_149(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_151(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_150(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_152(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_151(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_153(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_152(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_154(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_153(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_155(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_154(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_156(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: TRUE
f_155(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_157(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_156(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) -> f_158(v1, v3, v5, v7, v9, 0, v2, v4, v6, v8, 3, 1, 4) :|: 0 = 0
f_157(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_159(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_159(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_160(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_160(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_161(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_161(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_162(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_162(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_163(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: 0 = 0
f_163(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_164(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_164(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_165(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) :|: TRUE
f_165(v1, v3, v5, v7, v9, 0, 1, v2, v4, v6, v8, 3, 4) -> f_174(v1, v3, v5, v7, v9, 0, 1, 0, 1, v2, v4, v6, v8, 3, 2, 4) :|: TRUE
f_174(v11, v12, v13, v14, v15, 0, 1, v18, v19, v20, v21, v22, v23, 3, 2, 4) -> f_183(v11, v12, v13, v14, v15, 0, 1, v18, v19, v20, v21, v22, v23, 3, 2, 4) :|: TRUE
f_183(v26, v27, v28, v29, v30, 0, 1, v33, v34, v35, v36, v37, v38, 3, 2, 4) -> f_184(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: 0 = 0
f_184(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_185(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: v34 < 3 && v33 <= 1
f_184(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_186(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) :|: 3 <= v34 && v33 = 2 && v34 = 3 && 0 = 0
f_185(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_187(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: 0 = 0
f_186(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) -> f_188(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) :|: 0 = 0
f_187(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_189(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_188(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) -> f_190(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) :|: TRUE
f_189(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_191(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_190(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) -> f_192(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) :|: TRUE
f_191(v26, v27, v28, v29, v30, 0, 1, v34, v33, v35, v36, v37, v38, 3, 2, 4) -> f_193(v26, v27, v28, v29, v30, 0, 1, v34, v35, v36, v37, v38, 3, 2, 4) :|: 0 = 0
f_192(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) -> f_194(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) :|: 0 = 0
f_193(v26, v27, v28, v29, v30, 0, 1, v34, v35, v36, v37, v38, 3, 2, 4) -> f_195(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: v39 = 1 + v34 && 2 <= v39 && v39 <= 3
f_194(v26, v27, v28, v29, v30, 0, 1, 3, 2, v35, v36, v37, v38, 4) -> f_196(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) :|: 0 = 0
f_195(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) -> f_197(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_196(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) -> f_198(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) :|: TRUE
f_197(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) -> f_199(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_198(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) -> f_200(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) :|: TRUE
f_199(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) -> f_183(v26, v27, v28, v29, v30, 0, 1, v34, v39, v35, v36, v37, v38, 3, 2, 4) :|: TRUE
f_200(v26, v27, v28, v29, v30, 0, 1, 3, 2, 4, v35, v36, v37, v38) -> f_201(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38) :|: 0 = 0
f_201(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38) -> f_202(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38) :|: 0 = 0
f_202(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38) -> f_203(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: 4 < v30
f_202(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38) -> f_204(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38) :|: v30 <= 4
f_203(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_205(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: 0 = 0
f_204(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38) -> f_206(v26, v27, v28, v29, v30, 0, 4, 3, 2, v35, v36, v37, v38, 1) :|: 0 = 0
f_205(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_207(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: TRUE
f_206(v26, v27, v28, v29, v30, 0, 4, 3, 2, v35, v36, v37, v38, 1) -> f_208(v26, v27, v28, v29, v30, 0, 4, 3, 2, v35, v36, v37, v38, 1) :|: TRUE
f_207(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_209(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: TRUE
f_208(v26, v27, v28, v29, v30, 0, 4, 3, 2, v35, v36, v37, v38, 1) -> f_210(v26, v27, v28, v29, v30, 0, 4, 3, 2, v35, v36, v37, v38, 1) :|: TRUE
f_209(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_211(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) :|: TRUE
f_210(v26, v27, v28, v29, v30, 0, 4, 3, 2, v35, v36, v37, v38, 1) -> f_212(v26, v27, v28, v29, v30, 0, 4, 3, 2, v35, v36, v37, v38, 1) :|: TRUE
f_211(v26, v27, v28, v29, v30, 0, 4, 1, 3, 2, v35, v36, v37, v38, 5) -> f_213(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: 0 = 0
f_212(v26, v27, v28, v29, v30, 0, 4, 3, 2, v35, v36, v37, v38, 1) -> f_214(v26, v27, v28, v29, v30, 0, 4, 3, 2, v35, v36, v37, v38, 1) :|: 0 = 0
f_213(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_215(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: 0 = 0
f_215(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_216(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) :|: TRUE
f_216(v26, v27, v28, v29, v30, 0, 4, 1, 2, 3, v35, v36, v37, v38, 5) -> f_225(v26, v27, v28, v29, v30, 0, 4, 1, 0, 2, 3, 3, v35, v36, v37, v38, 5, 2) :|: TRUE
f_225(v118, v119, v120, v121, v122, 0, 4, 1, v126, v127, v128, 3, v130, v131, v132, v133, 5, 2) -> f_234(v118, v119, v120, v121, v122, 0, 4, 1, v126, v127, v128, 3, v130, v131, v132, v133, 5, 2) :|: TRUE
f_234(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) -> f_235(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_235(v166, v167, v168, v169, v170, 0, 4, 1, v174, v175, v176, 3, v178, v179, v180, v181, 5, 2) -> f_236(v166, v167, v168, v169, v170, 0, 4, 1, v174, v176, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_236(v166, v167, v168, v169, v170, 0, 4, 1, v174, v176, 3, v178, v179, v180, v181, 5, 2) -> f_237(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: v188 = 1 + v174 && 1 <= v188 && v188 <= 3
f_237(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_238(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_238(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_239(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_239(v166, v167, v168, v169, v170, 0, 4, 1, v174, v188, 3, v178, v179, v180, v181, 5, 2) -> f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_241(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: v188 < 3 && v174 <= 1
f_240(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_242(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 3 <= v188 && v174 = 2 && v188 = 3 && 0 = 0
f_241(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_243(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: 0 = 0
f_242(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_244(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_243(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_245(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_244(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_246(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_245(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, 3, v178, v179, v180, v181, 5, 2) -> f_234(v166, v167, v168, v169, v170, 0, 4, 1, v188, v174, v188, 3, v178, v179, v180, v181, 5, 2) :|: TRUE
f_246(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_247(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_247(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_248(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_248(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_249(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_249(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_250(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_250(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_251(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_251(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_252(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_252(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_253(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_253(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_254(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: 0 = 0
f_254(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_255(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
f_255(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) -> f_207(v166, v167, v168, v169, v170, 0, 4, 1, 3, 2, v178, v179, v180, v181, 5) :|: TRUE
Combined rules. Obtained 8 rulesP rules:
f_124 -> f_144(v1:0, v3:0, v5:0, v7:0, v9:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 65534
f_124 -> f_184(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 1, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 2, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 > 0 && v9:0 < 65535
f_184(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 1, 3, 2, v35:0, v36:0, v37:0, v38:0, 3, 2, 4) -> f_214(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 4, 3, 2, v35:0, v36:0, v37:0, v38:0, 1) :|: v30:0 < 5
f_124 -> f_158(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 < 1 && v9:0 < 65535
f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 3, 2, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) -> f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 1, 0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) :|: TRUE
f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, v188:0, v174:0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) -> f_240(v166:0, v167:0, v168:0, v169:0, v170:0, 0, 4, 1, 1 + v188:0, v188:0, 3, v178:0, v179:0, v180:0, v181:0, 5, 2) :|: v188:0 > -1 && v188:0 < 3 && v174:0 < 2
f_184(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 1, v34:0, v33:0, v35:0, v36:0, v37:0, v38:0, 3, 2, 4) -> f_184(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 1, 1 + v34:0, v34:0, v35:0, v36:0, v37:0, v38:0, 3, 2, 4) :|: v33:0 < 2 && v34:0 < 3 && v34:0 > 0
f_184(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 1, 3, 2, v35:0, v36:0, v37:0, v38:0, 3, 2, 4) -> f_240(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 4, 1, 1, 0, 3, v35:0, v36:0, v37:0, v38:0, 5, 2) :|: v30:0 > 4
Filtered unneeded arguments:
   f_184(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_184(x5, x8, x9)
   f_240(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_240(x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 8 rules.P rules:
f_124 -> f_144(v1:0, v3:0, v5:0, v7:0, v9:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v9:0 > 65534 && v7:0 > 0
f_124 -> f_184(v9:0, 1, 0) :|: v9:0 > 0 && v9:0 < 65535
f_184(v30:0, cons_3, cons_2) -> f_214(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 4, 3, 2, v35:0, v36:0, v37:0, v38:0, 1) :|: v30:0 < 5 && cons_3 = 3 && cons_2 = 2
f_124 -> f_158(v1:0, v3:0, v5:0, v7:0, v9:0, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 1, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v7:0 > 0 && v9:0 < 65535 && v9:0 < 1
f_240(cons_3, cons_2) -> f_240(1, 0) :|: TRUE && cons_3 = 3 && cons_2 = 2
f_240(v188:0, v174:0) -> f_240(1 + v188:0, v188:0) :|: v188:0 < 3 && v174:0 < 2 && v188:0 > -1
f_184(v30:0, v34:0, v33:0) -> f_184(v30:0, 1 + v34:0, v34:0) :|: v34:0 < 3 && v34:0 > 0 && v33:0 < 2
f_184(v30:0, cons_3, cons_2) -> f_240(1, 0) :|: v30:0 > 4 && cons_3 = 3 && cons_2 = 2

----------------------------------------

(44)
Obligation:
Rules:
f_124 -> f_144(v1:0, v3:0, v5:0, v7:0, v9:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v9:0 > 65534 && v7:0 > 0
f_124 -> f_184(x, 1, 0) :|: x > 0 && x < 65535
f_184(v30:0, cons_3, cons_2) -> f_214(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 4, 3, 2, v35:0, v36:0, v37:0, v38:0, 1) :|: v30:0 < 5 && cons_3 = 3 && cons_2 = 2
f_124 -> f_158(x1, x2, x3, x4, x5, 0, 3 + x1, 3 + x2, 3 + x3, 3 + x4, 3, 1, 4) :|: x1 > 0 && x2 > 0 && x3 > 0 && x4 > 0 && x5 < 65535 && x5 < 1
f_240(x6, x7) -> f_240(1, 0) :|: TRUE && x6 = 3 && x7 = 2
f_240(v188:0, v174:0) -> f_240(1 + v188:0, v188:0) :|: v188:0 < 3 && v174:0 < 2 && v188:0 > -1
f_184(x8, x9, x10) -> f_184(x8, 1 + x9, x9) :|: x9 < 3 && x9 > 0 && x10 < 2
f_184(x11, x12, x13) -> f_240(1, 0) :|: x11 > 4 && x12 = 3 && x13 = 2
Start term: f_124

----------------------------------------

(45) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination can continue
----------------------------------------

(46)
Obligation:
Rules:
f_124 -> f_144(v1:0, v3:0, v5:0, v7:0, v9:0, 1, 0, 3 + v1:0, 3 + v3:0, 3 + v5:0, 3 + v7:0, 3, 4) :|: v1:0 > 0 && v3:0 > 0 && v5:0 > 0 && v9:0 > 65534 && v7:0 > 0
f_124 -> f_184(x, 1, 0) :|: x > 0 && x < 65535
f_184(v30:0, cons_3, cons_2) -> f_214(v26:0, v27:0, v28:0, v29:0, v30:0, 0, 4, 3, 2, v35:0, v36:0, v37:0, v38:0, 1) :|: v30:0 < 5 && cons_3 = 3 && cons_2 = 2
f_124 -> f_158(x1, x2, x3, x4, x5, 0, 3 + x1, 3 + x2, 3 + x3, 3 + x4, 3, 1, 4) :|: x1 > 0 && x2 > 0 && x3 > 0 && x4 > 0 && x5 < 65535 && x5 < 1
f_240(x6, x7) -> f_240(1, 0) :|: TRUE && x6 = 3 && x7 = 2
f_240(v188:0, v174:0) -> f_240(1 + v188:0, v188:0) :|: v188:0 < 3 && v174:0 < 2 && v188:0 > -1
f_184(x8, x9, x10) -> f_184(x8, 1 + x9, x9) :|: x9 < 3 && x9 > 0 && x10 < 2
f_184(x11, x12, x13) -> f_240(1, 0) :|: x11 > 4 && x12 = 3 && x13 = 2
Start term: f_124

----------------------------------------

(47) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(48)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_124))
(VAR k14 k15 k16 k17 k10 k11 k12 k13 k30 k31 k29 k7 k25 k8 k26 k27 k5 k6 k28 k21 k22 k23 k9 k24 k0 k20 k3 k4 k1 k2 k18 k19)
(RULES
  f_240(k31, k16) -> f_240(1 + k31, k31) :|: k31 < 3 && k16 < 2 && k31 > -1
  f_124 -> f_184(k14, 1, 0) :|: k14 > 0 && k14 < 65535
  f_240(k11, k13) -> f_240(1, 0) :|: TRUE && k11 = 3 && k13 = 2
  f_184(k29, k30, k27) -> f_240(1, 0) :|: k29 > 4 && k30 = 3 && k27 = 2
  f_124 -> f_158(k15, k5, k7, k2, k4, 0, 3 + k15, 3 + k5, 3 + k7, 3 + k2, 3, 1, 4) :|: k15 > 0 && k5 > 0 && k7 > 0 && k2 > 0 && k4 < 65535 && k4 < 1
  f_124 -> f_144(k23, k3, k6, k9, k12, 1, 0, 3 + k23, 3 + k3, 3 + k6, 3 + k9, 3, 4) :|: k23 > 0 && k3 > 0 && k6 > 0 && k12 > 65534 && k9 > 0
  f_184(k8, k10, k28) -> f_184(k8, 1 + k10, k10) :|: k10 < 3 && k10 > 0 && k28 < 2
  f_184(k17, k19, k18) -> f_214(k0, k1, k25, k26, k17, 0, 4, 3, 2, k21, k20, k24, k22, 1) :|: k17 < 5 && k19 = 3 && k18 = 2
)

----------------------------------------

(49) LoAT (EQUIVALENT)
LoAT was called with the following command:

/home/ubuntu/tool/aprove/aprove/./bin/loat --plain --nonterm --proof-level 3 /tmp/aprove.InputModules.Programs.loat2350383496770577753.koat 

LoAT's output was:


### Pre-processing the ITS problem ###

Initial linear ITS problem
   Start location: f_124
      0: f_240 -> f_240 : k16'=k31, k31'=1+k31, [ k31<3 && k16<2 && k31>-1 ], cost: 1
      2: f_240 -> f_240 : k16'=0, k31'=1, [ k31==3 && k16==2 ], cost: 1
      1: f_124 -> f_184 : k27'=0, k29'=free, k30'=1, [ free>0 && free<65535 ], cost: 1
      4: f_124 -> f_158 : k0'=free_3, k1'=free_5, k10'=free_4, k11'=free_1, k12'=free_2, k13'=0, k14'=3+free_3, k15'=3+free_5, k16'=3+free_4, k17'=3+free_1, k18'=3, k19'=1, k2'=4, [ free_3>0 && free_5>0 && free_4>0 && free_1>0 && free_2<65535 && free_2<1 ], cost: 1
      5: f_124 -> f_144 : k0'=free_8, k1'=free_9, k10'=free_6, k11'=free_7, k12'=free_10, k13'=1, k14'=0, k15'=3+free_8, k16'=3+free_9, k17'=3+free_6, k18'=3+free_7, k19'=3, k2'=4, [ free_8>0 && free_9>0 && free_6>0 && free_10>65534 && free_7>0 ], cost: 1
      3: f_184 -> f_240 : k16'=0, k31'=1, [ k29>4 && k30==3 && k27==2 ], cost: 1
      6: f_184 -> f_184 : k27'=k30, k30'=1+k30, [ k30<3 && k30>0 && k27<2 ], cost: 1
      7: f_184 -> f_214 : k0'=free_14, k1'=free_17, k10'=free_11, k11'=free_13, k12'=k29, k13'=0, k14'=4, k15'=3, k16'=2, k17'=free_18, k18'=free_15, k19'=free_16, k2'=free_12, k20'=1, [ k29<5 && k30==3 && k27==2 ], cost: 1

Checking for constant complexity:
   The following rule is satisfiable with cost >= 1, yielding constant complexity:
      1: f_124 -> f_184 : k27'=0, k29'=free, k30'=1, [ free>0 && free<65535 ], cost: 1

Removed unreachable and leaf rules:
   Start location: f_124
      0: f_240 -> f_240 : k16'=k31, k31'=1+k31, [ k31<3 && k16<2 && k31>-1 ], cost: 1
      2: f_240 -> f_240 : k16'=0, k31'=1, [ k31==3 && k16==2 ], cost: 1
      1: f_124 -> f_184 : k27'=0, k29'=free, k30'=1, [ free>0 && free<65535 ], cost: 1
      3: f_184 -> f_240 : k16'=0, k31'=1, [ k29>4 && k30==3 && k27==2 ], cost: 1
      6: f_184 -> f_184 : k27'=k30, k30'=1+k30, [ k30<3 && k30>0 && k27<2 ], cost: 1

### Simplification by acceleration and chaining ###

Accelerating simple loops of location 0.
   Accelerating the following rules:
      0: f_240 -> f_240 : k16'=k31, k31'=1+k31, [ k31<3 && k16<2 && k31>-1 ], cost: 1
      2: f_240 -> f_240 : k16'=0, k31'=1, [ k31==3 && k16==2 ], cost: 1

[0;36m[test] deduced invariant 7+k16-7*k31<=0[0m
   Accelerated rule 0 with backward acceleration, yielding the new rule 8.
   Accelerated rule 0 with backward acceleration, yielding the new rule 9.
   Failed to prove monotonicity of the guard of rule 2.
   Nested simple loops 2 (outer loop) and 8 (inner loop) with Rule(0 | k31>-1, 7+k16-7*k31<=0, 3-k31>=1, | NONTERM || 6 | ), resulting in the new rules: 10, 11.
   Nested simple loops 2 (outer loop) and 9 (inner loop) with Rule(0 | k31>-1, 7+k16-7*k31<=0, 3-k31>=1, | NONTERM || 6 | ), resulting in the new rules: 12, 13.
   Removing the simple loops: 2.
   Also removing duplicate rules: 8 10 11.

Accelerating simple loops of location 2.
   Accelerating the following rules:
      6: f_184 -> f_184 : k27'=k30, k30'=1+k30, [ k30<3 && k30>0 && k27<2 ], cost: 1

   Failed to prove monotonicity of the guard of rule 6.

Accelerated all simple loops using metering functions (where possible):
   Start location: f_124
      0: f_240 -> f_240 : k16'=k31, k31'=1+k31, [ k31<3 && k16<2 && k31>-1 ], cost: 1
      9: f_240 -> f_240 : k16'=2, k31'=3, [ k31>-1 && 7+k16-7*k31<=0 && 3-k31>=1 ], cost: 3-k31
     12: f_240 -> [6] : [ k31>-1 && 7+k16-7*k31<=0 && 3-k31>=1 ], cost: NONTERM
     13: f_240 -> [6] : [ k31==3 && k16==2 ], cost: NONTERM
      1: f_124 -> f_184 : k27'=0, k29'=free, k30'=1, [ free>0 && free<65535 ], cost: 1
      3: f_184 -> f_240 : k16'=0, k31'=1, [ k29>4 && k30==3 && k27==2 ], cost: 1
      6: f_184 -> f_184 : k27'=k30, k30'=1+k30, [ k30<3 && k30>0 && k27<2 ], cost: 1

Chaining 5 accelerated rules with incoming rules:
   Chained incoming rule 3 with accelerated rule 0 to new rule 14.
   Removing accelerated rule 0.
   Chained incoming rule 3 with accelerated rule 9 to new rule 15.
   Removing accelerated rule 9.
   Chained incoming rule 3 with accelerated rule 12 to new rule 16.
   Removing accelerated rule 12.
   Removing accelerated rule 13.
   Chained incoming rule 1 with accelerated rule 6 to new rule 17.
   Removing accelerated rule 6.

Chained accelerated rules (with incoming rules):
   Start location: f_124
      1: f_124 -> f_184 : k27'=0, k29'=free, k30'=1, [ free>0 && free<65535 ], cost: 1
     17: f_124 -> f_184 : k27'=1, k29'=free, k30'=2, [ free>0 && free<65535 ], cost: 2
      3: f_184 -> f_240 : k16'=0, k31'=1, [ k29>4 && k30==3 && k27==2 ], cost: 1
     14: f_184 -> f_240 : k16'=1, k31'=2, [ k29>4 && k30==3 && k27==2 ], cost: 2
     15: f_184 -> f_240 : k16'=2, k31'=3, [ k29>4 && k30==3 && k27==2 ], cost: 3
     16: f_184 -> [6] : [ k29>4 && k30==3 && k27==2 ], cost: NONTERM

Removed unreachable locations (and leaf rules with constant cost):
   Start location: f_124
      1: f_124 -> f_184 : k27'=0, k29'=free, k30'=1, [ free>0 && free<65535 ], cost: 1
     17: f_124 -> f_184 : k27'=1, k29'=free, k30'=2, [ free>0 && free<65535 ], cost: 2
     16: f_184 -> [6] : [ k29>4 && k30==3 && k27==2 ], cost: NONTERM

Eliminating location f_184 by chaining:
   Failed to chain rules 1 and 16.
   Failed to chain rules 17 and 16.

Eliminated locations (on tree-shaped paths):
   Start location: f_124
     <empty>

### Computing asymptotic complexity ###

Fully simplified ITS problem
   Start location: f_124
     <empty>

Obtained the following overall complexity (w.r.t. the length of the input n):
   Complexity:  Constant
   Cpx degree:  0
   Solved cost: 1
   Rule cost:   1
   Rule guard:  [ free>0 && free<65535 ]

WORST_CASE(Omega(1),?)

----------------------------------------

(50)
MAYBE

----------------------------------------

(51) IRS2T2 (EQUIVALENT)
Transformed input IRS into an integer transition system.Used the following mapping from defined symbols to location IDs:

   (f_124_14,1)
   (f_144_14,2)
   (f_184_14,3)
   (f_214_14,4)
   (f_158_14,5)
   (f_240_14,6)

----------------------------------------

(52)
Obligation:
START: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
assume(oldX14 > 0 && oldX15 > 0 && oldX16 > 0 && oldX18 > 65534 && oldX17 > 0);
x0 := oldX14;
x1 := oldX15;
x2 := oldX16;
x3 := oldX17;
x4 := oldX18;
x5 := 1;
x6 := 0;
x7 := 3 + oldX14;
x8 := 3 + oldX15;
x9 := 3 + oldX16;
x10 := 3 + oldX17;
x11 := 3;
x12 := 4;
x13 := oldX19;
TO: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(oldX14 > 0 && oldX14 < 65535);
x0 := oldX14;
x1 := 1;
x2 := 0;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 3;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
assume(oldX0 < 5 && oldX1 = 3 && oldX2 = 2);
x0 := oldX14;
x1 := oldX15;
x2 := oldX16;
x3 := oldX17;
x4 := oldX0;
x5 := 0;
x6 := 4;
x7 := 3;
x8 := 2;
x9 := oldX18;
x10 := oldX19;
x11 := oldX20;
x12 := oldX21;
x13 := 1;
TO: 4;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
assume(oldX14 > 0 && oldX15 > 0 && oldX16 > 0 && oldX17 > 0 && oldX18 < 65535 && oldX18 < 1);
x0 := oldX14;
x1 := oldX15;
x2 := oldX16;
x3 := oldX17;
x4 := oldX18;
x5 := 0;
x6 := 3 + oldX14;
x7 := 3 + oldX15;
x8 := 3 + oldX16;
x9 := 3 + oldX17;
x10 := 3;
x11 := 1;
x12 := 4;
x13 := oldX19;
TO: 5;

FROM: 6;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(0 = 0 && oldX0 = 3 && oldX1 = 2);
x0 := 1;
x1 := 0;
x2 := oldX14;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 6;

FROM: 6;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(oldX0 < 3 && oldX1 < 2 && oldX0 > -1);
x0 := 1 + oldX0;
x1 := oldX0;
x2 := oldX14;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 6;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
assume(oldX1 < 3 && oldX1 > 0 && oldX2 < 2);
x0 := oldX0;
x1 := 1 + oldX1;
x2 := oldX1;
x3 := oldX14;
x4 := oldX15;
x5 := oldX16;
x6 := oldX17;
x7 := oldX18;
x8 := oldX19;
x9 := oldX20;
x10 := oldX21;
x11 := oldX22;
x12 := oldX23;
x13 := oldX24;
TO: 3;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(oldX0 > 4 && oldX1 = 3 && oldX2 = 2);
x0 := 1;
x1 := 0;
x2 := oldX14;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 6;


----------------------------------------

(53) T2 Underapproximation (COMPLETE)
Added the following guard statements:




----------------------------------------

(54)
Obligation:
START: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
assume(oldX14 > 0 && oldX15 > 0 && oldX16 > 0 && oldX18 > 65534 && oldX17 > 0);
x0 := oldX14;
x1 := oldX15;
x2 := oldX16;
x3 := oldX17;
x4 := oldX18;
x5 := 1;
x6 := 0;
x7 := oldX14 + 3;
x8 := oldX15 + 3;
x9 := oldX16 + 3;
x10 := oldX17 + 3;
x11 := 3;
x12 := 4;
x13 := oldX19;
TO: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(oldX14 > 0 && oldX14 < 65535);
x0 := oldX14;
x1 := 1;
x2 := 0;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 3;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
assume(x0 < 5 && x1 = 3 && x2 = 2);
x0 := oldX14;
x1 := oldX15;
x2 := oldX16;
x3 := oldX17;
x4 := oldX0;
x5 := 0;
x6 := 4;
x7 := 3;
x8 := 2;
x9 := oldX18;
x10 := oldX19;
x11 := oldX20;
x12 := oldX21;
x13 := 1;
TO: 4;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
assume(oldX14 > 0 && oldX15 > 0 && oldX16 > 0 && oldX17 > 0 && oldX18 < 65535 && oldX18 < 1);
x0 := oldX14;
x1 := oldX15;
x2 := oldX16;
x3 := oldX17;
x4 := oldX18;
x5 := 0;
x6 := oldX14 + 3;
x7 := oldX15 + 3;
x8 := oldX16 + 3;
x9 := oldX17 + 3;
x10 := 3;
x11 := 1;
x12 := 4;
x13 := oldX19;
TO: 5;

FROM: 6;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(0 = 0 && x0 = 3 && x1 = 2);
x0 := 1;
x1 := 0;
x2 := oldX14;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 6;

FROM: 6;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(x0 < 3 && x1 < 2 && x0 > -1);
x0 := x0 + 1;
x1 := oldX0;
x2 := oldX14;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 6;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
assume(x1 < 3 && x1 > 0 && x2 < 2);
x0 := x0;
x1 := x1 + 1;
x2 := oldX1;
x3 := oldX14;
x4 := oldX15;
x5 := oldX16;
x6 := oldX17;
x7 := oldX18;
x8 := oldX19;
x9 := oldX20;
x10 := oldX21;
x11 := oldX22;
x12 := oldX23;
x13 := oldX24;
TO: 3;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(x0 > 4 && x1 = 3 && x2 = 2);
x0 := 1;
x1 := 0;
x2 := oldX14;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 6;


----------------------------------------

(55) T2 Underapproximation (COMPLETE)
Added the following guard statements:




----------------------------------------

(56)
Obligation:
START: 1;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
assume(oldX14 > 0 && oldX15 > 0 && oldX16 > 0 && oldX18 > 65534 && oldX17 > 0);
x0 := oldX14;
x1 := oldX15;
x2 := oldX16;
x3 := oldX17;
x4 := oldX18;
x5 := 1;
x6 := 0;
x7 := oldX14 + 3;
x8 := oldX15 + 3;
x9 := oldX16 + 3;
x10 := oldX17 + 3;
x11 := 3;
x12 := 4;
x13 := oldX19;
TO: 2;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(oldX14 > 0 && oldX14 < 65535);
x0 := oldX14;
x1 := 1;
x2 := 0;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 3;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
assume(x0 < 5 && x1 = 3 && x2 = 2);
x0 := oldX14;
x1 := oldX15;
x2 := oldX16;
x3 := oldX17;
x4 := oldX0;
x5 := 0;
x6 := 4;
x7 := 3;
x8 := 2;
x9 := oldX18;
x10 := oldX19;
x11 := oldX20;
x12 := oldX21;
x13 := 1;
TO: 4;

FROM: 1;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
assume(oldX14 > 0 && oldX15 > 0 && oldX16 > 0 && oldX17 > 0 && oldX18 < 65535 && oldX18 < 1);
x0 := oldX14;
x1 := oldX15;
x2 := oldX16;
x3 := oldX17;
x4 := oldX18;
x5 := 0;
x6 := oldX14 + 3;
x7 := oldX15 + 3;
x8 := oldX16 + 3;
x9 := oldX17 + 3;
x10 := 3;
x11 := 1;
x12 := 4;
x13 := oldX19;
TO: 5;

FROM: 6;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(0 = 0 && x0 = 3 && x1 = 2);
x0 := 1;
x1 := 0;
x2 := oldX14;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 6;

FROM: 6;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(x0 < 3 && x1 < 2 && x0 > -1);
x0 := x0 + 1;
x1 := oldX0;
x2 := oldX14;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 6;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
assume(x1 < 3 && x1 > 0 && x2 < 2);
x0 := x0;
x1 := x1 + 1;
x2 := oldX1;
x3 := oldX14;
x4 := oldX15;
x5 := oldX16;
x6 := oldX17;
x7 := oldX18;
x8 := oldX19;
x9 := oldX20;
x10 := oldX21;
x11 := oldX22;
x12 := oldX23;
x13 := oldX24;
TO: 3;

FROM: 3;
oldX0 := x0;
oldX1 := x1;
oldX2 := x2;
oldX3 := x3;
oldX4 := x4;
oldX5 := x5;
oldX6 := x6;
oldX7 := x7;
oldX8 := x8;
oldX9 := x9;
oldX10 := x10;
oldX11 := x11;
oldX12 := x12;
oldX13 := x13;
oldX14 := nondet();
oldX15 := nondet();
oldX16 := nondet();
oldX17 := nondet();
oldX18 := nondet();
oldX19 := nondet();
oldX20 := nondet();
oldX21 := nondet();
oldX22 := nondet();
oldX23 := nondet();
oldX24 := nondet();
oldX25 := nondet();
assume(x0 > 4 && x1 = 3 && x2 = 2);
x0 := 1;
x1 := 0;
x2 := oldX14;
x3 := oldX15;
x4 := oldX16;
x5 := oldX17;
x6 := oldX18;
x7 := oldX19;
x8 := oldX20;
x9 := oldX21;
x10 := oldX22;
x11 := oldX23;
x12 := oldX24;
x13 := oldX25;
TO: 6;

/home/ubuntu/tool/FSE_benchmark/loop/Reusing_Same_Loop_Iterator_2_NT.c:13:15: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    int num = __VERIFIER_nondet_int();
              ^
1 warning generated.

line 78:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
Aborted 1652286823Exec. 8, LLVMNontermination with some error. Reason: java.lang.OutOfMemoryError: Java heap space.
            java.base/java.util.LinkedList.addAll(LinkedList.java:428)
 
