timeout 900 ./AProVE.sh -m wst --bit-width 64 Type_Conversion_in_Comparison_1_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Type_Conversion_in_Comparison_1_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Type_Conversion_in_Comparison_1_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 87 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 777 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 59 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Type_Conversion_in_Comparison_1_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Type_Conversion_in_Comparison_1_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_ushort" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i16, align 2
		%3 = alloca i16, align 2
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i16 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i16 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%6 = call i32 (...)* @__VERIFIER_nondet_ushort()
		%7 = trunc i32 %6 to i16
		store %7, %3
		%8 = call i32 (...)* @__VERIFIER_nondet_int()
		store %8, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		%9 = load %3
		store %9, %2
		br %10
	10:
		%11 = load %5
		%12 = load %4
		%13 = icmp slt %11 %12
		br %13, %14, %20
	14:
		br %15
	15:
		%16 = load %5
		%17 = add i32 %16, 1
		store %17, %5
		%18 = load %2
		%19 = add i16 %18, 1
		store %19, %2
		br %10
	20:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_222(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 4, 2) -> f_223(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 4, 2) :|: 0 = 0
f_223(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 4, 2) -> f_224(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) :|: v123 < v120 && 2 <= v120
f_224(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) -> f_226(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) :|: 0 = 0
f_226(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) -> f_228(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) :|: TRUE
f_228(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) -> f_230(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) :|: TRUE
f_230(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) -> f_231(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) :|: 0 = 0
f_231(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) -> f_232(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) :|: v132 = 1 + v123 && 2 <= v132
f_232(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) -> f_233(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) :|: TRUE
f_233(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v124, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) -> f_234(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) :|: 0 = 0
f_234(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v125, v126, v127, v128, v129, v130, 0, 3, 2, 4) -> f_235(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v125, v134, v126, v127, v128, v129, v130, 0, 3, 2, 4) :|: v134 = 1 + v125
f_235(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v125, v134, v126, v127, v128, v129, v130, 0, 3, 2, 4) -> f_236(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v125, v134, v126, v127, v128, v129, v130, 0, 3, 2, 4) :|: TRUE
f_236(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v125, v134, v126, v127, v128, v129, v130, 0, 3, 2, 4) -> f_237(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v125, v134, v126, v127, v128, v129, v130, 0, 3, 2, 4) :|: TRUE
f_237(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v125, v134, v126, v127, v128, v129, v130, 0, 3, 2, 4) -> f_221(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v132, v125, v134, v126, v127, v128, v129, v130, 0, 3, 4, 2) :|: TRUE
f_221(v113, v114, v115, v116, v117, v118, v119, v120, v121, 1, v123, v124, v125, v126, v127, v128, v129, v130, 0, 3, 4, 2) -> f_222(v113, v114, v115, v116, v117, v118, v119, v120, v123, 1, v121, v124, v125, v126, v127, v128, v129, v130, 0, 3, 4, 2) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_222(v113:0, v114:0, v115:0, v116:0, v117:0, v118:0, v119:0, v120:0, v123:0, 1, v121:0, v124:0, v125:0, v126:0, v127:0, v128:0, v129:0, v130:0, 0, 3, 4, 2) -> f_222(v113:0, v114:0, v115:0, v116:0, v117:0, v118:0, v119:0, v120:0, 1 + v123:0, 1, v123:0, v125:0, 1 + v125:0, v126:0, v127:0, v128:0, v129:0, v130:0, 0, 3, 4, 2) :|: v120:0 > 1 && v123:0 > 0 && v123:0 < v120:0
Filtered unneeded arguments:
   f_222(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_222(x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_222(v120:0, v123:0) -> f_222(v120:0, 1 + v123:0) :|: v123:0 > 0 && v123:0 < v120:0 && v120:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_222(v120:0, v123:0) -> f_222(v120:0, 1 + v123:0) :|: v123:0 > 0 && v123:0 < v120:0 && v120:0 > 1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_222(v120:0:0, v123:0:0) -> f_222(v120:0:0, 1 + v123:0:0) :|: v123:0:0 > 0 && v123:0:0 < v120:0:0 && v120:0:0 > 1

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_222(x, x1)] = x - x1

The following rules are decreasing:
f_222(v120:0:0, v123:0:0) -> f_222(v120:0:0, 1 + v123:0:0) :|: v123:0:0 > 0 && v123:0:0 < v120:0:0 && v120:0:0 > 1
The following rules are bounded:
f_222(v120:0:0, v123:0:0) -> f_222(v120:0:0, 1 + v123:0:0) :|: v123:0:0 > 0 && v123:0:0 < v120:0:0 && v120:0:0 > 1

----------------------------------------

(12)
YES
/home/ubuntu/tool/FSE_benchmark/loop/Type_Conversion_in_Comparison_1_T.c:9:14: warning: implicit declaration of function '__VERIFIER_nondet_ushort' is invalid in C99 [-Wimplicit-function-declaration]
    seqnum = __VERIFIER_nondet_ushort();
             ^
/home/ubuntu/tool/FSE_benchmark/loop/Type_Conversion_in_Comparison_1_T.c:10:11: warning: implicit declaration of function '__VERIFIER_nondet_int' is invalid in C99 [-Wimplicit-function-declaration]
    len = __VERIFIER_nondet_int();
          ^
2 warnings generated.

line 58:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
 
