timeout 900 ./AProVE.sh -m wst --bit-width 64 Undefined_Behavior_1_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Undefined_Behavior_1_T.c
MAYBE
proof of /home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_1_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 81 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 479 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
    (7) SCC2IRS [SOUND, 41 ms]
    (8) IntTRS
        (9) IntTRSNonPeriodicNontermProof [COMPLETE, 0 ms]
        (10) NO
    (11) SCC2IRS [SOUND, 0 ms]
    (12) IntTRS
        (13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (14) IntTRS
        (15) IntTRSNonPeriodicNontermProof [COMPLETE, 0 ms]
        (16) NO
(17) SymbolicExecutionGraphToLassoProof [EQUIVALENT, 0 ms]
(18) LLVM Symbolic Execution Lasso


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_1_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_1_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_uint" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_uint()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %3
		%5 = load %2
		%6 = add i32 %5, 1
		store %6, %2
		br %7
	7:
		%8 = load %3
		%9 = add i32 %8, 1
		store %9, %3
		br %10
	10:
		%11 = load %2
		%12 = lshr i32 %11, 7
		store %12, %2
		%13 = icmp ne %12 0
		br %13, %7, %14
	14:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 11 rulesP rules:
f_165(v87, v88, v89, v90, v91, v93, v94, v95, 1, v97, v98, v99, 0, 3, 4) -> f_166(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) :|: v101 = 1 + v93 && 2 <= v101
f_166(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) -> f_167(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) :|: TRUE
f_167(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) -> f_168(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) :|: TRUE
f_168(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) -> f_169(v87, v88, v89, v90, v91, v93, v101, v95, 1, v97, v98, v99, 0, 3, 4, 2) :|: 0 = 0
f_169(v87, v88, v89, v90, v91, v93, v101, v95, 1, v97, v98, v99, 0, 3, 4, 2) -> f_170(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) :|: 0 = 0
f_170(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) -> f_171(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) :|: TRUE
f_171(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) -> f_172(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) :|: v103 != 0
f_172(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) -> f_174(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) :|: 0 = 0
f_174(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) -> f_176(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) :|: TRUE
f_176(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) -> f_164(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4) :|: TRUE
f_164(v87, v88, v89, v90, v91, v92, v93, v94, v95, 1, v97, v98, v99, 0, 3, 4) -> f_165(v87, v88, v89, v90, v91, v93, v94, v95, 1, v97, v98, v99, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_165(v87:0, v88:0, v89:0, v90:0, v91:0, v93:0, v94:0, v95:0, 1, v97:0, v98:0, v99:0, 0, 3, 4) -> f_165(v87:0, v88:0, v89:0, v90:0, v91:0, 1 + v93:0, v95:0, v103:0, 1, v97:0, v98:0, v99:0, 0, 3, 4) :|: v103:0 < 0 && v93:0 > 0
f_165(v87:0, v88:0, v89:0, v90:0, v91:0, v93:0, v94:0, v95:0, 1, v97:0, v98:0, v99:0, 0, 3, 4) -> f_165(v87:0, v88:0, v89:0, v90:0, v91:0, 1 + v93:0, v95:0, v103:0, 1, v97:0, v98:0, v99:0, 0, 3, 4) :|: v103:0 > 0 && v93:0 > 0
Filtered unneeded arguments:
   f_165(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_165(x6)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_165(v93:0) -> f_165(1 + v93:0) :|: v93:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f_165(v93:0) -> f_165(1 + v93:0) :|: v93:0 > 0

----------------------------------------

(9) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v93:0) -> f(1, 1 + v93:0) :|: pc = 1 && v93:0 > 0
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((1 * 1) + (run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((run1_1 * 1)) > 0)) and !(((run2_0 * 1)) = ((1 * 1)) and ((run2_1 * 1)) > 0))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((1 * 1) + (run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and ((run1_1 * 1)) > 0))

----------------------------------------

(10)
NO

----------------------------------------

(11) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 11 rulesP rules:
f_165(v87, v88, v89, v90, v91, v93, v94, v95, 1, v97, v98, v99, 0, 3, 4) -> f_166(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) :|: v101 = 1 + v93 && 2 <= v101
f_166(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) -> f_167(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) :|: TRUE
f_167(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) -> f_168(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) :|: TRUE
f_168(v87, v88, v89, v90, v91, v93, v101, v94, v95, 1, v97, v98, v99, 0, 3, 4, 2) -> f_169(v87, v88, v89, v90, v91, v93, v101, v95, 1, v97, v98, v99, 0, 3, 4, 2) :|: 0 = 0
f_169(v87, v88, v89, v90, v91, v93, v101, v95, 1, v97, v98, v99, 0, 3, 4, 2) -> f_170(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) :|: 0 = 0
f_170(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) -> f_171(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) :|: TRUE
f_171(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) -> f_172(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) :|: v103 != 0
f_172(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) -> f_174(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) :|: 0 = 0
f_174(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) -> f_176(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) :|: TRUE
f_176(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4, 2) -> f_164(v87, v88, v89, v90, v91, v93, v101, v95, v103, 1, v97, v98, v99, 0, 3, 4) :|: 1 <= v87 && 1 <= v88 && 1 <= v89 && 0 <= v90 && 1 <= v91 && 0 <= v93 && 1 <= v101 && 4 <= v97 && 4 <= v98 && 4 <= v99 && v87 <= v97 && v88 <= v98 && v89 <= v99
f_164(v87, v88, v89, v90, v91, v92, v93, v94, v95, 1, v97, v98, v99, 0, 3, 4) -> f_165(v87, v88, v89, v90, v91, v93, v94, v95, 1, v97, v98, v99, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_165(v87:0, v88:0, v89:0, v90:0, v91:0, v93:0, v94:0, v95:0, 1, v97:0, v98:0, v99:0, 0, 3, 4) -> f_165(v87:0, v88:0, v89:0, v90:0, v91:0, 1 + v93:0, v95:0, v103:0, 1, v97:0, v98:0, v99:0, 0, 3, 4) :|: v93:0 > 0 && v88:0 > 0 && v87:0 > 0 && v89:0 > 0 && v90:0 > -1 && v91:0 > 0 && v97:0 > 3 && v98:0 > 3 && v99:0 > 3 && v97:0 >= v87:0 && v103:0 < 0 && v99:0 >= v89:0 && v98:0 >= v88:0
f_165(v87:0, v88:0, v89:0, v90:0, v91:0, v93:0, v94:0, v95:0, 1, v97:0, v98:0, v99:0, 0, 3, 4) -> f_165(v87:0, v88:0, v89:0, v90:0, v91:0, 1 + v93:0, v95:0, v103:0, 1, v97:0, v98:0, v99:0, 0, 3, 4) :|: v93:0 > 0 && v88:0 > 0 && v87:0 > 0 && v89:0 > 0 && v90:0 > -1 && v91:0 > 0 && v97:0 > 3 && v98:0 > 3 && v99:0 > 3 && v97:0 >= v87:0 && v103:0 > 0 && v99:0 >= v89:0 && v98:0 >= v88:0
Filtered unneeded arguments:
   f_165(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_165(x1, x2, x3, x4, x5, x6, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_165(v87:0, v88:0, v89:0, v90:0, v91:0, v93:0, v97:0, v98:0, v99:0) -> f_165(v87:0, v88:0, v89:0, v90:0, v91:0, 1 + v93:0, v97:0, v98:0, v99:0) :|: v88:0 > 0 && v93:0 > 0 && v87:0 > 0 && v89:0 > 0 && v90:0 > -1 && v91:0 > 0 && v97:0 > 3 && v98:0 > 3 && v99:0 > 3 && v97:0 >= v87:0 && v98:0 >= v88:0 && v99:0 >= v89:0

----------------------------------------

(12)
Obligation:
Rules:
f_165(v87:0, v88:0, v89:0, v90:0, v91:0, v93:0, v97:0, v98:0, v99:0) -> f_165(v87:0, v88:0, v89:0, v90:0, v91:0, 1 + v93:0, v97:0, v98:0, v99:0) :|: v88:0 > 0 && v93:0 > 0 && v87:0 > 0 && v89:0 > 0 && v90:0 > -1 && v91:0 > 0 && v97:0 > 3 && v98:0 > 3 && v99:0 > 3 && v97:0 >= v87:0 && v98:0 >= v88:0 && v99:0 >= v89:0

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f_165(v87:0:0, v88:0:0, v89:0:0, v90:0:0, v91:0:0, v93:0:0, v97:0:0, v98:0:0, v99:0:0) -> f_165(v87:0:0, v88:0:0, v89:0:0, v90:0:0, v91:0:0, 1 + v93:0:0, v97:0:0, v98:0:0, v99:0:0) :|: v98:0:0 >= v88:0:0 && v99:0:0 >= v89:0:0 && v97:0:0 >= v87:0:0 && v99:0:0 > 3 && v98:0:0 > 3 && v97:0:0 > 3 && v91:0:0 > 0 && v90:0:0 > -1 && v89:0:0 > 0 && v87:0:0 > 0 && v93:0:0 > 0 && v88:0:0 > 0

----------------------------------------

(15) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v87:0:0, v88:0:0, v89:0:0, v90:0:0, v91:0:0, v93:0:0, v97:0:0, v98:0:0, v99:0:0) -> f(1, v87:0:0, v88:0:0, v89:0:0, v90:0:0, v91:0:0, 1 + v93:0:0, v97:0:0, v98:0:0, v99:0:0) :|: pc = 1 && (v98:0:0 >= v88:0:0 && v99:0:0 >= v89:0:0 && v97:0:0 >= v87:0:0 && v99:0:0 > 3 && v98:0:0 > 3 && v97:0:0 > 3 && v91:0:0 > 0 && v90:0:0 > -1 && v89:0:0 > 0 && v87:0:0 > 0 && v93:0:0 > 0 && v88:0:0 > 0)
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((1 * 1) + (run1_6 * 1)) and run2_7 = ((run1_7 * 1)) and run2_8 = ((run1_8 * 1)) and run2_9 = ((run1_9 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((((((((((((run1_8 * 1)) >= ((run1_2 * 1)) and ((run1_9 * 1)) >= ((run1_3 * 1))) and ((run1_7 * 1)) >= ((run1_1 * 1))) and ((run1_9 * 1)) > ((1 * 3))) and ((run1_8 * 1)) > ((1 * 3))) and ((run1_7 * 1)) > ((1 * 3))) and ((run1_5 * 1)) > 0) and ((run1_4 * 1)) > ((1 * -1))) and ((run1_3 * 1)) > 0) and ((run1_1 * 1)) > 0) and ((run1_6 * 1)) > 0) and ((run1_2 * 1)) > 0))) and !(((run2_0 * 1)) = ((1 * 1)) and (((((((((((((run2_8 * 1)) >= ((run2_2 * 1)) and ((run2_9 * 1)) >= ((run2_3 * 1))) and ((run2_7 * 1)) >= ((run2_1 * 1))) and ((run2_9 * 1)) > ((1 * 3))) and ((run2_8 * 1)) > ((1 * 3))) and ((run2_7 * 1)) > ((1 * 3))) and ((run2_5 * 1)) > 0) and ((run2_4 * 1)) > ((1 * -1))) and ((run2_3 * 1)) > 0) and ((run2_1 * 1)) > 0) and ((run2_6 * 1)) > 0) and ((run2_2 * 1)) > 0)))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((run1_4 * 1)) and run2_5 = ((run1_5 * 1)) and run2_6 = ((1 * 1) + (run1_6 * 1)) and run2_7 = ((run1_7 * 1)) and run2_8 = ((run1_8 * 1)) and run2_9 = ((run1_9 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((((((((((((run1_8 * 1)) >= ((run1_2 * 1)) and ((run1_9 * 1)) >= ((run1_3 * 1))) and ((run1_7 * 1)) >= ((run1_1 * 1))) and ((run1_9 * 1)) > ((1 * 3))) and ((run1_8 * 1)) > ((1 * 3))) and ((run1_7 * 1)) > ((1 * 3))) and ((run1_5 * 1)) > 0) and ((run1_4 * 1)) > ((1 * -1))) and ((run1_3 * 1)) > 0) and ((run1_1 * 1)) > 0) and ((run1_6 * 1)) > 0) and ((run1_2 * 1)) > 0)))

----------------------------------------

(16)
NO

----------------------------------------

(17) SymbolicExecutionGraphToLassoProof (EQUIVALENT)
Converted SEGraph to 1 independent lasso.
----------------------------------------

(18)
Obligation:
Lasso/home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_1_T.c:9:24: warning: implicit declaration of function '__VERIFIER_nondet_uint' is invalid in C99 [-Wimplicit-function-declaration]
    unsigned int num = __VERIFIER_nondet_uint();
                       ^
1 warning generated.

line 45:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
Aborted 1652289762Exec. 10, LLVMLassoToIntTRS with some error. Reason: java.lang.UnsupportedOperationException: Not yet implemented!.
Aborted 1652289762Exec. 5, LLVMSEGraphToIntTRS with some error. Reason: java.lang.UnsupportedOperationException: Not yet implemented!.
 
