timeout 900 ./AProVE.sh -m wst --bit-width 64 Undefined_Behavior_3.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Undefined_Behavior_3.c
MAYBE
proof of /home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_3.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 94 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 577 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToLassoProof [EQUIVALENT, 0 ms]
(6) LLVM Symbolic Execution Lasso
(7) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(8) LLVM Symbolic Execution SCC
    (9) SCC2IRS [SOUND, 64 ms]
    (10) IntTRS
        (11) IntTRSNonPeriodicNontermProof [COMPLETE, 3 ms]
        (12) NO
    (13) SCC2IRS [SOUND, 0 ms]
    (14) IntTRS
        (15) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (16) IntTRS
        (17) IntTRSNonPeriodicNontermProof [COMPLETE, 4 ms]
        (18) NO


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_3.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_3.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_uint" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_uint()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 1, %3
		br %5
	5:
		%6 = load %2
		%7 = load %3
		%8 = mul i32 %7, 8
		%9 = lshr i32 %6, %8
		%10 = icmp ne %9 0
		br %10, %11, %14
	11:
		%12 = load %3
		%13 = add i32 %12, 1
		store %13, %3
		br %5
	14:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToLassoProof (EQUIVALENT)
Converted SEGraph to 1 independent lasso.
----------------------------------------

(6)
Obligation:
Lasso
----------------------------------------

(7) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(8)
Obligation:
SCC
----------------------------------------

(9) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_152(v62, v63, v64, v65, v66, v67, v68, 1, v70, v71, v72, v73, 0, 3, 8, 2, 4) -> f_153(v62, v63, v64, v65, v70, v67, v68, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4) :|: 0 = 0
f_153(v62, v63, v64, v65, v70, v67, v68, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4) -> f_154(v62, v63, v64, v65, v70, v75, v68, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: v75 = 8 * v70 && 16 <= v75
f_154(v62, v63, v64, v65, v70, v75, v68, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_155(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: 0 = 0
f_155(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_156(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: v76 != 0
f_156(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_158(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: 0 = 0
f_158(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_160(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: TRUE
f_160(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_162(v62, v63, v64, v65, v70, v75, v76, 1, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: 0 = 0
f_162(v62, v63, v64, v65, v70, v75, v76, 1, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_163(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: v77 = 1 + v70 && 3 <= v77
f_163(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_164(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: TRUE
f_164(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_165(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: TRUE
f_165(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_151(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4) :|: TRUE
f_151(v62, v63, v64, v65, v66, v67, v68, 1, v70, v71, v72, v73, 0, 3, 8, 2, 4) -> f_152(v62, v63, v64, v65, v66, v67, v68, 1, v70, v71, v72, v73, 0, 3, 8, 2, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_152(v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, v68:0, 1, v70:0, v71:0, v72:0, v73:0, 0, 3, 8, 2, 4) -> f_152(v62:0, v63:0, v64:0, v65:0, v70:0, 8 * v70:0, v76:0, 1, 1 + v70:0, v71:0, v72:0, v73:0, 0, 3, 8, 2, 4) :|: 8 * v70:0 > 15 && v70:0 > 1 && v76:0 < 0
f_152(v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, v68:0, 1, v70:0, v71:0, v72:0, v73:0, 0, 3, 8, 2, 4) -> f_152(v62:0, v63:0, v64:0, v65:0, v70:0, 8 * v70:0, v76:0, 1, 1 + v70:0, v71:0, v72:0, v73:0, 0, 3, 8, 2, 4) :|: 8 * v70:0 > 15 && v70:0 > 1 && v76:0 > 0
Filtered unneeded arguments:
   f_152(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_152(x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_152(v70:0) -> f_152(1 + v70:0) :|: 8 * v70:0 > 15 && v70:0 > 1

----------------------------------------

(10)
Obligation:
Rules:
f_152(v70:0) -> f_152(1 + v70:0) :|: 8 * v70:0 > 15 && v70:0 > 1

----------------------------------------

(11) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v70:0) -> f(1, 1 + v70:0) :|: pc = 1 && (8 * v70:0 > 15 && v70:0 > 1)
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((1 * 1) + (run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((run1_1 * 8)) > ((1 * 15)) and ((run1_1 * 1)) > ((1 * 1))))) and !(((run2_0 * 1)) = ((1 * 1)) and (((run2_1 * 8)) > ((1 * 15)) and ((run2_1 * 1)) > ((1 * 1)))))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((1 * 1) + (run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((run1_1 * 8)) > ((1 * 15)) and ((run1_1 * 1)) > ((1 * 1)))))

----------------------------------------

(12)
NO

----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_152(v62, v63, v64, v65, v66, v67, v68, 1, v70, v71, v72, v73, 0, 3, 8, 2, 4) -> f_153(v62, v63, v64, v65, v70, v67, v68, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4) :|: 0 = 0
f_153(v62, v63, v64, v65, v70, v67, v68, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4) -> f_154(v62, v63, v64, v65, v70, v75, v68, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: v75 = 8 * v70 && 16 <= v75
f_154(v62, v63, v64, v65, v70, v75, v68, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_155(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: 0 = 0
f_155(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_156(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: v76 != 0
f_156(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_158(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: 0 = 0
f_158(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_160(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: TRUE
f_160(v62, v63, v64, v65, v70, v75, v76, 1, v66, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_162(v62, v63, v64, v65, v70, v75, v76, 1, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: 0 = 0
f_162(v62, v63, v64, v65, v70, v75, v76, 1, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_163(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: v77 = 1 + v70 && 3 <= v77
f_163(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_164(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: TRUE
f_164(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_165(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) :|: TRUE
f_165(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4, 16) -> f_151(v62, v63, v64, v65, v70, v75, v76, 1, v77, v71, v72, v73, 0, 3, 8, 2, 4) :|: 1 <= v62 && 1 <= v63 && 1 <= v64 && 0 <= v65 && 1 <= v70 && 8 <= v75 && 2 <= v77 && 4 <= v71 && 4 <= v72 && 4 <= v73 && v62 <= v71 && v63 <= v72 && v64 <= v73
f_151(v62, v63, v64, v65, v66, v67, v68, 1, v70, v71, v72, v73, 0, 3, 8, 2, 4) -> f_152(v62, v63, v64, v65, v66, v67, v68, 1, v70, v71, v72, v73, 0, 3, 8, 2, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_152(v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, v68:0, 1, v70:0, v71:0, v72:0, v73:0, 0, 3, 8, 2, 4) -> f_152(v62:0, v63:0, v64:0, v65:0, v70:0, 8 * v70:0, v76:0, 1, 1 + v70:0, v71:0, v72:0, v73:0, 0, 3, 8, 2, 4) :|: v70:0 > 1 && 8 * v70:0 > 15 && v63:0 > 0 && v62:0 > 0 && v64:0 > 0 && v65:0 > -1 && v76:0 < 0 && v71:0 > 3 && v72:0 > 3 && v73:0 > 3 && v71:0 >= v62:0 && v73:0 >= v64:0 && v72:0 >= v63:0
f_152(v62:0, v63:0, v64:0, v65:0, v66:0, v67:0, v68:0, 1, v70:0, v71:0, v72:0, v73:0, 0, 3, 8, 2, 4) -> f_152(v62:0, v63:0, v64:0, v65:0, v70:0, 8 * v70:0, v76:0, 1, 1 + v70:0, v71:0, v72:0, v73:0, 0, 3, 8, 2, 4) :|: v70:0 > 1 && 8 * v70:0 > 15 && v63:0 > 0 && v62:0 > 0 && v64:0 > 0 && v65:0 > -1 && v76:0 > 0 && v71:0 > 3 && v72:0 > 3 && v73:0 > 3 && v71:0 >= v62:0 && v73:0 >= v64:0 && v72:0 >= v63:0
Filtered unneeded arguments:
   f_152(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_152(x1, x2, x3, x4, x9, x10, x11, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_152(v62:0, v63:0, v64:0, v65:0, v70:0, v71:0, v72:0, v73:0) -> f_152(v62:0, v63:0, v64:0, v65:0, 1 + v70:0, v71:0, v72:0, v73:0) :|: 8 * v70:0 > 15 && v70:0 > 1 && v63:0 > 0 && v62:0 > 0 && v64:0 > 0 && v65:0 > -1 && v71:0 > 3 && v72:0 > 3 && v73:0 > 3 && v71:0 >= v62:0 && v72:0 >= v63:0 && v73:0 >= v64:0

----------------------------------------

(14)
Obligation:
Rules:
f_152(v62:0, v63:0, v64:0, v65:0, v70:0, v71:0, v72:0, v73:0) -> f_152(v62:0, v63:0, v64:0, v65:0, 1 + v70:0, v71:0, v72:0, v73:0) :|: 8 * v70:0 > 15 && v70:0 > 1 && v63:0 > 0 && v62:0 > 0 && v64:0 > 0 && v65:0 > -1 && v71:0 > 3 && v72:0 > 3 && v73:0 > 3 && v71:0 >= v62:0 && v72:0 >= v63:0 && v73:0 >= v64:0

----------------------------------------

(15) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(16)
Obligation:
Rules:
f_152(v62:0:0, v63:0:0, v64:0:0, v65:0:0, v70:0:0, v71:0:0, v72:0:0, v73:0:0) -> f_152(v62:0:0, v63:0:0, v64:0:0, v65:0:0, 1 + v70:0:0, v71:0:0, v72:0:0, v73:0:0) :|: v72:0:0 >= v63:0:0 && v73:0:0 >= v64:0:0 && v71:0:0 >= v62:0:0 && v73:0:0 > 3 && v72:0:0 > 3 && v71:0:0 > 3 && v65:0:0 > -1 && v64:0:0 > 0 && v62:0:0 > 0 && v63:0:0 > 0 && v70:0:0 > 1 && 8 * v70:0:0 > 15

----------------------------------------

(17) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, v62:0:0, v63:0:0, v64:0:0, v65:0:0, v70:0:0, v71:0:0, v72:0:0, v73:0:0) -> f(1, v62:0:0, v63:0:0, v64:0:0, v65:0:0, 1 + v70:0:0, v71:0:0, v72:0:0, v73:0:0) :|: pc = 1 && (v72:0:0 >= v63:0:0 && v73:0:0 >= v64:0:0 && v71:0:0 >= v62:0:0 && v73:0:0 > 3 && v72:0:0 > 3 && v71:0:0 > 3 && v65:0:0 > -1 && v64:0:0 > 0 && v62:0:0 > 0 && v63:0:0 > 0 && v70:0:0 > 1 && 8 * v70:0:0 > 15)
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((run1_4 * 1)) and run2_5 = ((1 * 1) + (run1_5 * 1)) and run2_6 = ((run1_6 * 1)) and run2_7 = ((run1_7 * 1)) and run2_8 = ((run1_8 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((((((((((((run1_7 * 1)) >= ((run1_2 * 1)) and ((run1_8 * 1)) >= ((run1_3 * 1))) and ((run1_6 * 1)) >= ((run1_1 * 1))) and ((run1_8 * 1)) > ((1 * 3))) and ((run1_7 * 1)) > ((1 * 3))) and ((run1_6 * 1)) > ((1 * 3))) and ((run1_4 * 1)) > ((1 * -1))) and ((run1_3 * 1)) > 0) and ((run1_1 * 1)) > 0) and ((run1_2 * 1)) > 0) and ((run1_5 * 1)) > ((1 * 1))) and ((run1_5 * 8)) > ((1 * 15))))) and !(((run2_0 * 1)) = ((1 * 1)) and (((((((((((((run2_7 * 1)) >= ((run2_2 * 1)) and ((run2_8 * 1)) >= ((run2_3 * 1))) and ((run2_6 * 1)) >= ((run2_1 * 1))) and ((run2_8 * 1)) > ((1 * 3))) and ((run2_7 * 1)) > ((1 * 3))) and ((run2_6 * 1)) > ((1 * 3))) and ((run2_4 * 1)) > ((1 * -1))) and ((run2_3 * 1)) > 0) and ((run2_1 * 1)) > 0) and ((run2_2 * 1)) > 0) and ((run2_5 * 1)) > ((1 * 1))) and ((run2_5 * 8)) > ((1 * 15)))))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1)) and run2_2 = ((run1_2 * 1)) and run2_3 = ((run1_3 * 1)) and run2_4 = ((run1_4 * 1)) and run2_5 = ((1 * 1) + (run1_5 * 1)) and run2_6 = ((run1_6 * 1)) and run2_7 = ((run1_7 * 1)) and run2_8 = ((run1_8 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and (((((((((((((run1_7 * 1)) >= ((run1_2 * 1)) and ((run1_8 * 1)) >= ((run1_3 * 1))) and ((run1_6 * 1)) >= ((run1_1 * 1))) and ((run1_8 * 1)) > ((1 * 3))) and ((run1_7 * 1)) > ((1 * 3))) and ((run1_6 * 1)) > ((1 * 3))) and ((run1_4 * 1)) > ((1 * -1))) and ((run1_3 * 1)) > 0) and ((run1_1 * 1)) > 0) and ((run1_2 * 1)) > 0) and ((run1_5 * 1)) > ((1 * 1))) and ((run1_5 * 8)) > ((1 * 15)))))

----------------------------------------

(18)
NO
/home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_3.c:8:24: warning: implicit declaration of function '__VERIFIER_nondet_uint' is invalid in C99 [-Wimplicit-function-declaration]
    unsigned int val = __VERIFIER_nondet_uint();
                       ^
1 warning generated.

line 43:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
Aborted 1652291566Exec. 9, LLVMLassoToIntTRS with some error. Reason: java.lang.UnsupportedOperationException: Not yet implemented!.
            aprove.InputModules.Programs.llvm.internalStructures.module.LLVMBinaryOpType$9.isOverapproximation(LLVMBinaryOpType.java:398)
 
