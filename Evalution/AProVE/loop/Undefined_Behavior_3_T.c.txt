timeout 900 ./AProVE.sh -m wst --bit-width 64 Undefined_Behavior_3_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Undefined_Behavior_3_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_3_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 71 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 376 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_3_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_3_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_uint" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_uint()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 1, %3
		br %5
	5:
		%6 = load %2
		%7 = load %3
		%8 = mul i32 %7, 8
		%9 = lshr i32 %6, %8
		%10 = icmp ne %9 0
		br %10, %11, %14
	11:
		%12 = load %3
		%13 = icmp slt %12 4
		br %14
	14:
		%15 = phi [0, %5], [%13, %11]
		br %15, %16, %19
	16:
		%17 = load %3
		%18 = add i32 %17, 1
		store %18, %3
		br %5
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_152(v64, v65, v66, v67, v68, v69, v70, 1, v72, v73, v74, v75, 0, 3, 8, 24, 2, 4) -> f_153(v64, v65, v66, v67, v72, v69, v70, 1, v68, v73, v74, v75, 0, 3, 8, 24, 2, 4) :|: 0 = 0
f_153(v64, v65, v66, v67, v72, v69, v70, 1, v68, v73, v74, v75, 0, 3, 8, 24, 2, 4) -> f_154(v64, v65, v66, v67, v72, v77, v70, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) :|: v77 = 8 * v72 && 16 <= v77 && v77 <= 32
f_154(v64, v65, v66, v67, v72, v77, v70, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) -> f_155(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) :|: 0 = 0
f_155(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) -> f_156(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) :|: v78 != 0
f_156(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) -> f_158(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) :|: 0 = 0
f_158(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) -> f_160(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) :|: TRUE
f_160(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) -> f_162(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) :|: 0 = 0
f_162(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 32) -> f_164(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) :|: v72 < 4 && v68 <= 2 && v77 <= 24
f_164(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) -> f_166(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) :|: 0 = 0
f_166(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) -> f_168(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) :|: 0 = 0
f_168(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) -> f_170(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) :|: TRUE
f_170(v64, v65, v66, v67, v72, v77, v78, 1, v68, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) -> f_172(v64, v65, v66, v67, v72, v77, v78, 1, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) :|: 0 = 0
f_172(v64, v65, v66, v67, v72, v77, v78, 1, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) -> f_173(v64, v65, v66, v67, v72, v77, v78, 1, v113, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) :|: v113 = 1 + v72 && 3 <= v113 && v113 <= 4
f_173(v64, v65, v66, v67, v72, v77, v78, 1, v113, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) -> f_174(v64, v65, v66, v67, v72, v77, v78, 1, v113, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) :|: TRUE
f_174(v64, v65, v66, v67, v72, v77, v78, 1, v113, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) -> f_175(v64, v65, v66, v67, v72, v77, v78, 1, v113, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) :|: TRUE
f_175(v64, v65, v66, v67, v72, v77, v78, 1, v113, v73, v74, v75, 0, 3, 8, 2, 4, 16, 24) -> f_151(v64, v65, v66, v67, v72, v77, v78, 1, v113, v73, v74, v75, 0, 3, 8, 24, 2, 4) :|: TRUE
f_151(v64, v65, v66, v67, v68, v69, v70, 1, v72, v73, v74, v75, 0, 3, 8, 24, 2, 4) -> f_152(v64, v65, v66, v67, v68, v69, v70, 1, v72, v73, v74, v75, 0, 3, 8, 24, 2, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_152(v64:0, v65:0, v66:0, v67:0, v68:0, v69:0, v70:0, 1, v72:0, v73:0, v74:0, v75:0, 0, 3, 8, 24, 2, 4) -> f_152(v64:0, v65:0, v66:0, v67:0, v72:0, 8 * v72:0, v78:0, 1, 1 + v72:0, v73:0, v74:0, v75:0, 0, 3, 8, 24, 2, 4) :|: 8 * v72:0 > 15 && 8 * v72:0 < 33 && v78:0 < 0 && v68:0 < 3 && v72:0 < 4 && 8 * v72:0 < 25 && v72:0 > 1
f_152(v64:0, v65:0, v66:0, v67:0, v68:0, v69:0, v70:0, 1, v72:0, v73:0, v74:0, v75:0, 0, 3, 8, 24, 2, 4) -> f_152(v64:0, v65:0, v66:0, v67:0, v72:0, 8 * v72:0, v78:0, 1, 1 + v72:0, v73:0, v74:0, v75:0, 0, 3, 8, 24, 2, 4) :|: 8 * v72:0 > 15 && 8 * v72:0 < 33 && v78:0 > 0 && v68:0 < 3 && v72:0 < 4 && 8 * v72:0 < 25 && v72:0 > 1
Filtered unneeded arguments:
   f_152(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_152(x5, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_152(v68:0, v72:0) -> f_152(v72:0, 1 + v72:0) :|: 8 * v72:0 < 33 && 8 * v72:0 > 15 && v68:0 < 3 && v72:0 < 4 && v72:0 > 1 && 8 * v72:0 < 25

----------------------------------------

(8)
Obligation:
Rules:
f_152(v68:0, v72:0) -> f_152(v72:0, 1 + v72:0) :|: 8 * v72:0 < 33 && 8 * v72:0 > 15 && v68:0 < 3 && v72:0 < 4 && v72:0 > 1 && 8 * v72:0 < 25

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_152(v68:0:0, v72:0:0) -> f_152(v72:0:0, 1 + v72:0:0) :|: v72:0:0 > 1 && 8 * v72:0:0 < 25 && v72:0:0 < 4 && v68:0:0 < 3 && 8 * v72:0:0 > 15 && 8 * v72:0:0 < 33

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_152 ] = -1*f_152_2

The following rules are decreasing:
f_152(v68:0:0, v72:0:0) -> f_152(v72:0:0, 1 + v72:0:0) :|: v72:0:0 > 1 && 8 * v72:0:0 < 25 && v72:0:0 < 4 && v68:0:0 < 3 && 8 * v72:0:0 > 15 && 8 * v72:0:0 < 33

The following rules are bounded:
f_152(v68:0:0, v72:0:0) -> f_152(v72:0:0, 1 + v72:0:0) :|: v72:0:0 > 1 && 8 * v72:0:0 < 25 && v72:0:0 < 4 && v68:0:0 < 3 && 8 * v72:0:0 > 15 && 8 * v72:0:0 < 33


----------------------------------------

(12)
YES
/home/ubuntu/tool/FSE_benchmark/loop/Undefined_Behavior_3_T.c:8:24: warning: implicit declaration of function '__VERIFIER_nondet_uint' is invalid in C99 [-Wimplicit-function-declaration]
    unsigned int val = __VERIFIER_nondet_uint();
                       ^
1 warning generated.

line 52:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
Aborted 1652291570Exec. 5, LLVMSEGraphToIntTRS with some error. Reason: java.lang.UnsupportedOperationException: Not yet implemented!.
Aborted 1652291570Exec. 10, LLVMLassoToIntTRS with some error. Reason: java.lang.UnsupportedOperationException: Not yet implemented!.
 
