timeout 900 ./AProVE.sh -m wst --bit-width 64 Unsigned_Wraparound_Error_4_T.c
 
 
-------------------------------------------------------------------------------------------------------
 
 
testfile: Unsigned_Wraparound_Error_4_T.c
YES
proof of /home/ubuntu/tool/FSE_benchmark/loop/Unsigned_Wraparound_Error_4_T.c
# AProVE Commit ID: 249ab60e2b58fea5661f104665226199f0baff7b jera 20211103 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 78 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 470 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 61 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /home/ubuntu/tool/FSE_benchmark/loop/Unsigned_Wraparound_Error_4_T.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /home/ubuntu/tool/FSE_benchmark/loop/Unsigned_Wraparound_Error_4_T.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-unknown-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_uint" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 9
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 (...)* @__VERIFIER_nondet_uint()
		store %4, %2
		br %5
	5:
		%6 = load %2
		%7 = icmp ugt %6 0
		br %7, %8, %17
	8:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%9 = load %2
		store %9, %3
		%10 = load %3
		%11 = icmp ugt %10 16
		br %11, %12, %13
	12:
		store 16, %3
		br %13
	13:
		%14 = load %3
		%15 = load %2
		%16 = sub i32 %15, %14
		store %16, %2
		br %5
	17:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_179(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) -> f_181(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) :|: 0 = 0
f_181(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) -> f_182(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) :|: TRUE
f_182(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) -> f_183(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) :|: TRUE
f_183(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) -> f_184(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) :|: 0 = 0
f_184(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) -> f_185(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) :|: TRUE
f_185(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) -> f_186(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 4) :|: 0 = 0
f_186(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 4) -> f_187(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) :|: 16 < v108 && 33 <= v105
f_187(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) -> f_189(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) :|: 0 = 0
f_189(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) -> f_191(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) :|: TRUE
f_191(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) -> f_193(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) :|: TRUE
f_193(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) -> f_195(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) :|: TRUE
f_195(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) -> f_197(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) :|: 0 = 0
f_197(v101, v102, v103, v104, v108, 1, 16, v105, v109, v110, v111, 0, 3, 17, 33, 4) -> f_199(v101, v102, v103, v104, v108, 1, 16, v109, v110, v111, 0, 3, 17, 4) :|: 0 = 0
f_199(v101, v102, v103, v104, v108, 1, 16, v109, v110, v111, 0, 3, 17, 4) -> f_201(v101, v102, v103, v104, v108, 1, 16, v133, v109, v110, v111, 0, 3, 17, 4) :|: 16 + v133 = v108 && 1 <= v133
f_201(v101, v102, v103, v104, v108, 1, 16, v133, v109, v110, v111, 0, 3, 17, 4) -> f_204(v101, v102, v103, v104, v108, 1, 16, v133, v109, v110, v111, 0, 3, 17, 4) :|: TRUE
f_204(v101, v102, v103, v104, v108, 1, 16, v133, v109, v110, v111, 0, 3, 17, 4) -> f_206(v101, v102, v103, v104, v108, 1, 16, v133, v109, v110, v111, 0, 3, 17, 4) :|: TRUE
f_206(v101, v102, v103, v104, v108, 1, 16, v133, v109, v110, v111, 0, 3, 17, 4) -> f_177(v101, v102, v103, v104, v108, 1, 16, v133, v109, v110, v111, 0, 3, 17, 4) :|: TRUE
f_177(v101, v102, v103, v104, v105, 1, 16, v108, v109, v110, v111, 0, 3, 17, 4) -> f_179(v101, v102, v103, v104, v108, 1, v105, 16, v109, v110, v111, 0, 3, 17, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_179(v101:0, v102:0, v103:0, v104:0, 16 + v133:0, 1, v105:0, 16, v109:0, v110:0, v111:0, 0, 3, 17, 4) -> f_179(v101:0, v102:0, v103:0, v104:0, v133:0, 1, 16 + v133:0, 16, v109:0, v110:0, v111:0, 0, 3, 17, 4) :|: v105:0 > 32 && v133:0 > 0
Filtered unneeded arguments:
   f_179(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_179(x5, x7)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_179(sum~cons_16~v133:0, v105:0) -> f_179(v133:0, 16 + v133:0) :|: v105:0 > 32 && v133:0 > 0 && sum~cons_16~v133:0 = 16 + v133:0

----------------------------------------

(8)
Obligation:
Rules:
f_179(sum~cons_16~v133:0, v105:0) -> f_179(v133:0, 16 + v133:0) :|: v105:0 > 32 && v133:0 > 0 && sum~cons_16~v133:0 = 16 + v133:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_179(sum~cons_16~v133:0:0, v105:0:0) -> f_179(v133:0:0, 16 + v133:0:0) :|: v105:0:0 > 32 && v133:0:0 > 0 && sum~cons_16~v133:0:0 = 16 + v133:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_179(x, x1)] = -15 + x

The following rules are decreasing:
f_179(sum~cons_16~v133:0:0, v105:0:0) -> f_179(v133:0:0, 16 + v133:0:0) :|: v105:0:0 > 32 && v133:0:0 > 0 && sum~cons_16~v133:0:0 = 16 + v133:0:0
The following rules are bounded:
f_179(sum~cons_16~v133:0:0, v105:0:0) -> f_179(v133:0:0, 16 + v133:0:0) :|: v105:0:0 > 32 && v133:0:0 > 0 && sum~cons_16~v133:0:0 = 16 + v133:0:0

----------------------------------------

(12)
YES
/home/ubuntu/tool/FSE_benchmark/loop/Unsigned_Wraparound_Error_4_T.c:9:22: warning: implicit declaration of function '__VERIFIER_nondet_uint' is invalid in C99 [-Wimplicit-function-declaration]
    unsigned int n = __VERIFIER_nondet_uint();
                     ^
1 warning generated.

line 51:18 mismatched input 'nofree' expecting CLOSEC
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
 
